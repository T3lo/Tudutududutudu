
I:\XXX\HTMLnCSSParser>echo off 
Initializing all environment parameters

{
    "Java_Files":  "\\src\\java",
    "CSS_Files":  "\\src\\resources\\web\\css",
    "Root_Path":  "I:\\XXX\\HTMLnCSSParser"
}
Reflecting changes to internal\env.json
Output:
##########################################
Processing: I:\XXX\HTMLnCSSParser\src\resources\web\html\test.html
<!DOCTYPE html><html class="gr__docs_oracle_com" lang="en"><link type="text/css" id="dark-mode" rel="stylesheet" href=""><style type="text/css" id="dark-mode-custom-style"></style><head> <!-- Generated by javadoc (1.8.0_211) on Wed Mar 06 05:40:48 PST 2019 --> <title>HashMap (Java Platform SE 8 )</title> <meta name="date" content="2019-03-06"> <meta name="keywords" content="java.util.HashMap class"> <meta name="keywords" content="size()"> <meta name="keywords" content="isEmpty()"> <meta name="keywords" content="get()"> <meta name="keywords" content="containsKey()"> <meta name="keywords" content="put()"> <meta name="keywords" content="putAll()"> <meta name="keywords" content="remove()"> <meta name="keywords" content="clear()"> <meta name="keywords" content="containsValue()"> <meta name="keywords" content="keySet()"> <meta name="keywords" content="values()"> <meta name="keywords" content="entrySet()"> <meta name="keywords" content="getOrDefault()"> <meta name="keywords" content="putIfAbsent()"> <meta name="keywords" content="replace()"> <meta name="keywords" content="computeIfAbsent()"> <meta name="keywords" content="computeIfPresent()"> <meta name="keywords" content="compute()"> <meta name="keywords" content="merge()"> <meta name="keywords" content="forEach()"> <meta name="keywords" content="replaceAll()"> <meta name="keywords" content="clone()"> <link rel="stylesheet" type="text/css" href="../../stylesheet.css" title="Style"> <script type="text/javascript" src="../../script.js"></script> <script> </script> <script src="/en/dcommon/js/global.js"></script></head><body data-gr-c-s-loaded="true"> <script type="text/javascript"> </script> <noscript> <div>JavaScript is disabled on your browser.</div> </noscript> <!-- ========= START OF TOP NAVBAR ======= --> <div class="topNav"><a name="navbar.top"> <!-- --> </a> <div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div> <a name="navbar.top.firstrow"> <!-- --> </a> <ul class="navList" title="Navigation"> <li><a href="../../overview-summary.html">Overview</a></li> <li><a href="package-summary.html">Package</a></li> <li class="navBarCell1Rev">Class</li> <li><a href="class-use/HashMap.html">Use</a></li> <li><a href="package-tree.html">Tree</a></li> <li><a href="../../deprecated-list.html">Deprecated</a></li> <li><a href="../../index-files/index-1.html">Index</a></li> <li><a href="../../help-doc.html">Help</a></li> </ul> <div class="aboutLanguage"><strong>Javaâ„¢&nbsp;Platform<br>Standard&nbsp;Ed.&nbsp;8</strong></div> </div> <div class="subNav"> <ul class="navList"> <li><a href="../../java/util/GregorianCalendar.html" title="class in java.util"><span class="typeNameLink">Prev&nbsp;Class</span></a></li> <li><a href="../../java/util/HashSet.html" title="class in java.util"><span class="typeNameLink">Next&nbsp;Class</span></a></li> </ul> <ul class="navList"> <li><a href="../../index.html?java/util/HashMap.html" target="_top">Frames</a></li> <li><a href="HashMap.html" target="_top">No&nbsp;Frames</a></li> </ul> <ul class="navList" id="allclasses_navbar_top" style="display: block;"> <li><a href="../../allclasses-noframe.html">All&nbsp;Classes</a></li> </ul> <div> <script type="text/javascript"> </script> </div> <div> <ul class="subNavList"> <li>Summary:&nbsp;</li> <li><a href="#nested.classes.inherited.from.class.java.util.AbstractMap">Nested</a>&nbsp;|&nbsp;</li> <li>Field&nbsp;|&nbsp;</li> <li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li> <li><a href="#method.summary">Method</a></li> </ul> <ul class="subNavList"> <li>Detail:&nbsp;</li> <li>Field&nbsp;|&nbsp;</li> <li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li> <li><a href="#method.detail">Method</a></li> </ul> </div> <a name="skip.navbar.top"> <!-- --> </a> </div> <!-- ========= END OF TOP NAVBAR ========= --> <!-- ======== START OF CLASS DATA ======== --> <div class="header"> <div class="subTitle">compact1, compact2, compact3</div> <div class="subTitle">java.util</div> <h2 title="Class HashMap" class="title">Class HashMap&lt;K,V&gt;</h2> </div> <div class="contentContainer"> <ul class="inheritance"> <li><a href="../../java/lang/Object.html" title="class in java.lang">java.lang.Object</a></li> <li> <ul class="inheritance"> <li><a href="../../java/util/AbstractMap.html" title="class in java.util">java.util.AbstractMap</a>&lt;K,V&gt;</li> <li> <ul class="inheritance"> <li>java.util.HashMap&lt;K,V&gt;</li> </ul> </li> </ul> </li> </ul> <div class="description"> <ul class="blockList"> <li class="blockList"> <dl> <dt><span class="paramLabel">Type Parameters:</span></dt> <dd><code>K</code> - the type of keys maintained by this map</dd> <dd><code>V</code> - the type of mapped values</dd> </dl> <dl> <dt>All Implemented Interfaces:</dt> <dd><a href="../../java/io/Serializable.html" title="interface in java.io">Serializable</a>, <a href="../../java/lang/Cloneable.html" title="interface in java.lang">Cloneable</a>, <a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;K,V&gt;</dd> </dl> <dl> <dt>Direct Known Subclasses:</dt> <dd><a href="../../java/util/LinkedHashMap.html" title="class in java.util">LinkedHashMap</a>, <a href="../../javax/print/attribute/standard/PrinterStateReasons.html" title="class in javax.print.attribute.standard">PrinterStateReasons</a></dd> </dl> <hr> <br> <pre>public class <span class="typeNameLabel">HashMap&lt;K,V&gt;</span>extends <a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;K,V&gt;implements <a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;K,V&gt;, <a href="../../java/lang/Cloneable.html" title="interface in java.lang">Cloneable</a>, <a href="../../java/io/Serializable.html" title="interface in java.io">Serializable</a></pre> <div class="block">Hash table based implementation of the <tt>Map</tt> interface. This implementation provides all of the optional map operations, and permits <tt>null</tt> values and the <tt>null</tt> key. (The <tt>HashMap</tt> class is roughly equivalent to <tt>Hashtable</tt>, except that it is unsynchronized and permits nulls.) This class makes no guarantees as to the order of the map; in particular, it does not guarantee that the order will remain constant over time. <p>This implementation provides constant-time performance for the basic operations (<tt>get</tt> and <tt>put</tt>), assuming the hash function disperses the elements properly among the buckets. Iteration over collection views requires time proportional to the "capacity" of the <tt>HashMap</tt> instance (the number of buckets) plus its size (the number of key-value mappings). Thus, it's very important not to set the initial capacity too high (or the load factor too low) if iteration performance is important. </p> <p>An instance of <tt>HashMap</tt> has two parameters that affect its performance: <i>initial capacity</i> and <i>load factor</i>. The <i>capacity</i> is the number of buckets in the hash table, and the initial capacity is simply the capacity at the time the hash table is created. The <i>load factor</i> is a measure of how full the hash table is allowed to get before its capacity is automatically increased. When the number of entries in the hash table exceeds the product of the load factor and the current capacity, the hash table is <i>rehashed</i> (that is, internal data structures are rebuilt) so that the hash table has approximately twice the number of buckets. </p> <p>As a general rule, the default load factor (.75) offers a good tradeoff between time and space costs. Higher values decrease the space overhead but increase the lookup cost (reflected in most of the operations of the <tt>HashMap</tt> class, including <tt>get</tt> and <tt>put</tt>). The expected number of entries in the map and its load factor should be taken into account when setting its initial capacity, so as to minimize the number of rehash operations. If the initial capacity is greater than the maximum number of entries divided by the load factor, no rehash operations will ever occur. </p> <p>If many mappings are to be stored in a <tt>HashMap</tt> instance, creating it with a sufficiently large capacity will allow the mappings to be stored more efficiently than letting it perform automatic rehashing as needed to grow the table. Note that using many keys with the same <code>hashCode()</code> is a sure way to slow down performance of any hash table. To ameliorate impact, when keys are <a href="../../java/lang/Comparable.html" title="interface in java.lang"><code>Comparable</code></a>, this class may use comparison order among keys to help break ties. </p> <p><strong>Note that this implementation is not synchronized.</strong> If multiple threads access a hash map concurrently, and at least one of the threads modifies the map structurally, it <i>must</i> be synchronized externally. (A structural modification is any operation that adds or deletes one or more mappings; merely changing the value associated with a key that an instance already contains is not a structural modification.) This is typically accomplished by synchronizing on some object that naturally encapsulates the map. If no such object exists, the map should be "wrapped" using the <a href="../../java/util/Collections.html#synchronizedMap-java.util.Map-"><code>Collections.synchronizedMap</code></a> method. This is best done at creation time, to prevent accidental unsynchronized access to the map:</p> <pre> Map m = Collections.synchronizedMap(new HashMap(...));</pre> <p>The iterators returned by all of this class's "collection view methods" are <i>fail-fast</i>: if the map is structurally modified at any time after the iterator is created, in any way except through the iterator's own <tt>remove</tt> method, the iterator will throw a <a href="../../java/util/ConcurrentModificationException.html" title="class in java.util"><code>ConcurrentModificationException</code></a>. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. </p> <p>Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw <tt>ConcurrentModificationException</tt> on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: <i>the fail-fast behavior of iterators should be used only to detect bugs.</i> </p> <p>This class is a member of the <a href="../../../technotes/guides/collections/index.html"> Java Collections Framework</a>.</p> </div> <dl> <dt><span class="simpleTagLabel">Since:</span></dt> <dd>1.2</dd> <dt><span class="seeLabel">See Also:</span></dt> <dd><a href="../../java/lang/Object.html#hashCode--"><code>Object.hashCode()</code></a>, <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a>, <a href="../../java/util/Map.html" title="interface in java.util"><code>Map</code></a>, <a href="../../java/util/TreeMap.html" title="class in java.util"><code>TreeMap</code></a>, <a href="../../java/util/Hashtable.html" title="class in java.util"><code>Hashtable</code></a>, <a href="../../serialized-form.html#java.util.HashMap">Serialized Form</a></dd> </dl> </li> </ul> </div> <div class="summary"> <ul class="blockList"> <li class="blockList"> <!-- ======== NESTED CLASS SUMMARY ======== --> <ul class="blockList"> <li class="blockList"><a name="nested.class.summary"> <!-- --> </a> <h3>Nested Class Summary</h3> <ul class="blockList"> <li class="blockList"><a name="nested.classes.inherited.from.class.java.util.AbstractMap"> <!-- --> </a> <h3>Nested classes/interfaces inherited from class&nbsp;java.util.<a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a></h3> <code><a href="../../java/util/AbstractMap.SimpleEntry.html" title="class in java.util">AbstractMap.SimpleEntry</a>&lt;<a href="../../java/util/AbstractMap.SimpleEntry.html" title="type parameter in AbstractMap.SimpleEntry">K</a>,<a href="../../java/util/AbstractMap.SimpleEntry.html" title="type parameter in AbstractMap.SimpleEntry">V</a>&gt;, <a href="../../java/util/AbstractMap.SimpleImmutableEntry.html" title="class in java.util">AbstractMap.SimpleImmutableEntry</a>&lt;<a href="../../java/util/AbstractMap.SimpleImmutableEntry.html" title="type parameter in AbstractMap.SimpleImmutableEntry">K</a>,<a href="../../java/util/AbstractMap.SimpleImmutableEntry.html" title="type parameter in AbstractMap.SimpleImmutableEntry">V</a>&gt;</code> </li> </ul> <ul class="blockList"> <li class="blockList"><a name="nested.classes.inherited.from.class.java.util.Map"> <!-- --> </a> <h3>Nested classes/interfaces inherited from interface&nbsp;java.util.<a href="../../java/util/Map.html" title="interface in java.util">Map</a></h3> <code><a href="../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../java/util/Map.Entry.html" title="type parameter in Map.Entry">K</a>,<a href="../../java/util/Map.Entry.html" title="type parameter in Map.Entry">V</a>&gt;</code> </li> </ul> </li> </ul> <!-- ======== CONSTRUCTOR SUMMARY ======== --> <ul class="blockList"> <li class="blockList"><a name="constructor.summary"> <!-- --> </a> <h3>Constructor Summary</h3> <table class="memberSummary" summary="Constructor Summary table, listing constructors, and an explanation" cellspacing="0" cellpadding="3" border="0"> <caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption> <tbody> <tr> <th class="colOne" scope="col">Constructor and Description</th> </tr> <tr class="altColor"> <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap--">HashMap</a></span>()</code> <div class="block">Constructs an empty <tt>HashMap</tt> with the default initial capacity (16) and the default load factor (0.75).</div> </td> </tr> <tr class="rowColor"> <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap-int-">HashMap</a></span>(int&nbsp;initialCapacity)</code> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and the default load factor (0.75).</div> </td> </tr> <tr class="altColor"> <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap-int-float-">HashMap</a></span>(int&nbsp;initialCapacity, float&nbsp;loadFactor)</code> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and load factor.</div> </td> </tr> <tr class="rowColor"> <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap-java.util.Map-">HashMap</a></span>(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</code> <div class="block">Constructs a new <tt>HashMap</tt> with the same mappings as the specified <tt>Map</tt>.</div> </td> </tr> </tbody> </table> </li> </ul> <!-- ========== METHOD SUMMARY =========== --> <ul class="blockList"> <li class="blockList"><a name="method.summary"> <!-- --> </a> <h3>Method Summary</h3> <table class="memberSummary" summary="Method Summary table, listing methods, and an explanation" cellspacing="0" cellpadding="3" border="0"> <caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption> <tbody> <tr> <th class="colFirst" scope="col">Modifier and Type</th> <th class="colLast" scope="col">Method and Description</th> </tr> <tr id="i0" class="altColor"> <td class="colFirst"><code>void</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#clear--">clear</a></span>()</code> <div class="block">Removes all of the mappings from this map.</div> </td> </tr> <tr id="i1" class="rowColor"> <td class="colFirst"><code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#clone--">clone</a></span>()</code> <div class="block">Returns a shallow copy of this <tt>HashMap</tt> instance: the keys and values themselves are not cloned.</div> </td> </tr> <tr id="i2" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#compute-K-java.util.function.BiFunction-">compute</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</code> <div class="block">Attempts to compute a mapping for the specified key and its current mapped value (or <code>null</code> if there is no current mapping). </div> </td> </tr> <tr id="i3" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#computeIfAbsent-K-java.util.function.Function-">computeIfAbsent</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/Function.html" title="interface in java.util.function">Function</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;mappingFunction)</code> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>), attempts to compute its value using the given mapping function and enters it into this map unless <code>null</code>.</div> </td> </tr> <tr id="i4" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#computeIfPresent-K-java.util.function.BiFunction-">computeIfPresent</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</code> <div class="block">If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.</div> </td> </tr> <tr id="i5" class="rowColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#containsKey-java.lang.Object-">containsKey</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</code> <div class="block">Returns <tt>true</tt> if this map contains a mapping for the specified key.</div> </td> </tr> <tr id="i6" class="altColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#containsValue-java.lang.Object-">containsValue</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</code> <div class="block">Returns <tt>true</tt> if this map maps one or more keys to the specified value.</div> </td> </tr> <tr id="i7" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&gt;</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#entrySet--">entrySet</a></span>()</code> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the mappings contained in this map.</div> </td> </tr> <tr id="i8" class="altColor"> <td class="colFirst"><code>void</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#forEach-java.util.function.BiConsumer-">forEach</a></span>(<a href="../../java/util/function/BiConsumer.html" title="interface in java.util.function">BiConsumer</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;action)</code> <div class="block">Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.</div> </td> </tr> <tr id="i9" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#get-java.lang.Object-">get</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</code> <div class="block">Returns the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key.</div> </td> </tr> <tr id="i10" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#getOrDefault-java.lang.Object-V-">getOrDefault</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;defaultValue)</code> <div class="block">Returns the value to which the specified key is mapped, or <code>defaultValue</code> if this map contains no mapping for the key. </div> </td> </tr> <tr id="i11" class="rowColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#isEmpty--">isEmpty</a></span>()</code> <div class="block">Returns <tt>true</tt> if this map contains no key-value mappings.</div> </td> </tr> <tr id="i12" class="altColor"> <td class="colFirst"><code><a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&gt;</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#keySet--">keySet</a></span>()</code> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the keys contained in this map.</div> </td> </tr> <tr id="i13" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#merge-K-V-java.util.function.BiFunction-">merge</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</code> <div class="block">If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.</div> </td> </tr> <tr id="i14" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#put-K-V-">put</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</code> <div class="block">Associates the specified value with the specified key in this map.</div> </td> </tr> <tr id="i15" class="rowColor"> <td class="colFirst"><code>void</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#putAll-java.util.Map-">putAll</a></span>(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</code> <div class="block">Copies all of the mappings from the specified map to this map.</div> </td> </tr> <tr id="i16" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#putIfAbsent-K-V-">putIfAbsent</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</code> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>) associates it with the given value and returns <code>null</code>, else returns the current value.</div> </td> </tr> <tr id="i17" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#remove-java.lang.Object-">remove</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</code> <div class="block">Removes the mapping for the specified key from this map if present.</div> </td> </tr> <tr id="i18" class="altColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#remove-java.lang.Object-java.lang.Object-">remove</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</code> <div class="block">Removes the entry for the specified key only if it is currently mapped to the specified value.</div> </td> </tr> <tr id="i19" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#replace-K-V-">replace</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</code> <div class="block">Replaces the entry for the specified key only if it is currently mapped to some value.</div> </td> </tr> <tr id="i20" class="altColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#replace-K-V-V-">replace</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;oldValue, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;newValue)</code> <div class="block">Replaces the entry for the specified key only if currently mapped to the specified value.</div> </td> </tr> <tr id="i21" class="rowColor"> <td class="colFirst"><code>void</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#replaceAll-java.util.function.BiFunction-">replaceAll</a></span>(<a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;function)</code> <div class="block">Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.</div> </td> </tr> <tr id="i22" class="altColor"> <td class="colFirst"><code>int</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#size--">size</a></span>()</code> <div class="block">Returns the number of key-value mappings in this map. </div> </td> </tr> <tr id="i23" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#values--">values</a></span>()</code> <div class="block">Returns a <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a> view of the values contained in this map.</div> </td> </tr> </tbody> </table> <ul class="blockList"> <li class="blockList"><a name="methods.inherited.from.class.java.util.AbstractMap"> <!-- --> </a> <h3>Methods inherited from class&nbsp;java.util.<a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a></h3> <code><a href="../../java/util/AbstractMap.html#equals-java.lang.Object-">equals</a>, <a href="../../java/util/AbstractMap.html#hashCode--">hashCode</a>, <a href="../../java/util/AbstractMap.html#toString--">toString</a></code> </li> </ul> <ul class="blockList"> <li class="blockList"><a name="methods.inherited.from.class.java.lang.Object"> <!-- --> </a> <h3>Methods inherited from class&nbsp;java.lang.<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> </h3> <code><a href="../../java/lang/Object.html#finalize--">finalize</a>, <a href="../../java/lang/Object.html#getClass--">getClass</a>, <a href="../../java/lang/Object.html#notify--">notify</a>, <a href="../../java/lang/Object.html#notifyAll--">notifyAll</a>, <a href="../../java/lang/Object.html#wait--">wait</a>, <a href="../../java/lang/Object.html#wait-long-">wait</a>, <a href="../../java/lang/Object.html#wait-long-int-">wait</a></code> </li> </ul> <ul class="blockList"> <li class="blockList"><a name="methods.inherited.from.class.java.util.Map"> <!-- --> </a> <h3>Methods inherited from interface&nbsp;java.util.<a href="../../java/util/Map.html" title="interface in java.util">Map</a></h3> <code><a href="../../java/util/Map.html#equals-java.lang.Object-">equals</a>, <a href="../../java/util/Map.html#hashCode--">hashCode</a></code> </li> </ul> </li> </ul> </li> </ul> </div> <div class="details"> <ul class="blockList"> <li class="blockList"> <!-- ========= CONSTRUCTOR DETAIL ======== --> <ul class="blockList"> <li class="blockList"><a name="constructor.detail"> <!-- --> </a> <h3>Constructor Detail</h3> <a name="HashMap-int-float-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>HashMap</h4> <pre>public&nbsp;HashMap(int&nbsp;initialCapacity, float&nbsp;loadFactor)</pre> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and load factor.</div> <dl> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>initialCapacity</code> - the initial capacity</dd> <dd><code>loadFactor</code> - the load factor</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the initial capacity is negative or the load factor is nonpositive</dd> </dl> </li> </ul> <a name="HashMap-int-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>HashMap</h4> <pre>public&nbsp;HashMap(int&nbsp;initialCapacity)</pre> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and the default load factor (0.75).</div> <dl> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>initialCapacity</code> - the initial capacity.</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the initial capacity is negative.</dd> </dl> </li> </ul> <a name="HashMap--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>HashMap</h4> <pre>public&nbsp;HashMap()</pre> <div class="block">Constructs an empty <tt>HashMap</tt> with the default initial capacity (16) and the default load factor (0.75).</div> </li> </ul> <a name="HashMap-java.util.Map-"> <!-- --> </a> <ul class="blockListLast"> <li class="blockList"> <h4>HashMap</h4> <pre>public&nbsp;HashMap(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</pre> <div class="block">Constructs a new <tt>HashMap</tt> with the same mappings as the specified <tt>Map</tt>. The <tt>HashMap</tt> is created with default load factor (0.75) and an initial capacity sufficient to hold the mappings in the specified <tt>Map</tt>.</div> <dl> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>m</code> - the map whose mappings are to be placed in this map</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified map is null</dd> </dl> </li> </ul> </li> </ul> <!-- ============ METHOD DETAIL ========== --> <ul class="blockList"> <li class="blockList"><a name="method.detail"> <!-- --> </a> <h3>Method Detail</h3> <a name="size--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>size</h4> <pre>public&nbsp;int&nbsp;size()</pre> <div class="block">Returns the number of key-value mappings in this map.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#size--">size</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#size--">size</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the number of key-value mappings in this map</dd> </dl> </li> </ul> <a name="isEmpty--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>isEmpty</h4> <pre>public&nbsp;boolean&nbsp;isEmpty()</pre> <div class="block">Returns <tt>true</tt> if this map contains no key-value mappings. </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#isEmpty--">isEmpty</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#isEmpty--">isEmpty</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><tt>true</tt> if this map contains no key-value mappings</dd> </dl> </li> </ul> <a name="get-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>get</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;get(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</pre> <div class="block">Returns the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key. <p>More formally, if this map contains a mapping from a key <code>k</code> to a value <code>v</code> such that <code>(key==null ? k==null : key.equals(k))</code>, then this method returns <code>v</code>; otherwise it returns <code>null</code>. (There can be at most one such mapping.) </p> <p>A return value of <code>null</code> does not <i>necessarily</i> indicate that the map contains no mapping for the key; it's also possible that the map explicitly maps the key to <code>null</code>. The <a href="../../java/util/HashMap.html#containsKey-java.lang.Object-"><code>containsKey</code></a> operation may be used to distinguish these two cases.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#get-java.lang.Object-">get</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#get-java.lang.Object-">get</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - the key whose associated value is to be returned</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key</dd> <dt><span class="seeLabel">See Also:</span></dt> <dd><a href="../../java/util/HashMap.html#put-K-V-"><code>put(Object, Object)</code></a></dd> </dl> </li> </ul> <a name="containsKey-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>containsKey</h4> <pre>public&nbsp;boolean&nbsp;containsKey(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</pre> <div class="block">Returns <tt>true</tt> if this map contains a mapping for the specified key.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#containsKey-java.lang.Object-">containsKey</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#containsKey-java.lang.Object-">containsKey</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - The key whose presence in this map is to be tested</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><tt>true</tt> if this map contains a mapping for the specified key.</dd> </dl> </li> </ul> <a name="put-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="put-K-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>put</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;put(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</pre> <div class="block">Associates the specified value with the specified key in this map. If the map previously contained a mapping for the key, the old value is replaced.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#put-K-V-">put</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#put-K-V-">put</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>value</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with <tt>key</tt>, or <tt>null</tt> if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return can also indicate that the map previously associated <tt>null</tt> with <tt>key</tt>.)</dd> </dl> </li> </ul> <a name="putAll-java.util.Map-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>putAll</h4> <pre>public&nbsp;void&nbsp;putAll(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</pre> <div class="block">Copies all of the mappings from the specified map to this map. These mappings will replace any mappings that this map had for any of the keys currently in the specified map.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#putAll-java.util.Map-">putAll</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#putAll-java.util.Map-">putAll</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>m</code> - mappings to be stored in this map</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified map is null</dd> </dl> </li> </ul> <a name="remove-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>remove</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;remove(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</pre> <div class="block">Removes the mapping for the specified key from this map if present.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#remove-java.lang.Object-">remove</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#remove-java.lang.Object-">remove</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key whose mapping is to be removed from the map</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with <tt>key</tt>, or <tt>null</tt> if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return can also indicate that the map previously associated <tt>null</tt> with <tt>key</tt>.)</dd> </dl> </li> </ul> <a name="clear--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>clear</h4> <pre>public&nbsp;void&nbsp;clear()</pre> <div class="block">Removes all of the mappings from this map. The map will be empty after this call returns.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#clear--">clear</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#clear--">clear</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> </dl> </li> </ul> <a name="containsValue-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>containsValue</h4> <pre>public&nbsp;boolean&nbsp;containsValue(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</pre> <div class="block">Returns <tt>true</tt> if this map maps one or more keys to the specified value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#containsValue-java.lang.Object-">containsValue</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#containsValue-java.lang.Object-">containsValue</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>value</code> - value whose presence in this map is to be tested</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><tt>true</tt> if this map maps one or more keys to the specified value</dd> </dl> </li> </ul> <a name="keySet--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>keySet</h4> <pre>public&nbsp;<a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&gt;&nbsp;keySet()</pre> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own <tt>remove</tt> operation), the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#keySet--">keySet</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#keySet--">keySet</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a set view of the keys contained in this map</dd> </dl> </li> </ul> <a name="values--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>values</h4> <pre>public&nbsp;<a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;values()</pre> <div class="block">Returns a <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a> view of the values contained in this map. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. If the map is modified while an iteration over the collection is in progress (except through the iterator's own <tt>remove</tt> operation), the results of the iteration are undefined. The collection supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Collection.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#values--">values</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#values--">values</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a view of the values contained in this map</dd> </dl> </li> </ul> <a name="entrySet--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>entrySet</h4> <pre>public&nbsp;<a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&gt;&nbsp;entrySet()</pre> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the mappings contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own <tt>remove</tt> operation, or through the <tt>setValue</tt> operation on a map entry returned by the iterator) the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#entrySet--">entrySet</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#entrySet--">entrySet</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a set view of the mappings contained in this map</dd> </dl> </li> </ul> <a name="getOrDefault-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="getOrDefault-java.lang.Object-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>getOrDefault</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;getOrDefault(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;defaultValue)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#getOrDefault-java.lang.Object-V-">Map</a></code></span> </div> <div class="block">Returns the value to which the specified key is mapped, or <code>defaultValue</code> if this map contains no mapping for the key.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#getOrDefault-java.lang.Object-V-">getOrDefault</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - the key whose associated value is to be returned</dd> <dd><code>defaultValue</code> - the default mapping of the key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the value to which the specified key is mapped, or <code>defaultValue</code> if this map contains no mapping for the key</dd> </dl> </li> </ul> <a name="putIfAbsent-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="putIfAbsent-K-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>putIfAbsent</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;putIfAbsent(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#putIfAbsent-K-V-">Map</a></code></span> </div> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>) associates it with the given value and returns <code>null</code>, else returns the current value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#putIfAbsent-K-V-">putIfAbsent</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>value</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with the specified key, or <code>null</code> if there was no mapping for the key. (A <code>null</code> return can also indicate that the map previously associated <code>null</code> with the key, if the implementation supports null values.)</dd> </dl> </li> </ul> <a name="remove-java.lang.Object-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>remove</h4> <pre>public&nbsp;boolean&nbsp;remove(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#remove-java.lang.Object-java.lang.Object-">Map</a></code></span> </div> <div class="block">Removes the entry for the specified key only if it is currently mapped to the specified value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#remove-java.lang.Object-java.lang.Object-">remove</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is associated</dd> <dd><code>value</code> - value expected to be associated with the specified key </dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><code>true</code> if the value was removed</dd> </dl> </li> </ul> <a name="replace-java.lang.Object-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="replace-K-V-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>replace</h4> <pre>public&nbsp;boolean&nbsp;replace(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;oldValue, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;newValue)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#replace-K-V-V-">Map</a></code></span> </div> <div class="block">Replaces the entry for the specified key only if currently mapped to the specified value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#replace-K-V-V-">replace</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is associated</dd> <dd><code>oldValue</code> - value expected to be associated with the specified key</dd> <dd><code>newValue</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><code>true</code> if the value was replaced</dd> </dl> </li> </ul> <a name="replace-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="replace-K-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>replace</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;replace(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#replace-K-V-">Map</a></code></span> </div> <div class="block">Replaces the entry for the specified key only if it is currently mapped to some value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#replace-K-V-">replace</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is associated</dd> <dd><code>value</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with the specified key, or <code>null</code> if there was no mapping for the key. (A <code>null</code> return can also indicate that the map previously associated <code>null</code> with the key, if the implementation supports null values.)</dd> </dl> </li> </ul> <a name="computeIfAbsent-java.lang.Object-java.util.function.Function-"> <!-- --> </a><a name="computeIfAbsent-K-java.util.function.Function-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>computeIfAbsent</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;computeIfAbsent(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/Function.html" title="interface in java.util.function">Function</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;mappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#computeIfAbsent-K-java.util.function.Function-">Map</a></code></span> </div> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>), attempts to compute its value using the given mapping function and enters it into this map unless <code>null</code>. <p>If the function returns <code>null</code> no mapping is recorded. If the function itself throws an (unchecked) exception, the exception is rethrown, and no mapping is recorded. The most common usage is to construct a new object serving as an initial mapped value or memoized result, as in: </p> <pre> <code> map.computeIfAbsent(key, k -&gt; new Value(f(k))); </code></pre> <p>Or to implement a multi-value map, <code>Map&lt;K,Collection&lt;V&gt;&gt;</code>, supporting multiple values per key: </p> <pre> <code> map.computeIfAbsent(key, k -&gt; new HashSet&lt;V&gt;()).add(v); </code></pre> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#computeIfAbsent-K-java.util.function.Function-">computeIfAbsent</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>mappingFunction</code> - the function to compute a value</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the current (existing or computed) value associated with the specified key, or null if the computed value is null</dd> </dl> </li> </ul> <a name="computeIfPresent-java.lang.Object-java.util.function.BiFunction-"> <!-- --> </a><a name="computeIfPresent-K-java.util.function.BiFunction-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>computeIfPresent</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;computeIfPresent(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value. <p>If the function returns <code>null</code>, the mapping is removed. If the function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-">computeIfPresent</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>remappingFunction</code> - the function to compute a value</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the new value associated with the specified key, or null if none</dd> </dl> </li> </ul> <a name="compute-java.lang.Object-java.util.function.BiFunction-"> <!-- --> </a><a name="compute-K-java.util.function.BiFunction-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>compute</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;compute(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#compute-K-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">Attempts to compute a mapping for the specified key and its current mapped value (or <code>null</code> if there is no current mapping). For example, to either create or append a <code>String</code> msg to a value mapping: <pre> <code> map.compute(key, (k, v) -&gt; (v == null) ? msg : v.concat(msg))</code></pre> (Method <a href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-"><code>merge()</code></a> is often simpler to use for such purposes.) <p>If the function returns <code>null</code>, the mapping is removed (or remains absent if initially absent). If the function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#compute-K-java.util.function.BiFunction-">compute</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>remappingFunction</code> - the function to compute a value</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the new value associated with the specified key, or null if none</dd> </dl> </li> </ul> <a name="merge-java.lang.Object-java.lang.Object-java.util.function.BiFunction-"> <!-- --> </a><a name="merge-K-V-java.util.function.BiFunction-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>merge</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;merge(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value. Otherwise, replaces the associated value with the results of the given remapping function, or removes if the result is <code>null</code>. This method may be of use when combining multiple mapped values for a key. For example, to either create or append a <code>String msg</code> to a value mapping: <pre> <code> map.merge(key, msg, String::concat) </code></pre> <p>If the function returns <code>null</code> the mapping is removed. If the function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-">merge</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the resulting value is to be associated </dd> <dd><code>value</code> - the non-null value to be merged with the existing value associated with the key or, if no existing value or a null value is associated with the key, to be associated with the key</dd> <dd><code>remappingFunction</code> - the function to recompute a value if present</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the new value associated with the specified key, or null if no value is associated with the key</dd> </dl> </li> </ul> <a name="forEach-java.util.function.BiConsumer-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>forEach</h4> <pre>public&nbsp;void&nbsp;forEach(<a href="../../java/util/function/BiConsumer.html" title="interface in java.util.function">BiConsumer</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;action)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#forEach-java.util.function.BiConsumer-">Map</a></code></span> </div> <div class="block">Performs the given action for each entry in this map until all entries have been processed or the action throws an exception. Unless otherwise specified by the implementing class, actions are performed in the order of entry set iteration (if an iteration order is specified.) Exceptions thrown by the action are relayed to the caller.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#forEach-java.util.function.BiConsumer-">forEach</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>action</code> - The action to be performed for each entry</dd> </dl> </li> </ul> <a name="replaceAll-java.util.function.BiFunction-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>replaceAll</h4> <pre>public&nbsp;void&nbsp;replaceAll(<a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;function)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#replaceAll-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception. Exceptions thrown by the function are relayed to the caller.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#replaceAll-java.util.function.BiFunction-">replaceAll</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>function</code> - the function to apply to each entry</dd> </dl> </li> </ul> <a name="clone--"> <!-- --> </a> <ul class="blockListLast"> <li class="blockList"> <h4>clone</h4> <pre>public&nbsp;<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;clone()</pre> <div class="block">Returns a shallow copy of this <tt>HashMap</tt> instance: the keys and values themselves are not cloned.</div> <dl> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#clone--">clone</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a shallow copy of this map</dd> <dt><span class="seeLabel">See Also:</span></dt> <dd><a href="../../java/lang/Cloneable.html" title="interface in java.lang"><code>Cloneable</code></a></dd> </dl> </li> </ul> </li> </ul> </li> </ul> </div> </div> <!-- ========= END OF CLASS DATA ========= --> <!-- ======= START OF BOTTOM NAVBAR ====== --> <div class="bottomNav"><a name="navbar.bottom"> <!-- --> </a> <div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div> <a name="navbar.bottom.firstrow"> <!-- --> </a> <ul class="navList" title="Navigation"> <li><a href="../../overview-summary.html">Overview</a></li> <li><a href="package-summary.html">Package</a></li> <li class="navBarCell1Rev">Class</li> <li><a href="class-use/HashMap.html">Use</a></li> <li><a href="package-tree.html">Tree</a></li> <li><a href="../../deprecated-list.html">Deprecated</a></li> <li><a href="../../index-files/index-1.html">Index</a></li> <li><a href="../../help-doc.html">Help</a></li> </ul> <div class="aboutLanguage"><strong>Javaâ„¢&nbsp;Platform<br>Standard&nbsp;Ed.&nbsp;8</strong></div> </div> <div class="subNav"> <ul class="navList"> <li><a href="../../java/util/GregorianCalendar.html" title="class in java.util"><span class="typeNameLink">Prev&nbsp;Class</span></a></li> <li><a href="../../java/util/HashSet.html" title="class in java.util"><span class="typeNameLink">Next&nbsp;Class</span></a></li> </ul> <ul class="navList"> <li><a href="../../index.html?java/util/HashMap.html" target="_top">Frames</a></li> <li><a href="HashMap.html" target="_top">No&nbsp;Frames</a></li> </ul> <ul class="navList" id="allclasses_navbar_bottom" style="display: block;"> <li><a href="../../allclasses-noframe.html">All&nbsp;Classes</a></li> </ul> <div> <script type="text/javascript"> <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if (window == top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } // --> </script> </div> <div> <ul class="subNavList"> <li>Summary:&nbsp;</li> <li><a href="#nested.classes.inherited.from.class.java.util.AbstractMap">Nested</a>&nbsp;|&nbsp;</li> <li>Field&nbsp;|&nbsp;</li> <li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li> <li><a href="#method.summary">Method</a></li> </ul> <ul class="subNavList"> <li>Detail:&nbsp;</li> <li>Field&nbsp;|&nbsp;</li> <li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li> <li><a href="#method.detail">Method</a></li> </ul> </div> <a name="skip.navbar.bottom"> <!-- --> </a> </div> <!-- ======== END OF BOTTOM NAVBAR ======= --> <p class="legalCopy"><small> <font size="-1"> <a href="http://bugreport.sun.com/bugreport/">Submit a bug or feature</a> <br>For further API reference and developer documentation, see <a href="https://docs.oracle.com/javase/8/docs/index.html" target="_blank">Java SE Documentation</a>. That documentation contains more detailed, developer-targeted descriptions, with conceptual overviews, definitions of terms, workarounds, and working code examples.<br> <a href="../../../legal/cpyr.html">Copyright</a> Â© 1993, 2019, Oracle and/or its affiliates. All rights reserved. Use is subject to <a href="http://download.oracle.com/otndocs/jcp/java_se-8-mrel-spec/license.html">license terms</a>. Also see the <a target="_blank" href="http://www.oracle.com/technetwork/java/redist-137594.html">documentation redistribution policy</a>. </font> </small></p> <!-- Start SiteCatalyst code --> <script type="application/javascript" src="https://www.oracleimg.com/us/assets/metrics/ora_docs.js"></script> <script src="https://www.oracleimg.com/us/assets/metrics/ora_code_docs.js"></script> <script src="https://www.oracleimg.com/us/assets/metrics/ora_code.js"></script> <!-- End SiteCatalyst code --> <noscript> <p>Scripting on this page tracks web page traffic, but does not change the content in any way.</p> </noscript></body></html>
__________________________________________________________________
!DOCTYPE html
 class="gr__docs_oracle_com" lang="en" : html => [ lang = {en.} ] html => [ class = {gr__docs_oracle_com.} ] 
%%%%%%%%%%%%%%%%%%%%		html: true
Temp : html->0
 type="text/css" id="dark-mode" rel="stylesheet" href="" : link => [ rel = {stylesheet.} ] link => [ id = {dark-mode.} ] link => [ href = {} ] link => [ type = {text/css.} ] 
%%%%%%%%%%%%%%%%%%%%		link: false
Temp : html->link
 type="text/css" id="dark-mode-custom-style" : style => [ id = {dark-mode-custom-style.} ] style => [ type = {text/css.} ] 
%%%%%%%%%%%%%%%%%%%%		style: true
Temp : style->0
 Nada
/style <= html
Temp : html->style
 Nada
%%%%%%%%%%%%%%%%%%%%		head: true
Temp : head->0
 Nada
%%%%%%%%%%%%%%%%%%%%		title: true
Temp : title->0
 Nada
/title <= head
Temp : head->title
 name="date" content="2019-03-06" : meta => [ name = {date.} ] meta => [ content = {2019-03-06.} ] 
%%%%%%%%%%%%%%%%%%%%		meta: false
Temp : head->meta
 name="keywords" content="java.util.HashMap class" : meta => [ name = {keywords.} ] meta => [ content = {java.util.HashMap.class.} ] 
%%%%%%%%%%%%%%%%%%%%		meta: false
Temp : head->meta
 name="keywords" content="size()" : meta => [ name = {keywords.} ] meta => [ content = {size().} ] 
%%%%%%%%%%%%%%%%%%%%		meta: false
Temp : head->meta
 name="keywords" content="isEmpty()" : meta => [ name = {keywords.} ] meta => [ content = {isEmpty().} ] 
%%%%%%%%%%%%%%%%%%%%		meta: false
Temp : head->meta
 name="keywords" content="get()" : meta => [ name = {keywords.} ] meta => [ content = {get().} ] 
%%%%%%%%%%%%%%%%%%%%		meta: false
Temp : head->meta
 name="keywords" content="containsKey()" : meta => [ name = {keywords.} ] meta => [ content = {containsKey().} ] 
%%%%%%%%%%%%%%%%%%%%		meta: false
Temp : head->meta
 name="keywords" content="put()" : meta => [ name = {keywords.} ] meta => [ content = {put().} ] 
%%%%%%%%%%%%%%%%%%%%		meta: false
Temp : head->meta
 name="keywords" content="putAll()" : meta => [ name = {keywords.} ] meta => [ content = {putAll().} ] 
%%%%%%%%%%%%%%%%%%%%		meta: false
Temp : head->meta
 name="keywords" content="remove()" : meta => [ name = {keywords.} ] meta => [ content = {remove().} ] 
%%%%%%%%%%%%%%%%%%%%		meta: false
Temp : head->meta
 name="keywords" content="clear()" : meta => [ name = {keywords.} ] meta => [ content = {clear().} ] 
%%%%%%%%%%%%%%%%%%%%		meta: false
Temp : head->meta
 name="keywords" content="containsValue()" : meta => [ name = {keywords.} ] meta => [ content = {containsValue().} ] 
%%%%%%%%%%%%%%%%%%%%		meta: false
Temp : head->meta
 name="keywords" content="keySet()" : meta => [ name = {keywords.} ] meta => [ content = {keySet().} ] 
%%%%%%%%%%%%%%%%%%%%		meta: false
Temp : head->meta
 name="keywords" content="values()" : meta => [ name = {keywords.} ] meta => [ content = {values().} ] 
%%%%%%%%%%%%%%%%%%%%		meta: false
Temp : head->meta
 name="keywords" content="entrySet()" : meta => [ name = {keywords.} ] meta => [ content = {entrySet().} ] 
%%%%%%%%%%%%%%%%%%%%		meta: false
Temp : head->meta
 name="keywords" content="getOrDefault()" : meta => [ name = {keywords.} ] meta => [ content = {getOrDefault().} ] 
%%%%%%%%%%%%%%%%%%%%		meta: false
Temp : head->meta
 name="keywords" content="putIfAbsent()" : meta => [ name = {keywords.} ] meta => [ content = {putIfAbsent().} ] 
%%%%%%%%%%%%%%%%%%%%		meta: false
Temp : head->meta
 name="keywords" content="replace()" : meta => [ name = {keywords.} ] meta => [ content = {replace().} ] 
%%%%%%%%%%%%%%%%%%%%		meta: false
Temp : head->meta
 name="keywords" content="computeIfAbsent()" : meta => [ name = {keywords.} ] meta => [ content = {computeIfAbsent().} ] 
%%%%%%%%%%%%%%%%%%%%		meta: false
Temp : head->meta
 name="keywords" content="computeIfPresent()" : meta => [ name = {keywords.} ] meta => [ content = {computeIfPresent().} ] 
%%%%%%%%%%%%%%%%%%%%		meta: false
Temp : head->meta
 name="keywords" content="compute()" : meta => [ name = {keywords.} ] meta => [ content = {compute().} ] 
%%%%%%%%%%%%%%%%%%%%		meta: false
Temp : head->meta
 name="keywords" content="merge()" : meta => [ name = {keywords.} ] meta => [ content = {merge().} ] 
%%%%%%%%%%%%%%%%%%%%		meta: false
Temp : head->meta
 name="keywords" content="forEach()" : meta => [ name = {keywords.} ] meta => [ content = {forEach().} ] 
%%%%%%%%%%%%%%%%%%%%		meta: false
Temp : head->meta
 name="keywords" content="replaceAll()" : meta => [ name = {keywords.} ] meta => [ content = {replaceAll().} ] 
%%%%%%%%%%%%%%%%%%%%		meta: false
Temp : head->meta
 name="keywords" content="clone()" : meta => [ name = {keywords.} ] meta => [ content = {clone().} ] 
%%%%%%%%%%%%%%%%%%%%		meta: false
Temp : head->meta
 rel="stylesheet" type="text/css" href="../../stylesheet.css" title="Style" : link => [ rel = {stylesheet.} ] link => [ href = {../../stylesheet.css.} ] link => [ type = {text/css.} ] link => [ title = {Style.} ] 
%%%%%%%%%%%%%%%%%%%%		link: false
Temp : head->link
 type="text/javascript" src="../../script.js" : script => [ src = {../../script.js.} ] script => [ type = {text/javascript.} ] 
%%%%%%%%%%%%%%%%%%%%		script: true
 Nada
/script <= head
Temp : head->script
 Nada
%%%%%%%%%%%%%%%%%%%%		script: true
 Nada
/script <= head
Temp : head->script
 src="/en/dcommon/js/global.js" : script => [ src = {/en/dcommon/js/global.js.} ] 
%%%%%%%%%%%%%%%%%%%%		script: true
 Nada
/script <= head
Temp : head->script
 Nada
/head <= html
Temp : html->head
 data-gr-c-s-loaded="true" : body => [ data-gr-c-s-loaded = {true.} ] 
%%%%%%%%%%%%%%%%%%%%		body: true
Temp : body->0
 type="text/javascript" : script => [ type = {text/javascript.} ] 
%%%%%%%%%%%%%%%%%%%%		script: true
 Nada
/script <= body
Temp : body->script
 Nada
%%%%%%%%%%%%%%%%%%%%		noscript: true
Temp : noscript->0
 Nada
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
/div <= noscript
Temp : noscript->div
 Nada
/noscript <= body
Temp : body->noscript
 class="topNav" : div => [ class = {topNav.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 name="navbar.top" : a => [ name = {navbar.top.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= div
Temp : div->a
 class="skipNav" : div => [ class = {skipNav.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 href="#skip.navbar.top" title="Skip navigation links" : a => [ href = {#skip.navbar.top.} ] a => [ title = {Skip.navigation.links.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= div
Temp : div->a
 Nada
/div <= div
Temp : div->div
 name="navbar.top.firstrow" : a => [ name = {navbar.top.firstrow.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= div
Temp : div->a
 class="navList" title="Navigation" : ul => [ title = {Navigation.} ] ul => [ class = {navList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="../../overview-summary.html" : a => [ href = {../../overview-summary.html.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="package-summary.html" : a => [ href = {package-summary.html.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 class="navBarCell1Rev" : li => [ class = {navBarCell1Rev.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
/li <= ul
Temp : ul->li
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="class-use/HashMap.html" : a => [ href = {class-use/HashMap.html.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="package-tree.html" : a => [ href = {package-tree.html.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="../../deprecated-list.html" : a => [ href = {../../deprecated-list.html.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="../../index-files/index-1.html" : a => [ href = {../../index-files/index-1.html.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="../../help-doc.html" : a => [ href = {../../help-doc.html.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= div
Temp : div->ul
 class="aboutLanguage" : div => [ class = {aboutLanguage.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
%%%%%%%%%%%%%%%%%%%%		strong: true
Temp : strong->0
 Nada
%%%%%%%%%%%%%%%%%%%%		br: false
Temp : strong->br
 Nada
/strong <= div
Temp : div->strong
 Nada
/div <= div
Temp : div->div
 Nada
/div <= body
Temp : body->div
 class="subNav" : div => [ class = {subNav.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 class="navList" : ul => [ class = {navList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="../../java/util/GregorianCalendar.html" title="class in java.util" : a => [ href = {../../java/util/GregorianCalendar.html.} ] a => [ title = {class.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 class="typeNameLink" : span => [ class = {typeNameLink.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= a
Temp : a->span
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="../../java/util/HashSet.html" title="class in java.util" : a => [ href = {../../java/util/HashSet.html.} ] a => [ title = {class.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 class="typeNameLink" : span => [ class = {typeNameLink.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= a
Temp : a->span
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= div
Temp : div->ul
 class="navList" : ul => [ class = {navList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="../../index.html?java/util/HashMap.html" target="_top" : a => [ href = {../../index.html?java/util/HashMap.html.} ] a => [ target = {_top.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="HashMap.html" target="_top" : a => [ href = {HashMap.html.} ] a => [ target = {_top.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= div
Temp : div->ul
 class="navList" id="allclasses_navbar_top" style="display: block;" : ul => [ style = {display:.block;.} ] ul => [ id = {allclasses_navbar_top.} ] ul => [ class = {navList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="../../allclasses-noframe.html" : a => [ href = {../../allclasses-noframe.html.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= div
Temp : div->ul
 Nada
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 type="text/javascript" : script => [ type = {text/javascript.} ] 
%%%%%%%%%%%%%%%%%%%%		script: true
 Nada
/script <= div
Temp : div->script
 Nada
/div <= div
Temp : div->div
 Nada
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 class="subNavList" : ul => [ class = {subNavList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
/li <= ul
Temp : ul->li
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="#nested.classes.inherited.from.class.java.util.AbstractMap" : a => [ href = {#nested.classes.inherited.from.class.java.util.AbstractMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
/li <= ul
Temp : ul->li
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="#constructor.summary" : a => [ href = {#constructor.summary.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="#method.summary" : a => [ href = {#method.summary.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= div
Temp : div->ul
 class="subNavList" : ul => [ class = {subNavList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
/li <= ul
Temp : ul->li
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
/li <= ul
Temp : ul->li
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="#constructor.detail" : a => [ href = {#constructor.detail.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="#method.detail" : a => [ href = {#method.detail.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= div
Temp : div->ul
 Nada
/div <= div
Temp : div->div
 name="skip.navbar.top" : a => [ name = {skip.navbar.top.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= div
Temp : div->a
 Nada
/div <= body
Temp : body->div
 class="header" : div => [ class = {header.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 class="subTitle" : div => [ class = {subTitle.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
/div <= div
Temp : div->div
 class="subTitle" : div => [ class = {subTitle.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
/div <= div
Temp : div->div
 title="Class HashMap" class="title" : h2 => [ title = {Class.HashMap.} ] h2 => [ class = {title.} ] 
%%%%%%%%%%%%%%%%%%%%		h2: true
Temp : h2->0
 Nada
/h2 <= div
Temp : div->h2
 Nada
/div <= body
Temp : body->div
 class="contentContainer" : div => [ class = {contentContainer.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 class="inheritance" : ul => [ class = {inheritance.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="../../java/lang/Object.html" title="class in java.lang" : a => [ href = {../../java/lang/Object.html.} ] a => [ title = {class.in.java.lang.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 class="inheritance" : ul => [ class = {inheritance.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="../../java/util/AbstractMap.html" title="class in java.util" : a => [ href = {../../java/util/AbstractMap.html.} ] a => [ title = {class.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 class="inheritance" : ul => [ class = {inheritance.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= div
Temp : div->ul
 class="description" : div => [ class = {description.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
%%%%%%%%%%%%%%%%%%%%		dl: true
Temp : dl->0
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="paramLabel" : span => [ class = {paramLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
/dl <= li
Temp : li->dl
 Nada
%%%%%%%%%%%%%%%%%%%%		dl: true
Temp : dl->0
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 href="../../java/io/Serializable.html" title="interface in java.io" : a => [ href = {../../java/io/Serializable.html.} ] a => [ title = {interface.in.java.io.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= dd
Temp : dd->a
 href="../../java/lang/Cloneable.html" title="interface in java.lang" : a => [ href = {../../java/lang/Cloneable.html.} ] a => [ title = {interface.in.java.lang.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= dd
Temp : dd->a
 href="../../java/util/Map.html" title="interface in java.util" : a => [ href = {../../java/util/Map.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= dd
Temp : dd->a
 Nada
/dd <= dl
Temp : dl->dd
 Nada
/dl <= li
Temp : li->dl
 Nada
%%%%%%%%%%%%%%%%%%%%		dl: true
Temp : dl->0
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 href="../../java/util/LinkedHashMap.html" title="class in java.util" : a => [ href = {../../java/util/LinkedHashMap.html.} ] a => [ title = {class.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= dd
Temp : dd->a
 href="../../javax/print/attribute/standard/PrinterStateReasons.html" title="class in javax.print.attribute.standard" : a => [ href = {../../javax/print/attribute/standard/PrinterStateReasons.html.} ] a => [ title = {class.in.javax.print.attribute.standard.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= dd
Temp : dd->a
 Nada
/dd <= dl
Temp : dl->dd
 Nada
/dl <= li
Temp : li->dl
 Nada
%%%%%%%%%%%%%%%%%%%%		hr: false
Temp : li->hr
 Nada
%%%%%%%%%%%%%%%%%%%%		br: false
Temp : li->br
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 class="typeNameLabel" : span => [ class = {typeNameLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= pre
Temp : pre->span
 href="../../java/util/AbstractMap.html" title="class in java.util" : a => [ href = {../../java/util/AbstractMap.html.} ] a => [ title = {class.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/Map.html" title="interface in java.util" : a => [ href = {../../java/util/Map.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/lang/Cloneable.html" title="interface in java.lang" : a => [ href = {../../java/lang/Cloneable.html.} ] a => [ title = {interface.in.java.lang.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/io/Serializable.html" title="interface in java.io" : a => [ href = {../../java/io/Serializable.html.} ] a => [ title = {interface.in.java.io.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 Nada
/pre <= li
Temp : li->pre
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		p: true
Temp : p->0
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= p
Temp : p->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= p
Temp : p->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= p
Temp : p->tt
 Nada
/p <= div
Temp : div->p
 Nada
%%%%%%%%%%%%%%%%%%%%		p: true
Temp : p->0
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= p
Temp : p->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		i: true
Temp : i->0
 Nada
/i <= p
Temp : p->i
 Nada
%%%%%%%%%%%%%%%%%%%%		i: true
Temp : i->0
 Nada
/i <= p
Temp : p->i
 Nada
%%%%%%%%%%%%%%%%%%%%		i: true
Temp : i->0
 Nada
/i <= p
Temp : p->i
 Nada
%%%%%%%%%%%%%%%%%%%%		i: true
Temp : i->0
 Nada
/i <= p
Temp : p->i
 Nada
%%%%%%%%%%%%%%%%%%%%		i: true
Temp : i->0
 Nada
/i <= p
Temp : p->i
 Nada
/p <= div
Temp : div->p
 Nada
%%%%%%%%%%%%%%%%%%%%		p: true
Temp : p->0
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= p
Temp : p->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= p
Temp : p->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= p
Temp : p->tt
 Nada
/p <= div
Temp : div->p
 Nada
%%%%%%%%%%%%%%%%%%%%		p: true
Temp : p->0
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= p
Temp : p->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= p
Temp : p->code
 href="../../java/lang/Comparable.html" title="interface in java.lang" : a => [ href = {../../java/lang/Comparable.html.} ] a => [ title = {interface.in.java.lang.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= a
Temp : a->code
 Nada
/a <= p
Temp : p->a
 Nada
/p <= div
Temp : div->p
 Nada
%%%%%%%%%%%%%%%%%%%%		p: true
Temp : p->0
 Nada
%%%%%%%%%%%%%%%%%%%%		strong: true
Temp : strong->0
 Nada
/strong <= p
Temp : p->strong
 Nada
%%%%%%%%%%%%%%%%%%%%		i: true
Temp : i->0
 Nada
/i <= p
Temp : p->i
 href="../../java/util/Collections.html#synchronizedMap-java.util.Map-" : a => [ href = {../../java/util/Collections.html#synchronizedMap-java.util.Map-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= a
Temp : a->code
 Nada
/a <= p
Temp : p->a
 Nada
/p <= div
Temp : div->p
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 Nada
/pre <= div
Temp : div->pre
 Nada
%%%%%%%%%%%%%%%%%%%%		p: true
Temp : p->0
 Nada
%%%%%%%%%%%%%%%%%%%%		i: true
Temp : i->0
 Nada
/i <= p
Temp : p->i
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= p
Temp : p->tt
 href="../../java/util/ConcurrentModificationException.html" title="class in java.util" : a => [ href = {../../java/util/ConcurrentModificationException.html.} ] a => [ title = {class.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= a
Temp : a->code
 Nada
/a <= p
Temp : p->a
 Nada
/p <= div
Temp : div->p
 Nada
%%%%%%%%%%%%%%%%%%%%		p: true
Temp : p->0
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= p
Temp : p->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		i: true
Temp : i->0
 Nada
/i <= p
Temp : p->i
 Nada
/p <= div
Temp : div->p
 Nada
%%%%%%%%%%%%%%%%%%%%		p: true
Temp : p->0
 href="../../../technotes/guides/collections/index.html" : a => [ href = {../../../technotes/guides/collections/index.html.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= p
Temp : p->a
 Nada
/p <= div
Temp : div->p
 Nada
/div <= li
Temp : li->div
 Nada
%%%%%%%%%%%%%%%%%%%%		dl: true
Temp : dl->0
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="simpleTagLabel" : span => [ class = {simpleTagLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="seeLabel" : span => [ class = {seeLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 href="../../java/lang/Object.html#hashCode--" : a => [ href = {../../java/lang/Object.html#hashCode--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= a
Temp : a->code
 Nada
/a <= dd
Temp : dd->a
 href="../../java/util/Collection.html" title="interface in java.util" : a => [ href = {../../java/util/Collection.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= a
Temp : a->code
 Nada
/a <= dd
Temp : dd->a
 href="../../java/util/Map.html" title="interface in java.util" : a => [ href = {../../java/util/Map.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= a
Temp : a->code
 Nada
/a <= dd
Temp : dd->a
 href="../../java/util/TreeMap.html" title="class in java.util" : a => [ href = {../../java/util/TreeMap.html.} ] a => [ title = {class.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= a
Temp : a->code
 Nada
/a <= dd
Temp : dd->a
 href="../../java/util/Hashtable.html" title="class in java.util" : a => [ href = {../../java/util/Hashtable.html.} ] a => [ title = {class.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= a
Temp : a->code
 Nada
/a <= dd
Temp : dd->a
 href="../../serialized-form.html#java.util.HashMap" : a => [ href = {../../serialized-form.html#java.util.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= dd
Temp : dd->a
 Nada
/dd <= dl
Temp : dl->dd
 Nada
/dl <= li
Temp : li->dl
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= div
Temp : div->ul
 Nada
/div <= div
Temp : div->div
 class="summary" : div => [ class = {summary.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 name="nested.class.summary" : a => [ name = {nested.class.summary.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
%%%%%%%%%%%%%%%%%%%%		h3: true
Temp : h3->0
 Nada
/h3 <= li
Temp : li->h3
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 name="nested.classes.inherited.from.class.java.util.AbstractMap" : a => [ name = {nested.classes.inherited.from.class.java.util.AbstractMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
%%%%%%%%%%%%%%%%%%%%		h3: true
Temp : h3->0
 href="../../java/util/AbstractMap.html" title="class in java.util" : a => [ href = {../../java/util/AbstractMap.html.} ] a => [ title = {class.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= h3
Temp : h3->a
 Nada
/h3 <= li
Temp : li->h3
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/AbstractMap.SimpleEntry.html" title="class in java.util" : a => [ href = {../../java/util/AbstractMap.SimpleEntry.html.} ] a => [ title = {class.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/AbstractMap.SimpleEntry.html" title="type parameter in AbstractMap.SimpleEntry" : a => [ href = {../../java/util/AbstractMap.SimpleEntry.html.} ] a => [ title = {type.parameter.in.AbstractMap.SimpleEntry.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/AbstractMap.SimpleEntry.html" title="type parameter in AbstractMap.SimpleEntry" : a => [ href = {../../java/util/AbstractMap.SimpleEntry.html.} ] a => [ title = {type.parameter.in.AbstractMap.SimpleEntry.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/AbstractMap.SimpleImmutableEntry.html" title="class in java.util" : a => [ href = {../../java/util/AbstractMap.SimpleImmutableEntry.html.} ] a => [ title = {class.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/AbstractMap.SimpleImmutableEntry.html" title="type parameter in AbstractMap.SimpleImmutableEntry" : a => [ href = {../../java/util/AbstractMap.SimpleImmutableEntry.html.} ] a => [ title = {type.parameter.in.AbstractMap.SimpleImmutableEntry.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/AbstractMap.SimpleImmutableEntry.html" title="type parameter in AbstractMap.SimpleImmutableEntry" : a => [ href = {../../java/util/AbstractMap.SimpleImmutableEntry.html.} ] a => [ title = {type.parameter.in.AbstractMap.SimpleImmutableEntry.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= li
Temp : li->code
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 name="nested.classes.inherited.from.class.java.util.Map" : a => [ name = {nested.classes.inherited.from.class.java.util.Map.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
%%%%%%%%%%%%%%%%%%%%		h3: true
Temp : h3->0
 href="../../java/util/Map.html" title="interface in java.util" : a => [ href = {../../java/util/Map.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= h3
Temp : h3->a
 Nada
/h3 <= li
Temp : li->h3
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.Entry.html" title="interface in java.util" : a => [ href = {../../java/util/Map.Entry.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/Map.Entry.html" title="type parameter in Map.Entry" : a => [ href = {../../java/util/Map.Entry.html.} ] a => [ title = {type.parameter.in.Map.Entry.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/Map.Entry.html" title="type parameter in Map.Entry" : a => [ href = {../../java/util/Map.Entry.html.} ] a => [ title = {type.parameter.in.Map.Entry.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= li
Temp : li->code
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 name="constructor.summary" : a => [ name = {constructor.summary.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
%%%%%%%%%%%%%%%%%%%%		h3: true
Temp : h3->0
 Nada
/h3 <= li
Temp : li->h3
 class="memberSummary" summary="Constructor Summary table, listing constructors, and an explanation" cellspacing="0" cellpadding="3" border="0" : table => [ summary = {Constructor.Summary.table,.listing.constructors,.and.an.explanation.} ] table => [ border = {0.} ] table => [ cellpadding = {3.} ] table => [ cellspacing = {0.} ] table => [ class = {memberSummary.} ] 
%%%%%%%%%%%%%%%%%%%%		table: true
Temp : table->0
 Nada
%%%%%%%%%%%%%%%%%%%%		caption: true
Temp : caption->0
 Nada
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= caption
Temp : caption->span
 class="tabEnd" : span => [ class = {tabEnd.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= caption
Temp : caption->span
 Nada
/caption <= table
Temp : table->caption
 Nada
%%%%%%%%%%%%%%%%%%%%		tbody: true
Temp : tbody->0
 Nada
%%%%%%%%%%%%%%%%%%%%		tr: true
Temp : tr->0
 class="colOne" scope="col" : th => [ scope = {col.} ] th => [ class = {colOne.} ] 
%%%%%%%%%%%%%%%%%%%%		th: true
Temp : th->0
 Nada
/th <= tr
Temp : tr->th
 Nada
/tr <= tbody
Temp : tbody->tr
 class="altColor" : tr => [ class = {altColor.} ] 
%%%%%%%%%%%%%%%%%%%%		tr: true
Temp : tr->0
 class="colOne" : td => [ class = {colOne.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 class="memberNameLink" : span => [ class = {memberNameLink.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 href="../../java/util/HashMap.html#HashMap--" : a => [ href = {../../java/util/HashMap.html#HashMap--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= span
Temp : span->a
 Nada
/span <= code
Temp : code->span
 Nada
/code <= td
Temp : td->code
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
/div <= td
Temp : td->div
 Nada
/td <= tr
Temp : tr->td
 Nada
/tr <= tbody
Temp : tbody->tr
 class="rowColor" : tr => [ class = {rowColor.} ] 
%%%%%%%%%%%%%%%%%%%%		tr: true
Temp : tr->0
 class="colOne" : td => [ class = {colOne.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 class="memberNameLink" : span => [ class = {memberNameLink.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 href="../../java/util/HashMap.html#HashMap-int-" : a => [ href = {../../java/util/HashMap.html#HashMap-int-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= span
Temp : span->a
 Nada
/span <= code
Temp : code->span
 Nada
/code <= td
Temp : td->code
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
/div <= td
Temp : td->div
 Nada
/td <= tr
Temp : tr->td
 Nada
/tr <= tbody
Temp : tbody->tr
 class="altColor" : tr => [ class = {altColor.} ] 
%%%%%%%%%%%%%%%%%%%%		tr: true
Temp : tr->0
 class="colOne" : td => [ class = {colOne.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 class="memberNameLink" : span => [ class = {memberNameLink.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 href="../../java/util/HashMap.html#HashMap-int-float-" : a => [ href = {../../java/util/HashMap.html#HashMap-int-float-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= span
Temp : span->a
 Nada
/span <= code
Temp : code->span
 Nada
/code <= td
Temp : td->code
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
/div <= td
Temp : td->div
 Nada
/td <= tr
Temp : tr->td
 Nada
/tr <= tbody
Temp : tbody->tr
 class="rowColor" : tr => [ class = {rowColor.} ] 
%%%%%%%%%%%%%%%%%%%%		tr: true
Temp : tr->0
 class="colOne" : td => [ class = {colOne.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 class="memberNameLink" : span => [ class = {memberNameLink.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 href="../../java/util/HashMap.html#HashMap-java.util.Map-" : a => [ href = {../../java/util/HashMap.html#HashMap-java.util.Map-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= span
Temp : span->a
 Nada
/span <= code
Temp : code->span
 href="../../java/util/Map.html" title="interface in java.util" : a => [ href = {../../java/util/Map.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= td
Temp : td->code
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
/div <= td
Temp : td->div
 Nada
/td <= tr
Temp : tr->td
 Nada
/tr <= tbody
Temp : tbody->tr
 Nada
/tbody <= table
Temp : table->tbody
 Nada
/table <= li
Temp : li->table
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 name="method.summary" : a => [ name = {method.summary.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
%%%%%%%%%%%%%%%%%%%%		h3: true
Temp : h3->0
 Nada
/h3 <= li
Temp : li->h3
 class="memberSummary" summary="Method Summary table, listing methods, and an explanation" cellspacing="0" cellpadding="3" border="0" : table => [ summary = {Method.Summary.table,.listing.methods,.and.an.explanation.} ] table => [ border = {0.} ] table => [ cellpadding = {3.} ] table => [ cellspacing = {0.} ] table => [ class = {memberSummary.} ] 
%%%%%%%%%%%%%%%%%%%%		table: true
Temp : table->0
 Nada
%%%%%%%%%%%%%%%%%%%%		caption: true
Temp : caption->0
 id="t0" class="activeTableTab" : span => [ id = {t0.} ] span => [ class = {activeTableTab.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= span
Temp : span->span
 class="tabEnd" : span => [ class = {tabEnd.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= span
Temp : span->span
 Nada
/span <= caption
Temp : caption->span
 id="t2" class="tableTab" : span => [ id = {t2.} ] span => [ class = {tableTab.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 href="javascript:show(2);" : a => [ href = {javascript:show(2);.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= span
Temp : span->a
 Nada
/span <= span
Temp : span->span
 class="tabEnd" : span => [ class = {tabEnd.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= span
Temp : span->span
 Nada
/span <= caption
Temp : caption->span
 id="t4" class="tableTab" : span => [ id = {t4.} ] span => [ class = {tableTab.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 href="javascript:show(8);" : a => [ href = {javascript:show(8);.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= span
Temp : span->a
 Nada
/span <= span
Temp : span->span
 class="tabEnd" : span => [ class = {tabEnd.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= span
Temp : span->span
 Nada
/span <= caption
Temp : caption->span
 Nada
/caption <= table
Temp : table->caption
 Nada
%%%%%%%%%%%%%%%%%%%%		tbody: true
Temp : tbody->0
 Nada
%%%%%%%%%%%%%%%%%%%%		tr: true
Temp : tr->0
 class="colFirst" scope="col" : th => [ scope = {col.} ] th => [ class = {colFirst.} ] 
%%%%%%%%%%%%%%%%%%%%		th: true
Temp : th->0
 Nada
/th <= tr
Temp : tr->th
 class="colLast" scope="col" : th => [ scope = {col.} ] th => [ class = {colLast.} ] 
%%%%%%%%%%%%%%%%%%%%		th: true
Temp : th->0
 Nada
/th <= tr
Temp : tr->th
 Nada
/tr <= tbody
Temp : tbody->tr
 id="i0" class="altColor" : tr => [ id = {i0.} ] tr => [ class = {altColor.} ] 
%%%%%%%%%%%%%%%%%%%%		tr: true
Temp : tr->0
 class="colFirst" : td => [ class = {colFirst.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= td
Temp : td->code
 Nada
/td <= tr
Temp : tr->td
 class="colLast" : td => [ class = {colLast.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 class="memberNameLink" : span => [ class = {memberNameLink.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 href="../../java/util/HashMap.html#clear--" : a => [ href = {../../java/util/HashMap.html#clear--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= span
Temp : span->a
 Nada
/span <= code
Temp : code->span
 Nada
/code <= td
Temp : td->code
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
/div <= td
Temp : td->div
 Nada
/td <= tr
Temp : tr->td
 Nada
/tr <= tbody
Temp : tbody->tr
 id="i1" class="rowColor" : tr => [ id = {i1.} ] tr => [ class = {rowColor.} ] 
%%%%%%%%%%%%%%%%%%%%		tr: true
Temp : tr->0
 class="colFirst" : td => [ class = {colFirst.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/lang/Object.html" title="class in java.lang" : a => [ href = {../../java/lang/Object.html.} ] a => [ title = {class.in.java.lang.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= td
Temp : td->code
 Nada
/td <= tr
Temp : tr->td
 class="colLast" : td => [ class = {colLast.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 class="memberNameLink" : span => [ class = {memberNameLink.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 href="../../java/util/HashMap.html#clone--" : a => [ href = {../../java/util/HashMap.html#clone--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= span
Temp : span->a
 Nada
/span <= code
Temp : code->span
 Nada
/code <= td
Temp : td->code
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
/div <= td
Temp : td->div
 Nada
/td <= tr
Temp : tr->td
 Nada
/tr <= tbody
Temp : tbody->tr
 id="i2" class="altColor" : tr => [ id = {i2.} ] tr => [ class = {altColor.} ] 
%%%%%%%%%%%%%%%%%%%%		tr: true
Temp : tr->0
 class="colFirst" : td => [ class = {colFirst.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= td
Temp : td->code
 Nada
/td <= tr
Temp : tr->td
 class="colLast" : td => [ class = {colLast.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 class="memberNameLink" : span => [ class = {memberNameLink.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 href="../../java/util/HashMap.html#compute-K-java.util.function.BiFunction-" : a => [ href = {../../java/util/HashMap.html#compute-K-java.util.function.BiFunction-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= span
Temp : span->a
 Nada
/span <= code
Temp : code->span
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/function/BiFunction.html" title="interface in java.util.function" : a => [ href = {../../java/util/function/BiFunction.html.} ] a => [ title = {interface.in.java.util.function.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= td
Temp : td->code
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= div
Temp : div->code
 Nada
/div <= td
Temp : td->div
 Nada
/td <= tr
Temp : tr->td
 Nada
/tr <= tbody
Temp : tbody->tr
 id="i3" class="rowColor" : tr => [ id = {i3.} ] tr => [ class = {rowColor.} ] 
%%%%%%%%%%%%%%%%%%%%		tr: true
Temp : tr->0
 class="colFirst" : td => [ class = {colFirst.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= td
Temp : td->code
 Nada
/td <= tr
Temp : tr->td
 class="colLast" : td => [ class = {colLast.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 class="memberNameLink" : span => [ class = {memberNameLink.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 href="../../java/util/HashMap.html#computeIfAbsent-K-java.util.function.Function-" : a => [ href = {../../java/util/HashMap.html#computeIfAbsent-K-java.util.function.Function-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= span
Temp : span->a
 Nada
/span <= code
Temp : code->span
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/function/Function.html" title="interface in java.util.function" : a => [ href = {../../java/util/function/Function.html.} ] a => [ title = {interface.in.java.util.function.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= td
Temp : td->code
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= div
Temp : div->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= div
Temp : div->code
 Nada
/div <= td
Temp : td->div
 Nada
/td <= tr
Temp : tr->td
 Nada
/tr <= tbody
Temp : tbody->tr
 id="i4" class="altColor" : tr => [ id = {i4.} ] tr => [ class = {altColor.} ] 
%%%%%%%%%%%%%%%%%%%%		tr: true
Temp : tr->0
 class="colFirst" : td => [ class = {colFirst.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= td
Temp : td->code
 Nada
/td <= tr
Temp : tr->td
 class="colLast" : td => [ class = {colLast.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 class="memberNameLink" : span => [ class = {memberNameLink.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 href="../../java/util/HashMap.html#computeIfPresent-K-java.util.function.BiFunction-" : a => [ href = {../../java/util/HashMap.html#computeIfPresent-K-java.util.function.BiFunction-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= span
Temp : span->a
 Nada
/span <= code
Temp : code->span
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/function/BiFunction.html" title="interface in java.util.function" : a => [ href = {../../java/util/function/BiFunction.html.} ] a => [ title = {interface.in.java.util.function.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= td
Temp : td->code
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
/div <= td
Temp : td->div
 Nada
/td <= tr
Temp : tr->td
 Nada
/tr <= tbody
Temp : tbody->tr
 id="i5" class="rowColor" : tr => [ id = {i5.} ] tr => [ class = {rowColor.} ] 
%%%%%%%%%%%%%%%%%%%%		tr: true
Temp : tr->0
 class="colFirst" : td => [ class = {colFirst.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= td
Temp : td->code
 Nada
/td <= tr
Temp : tr->td
 class="colLast" : td => [ class = {colLast.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 class="memberNameLink" : span => [ class = {memberNameLink.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 href="../../java/util/HashMap.html#containsKey-java.lang.Object-" : a => [ href = {../../java/util/HashMap.html#containsKey-java.lang.Object-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= span
Temp : span->a
 Nada
/span <= code
Temp : code->span
 href="../../java/lang/Object.html" title="class in java.lang" : a => [ href = {../../java/lang/Object.html.} ] a => [ title = {class.in.java.lang.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= td
Temp : td->code
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
/div <= td
Temp : td->div
 Nada
/td <= tr
Temp : tr->td
 Nada
/tr <= tbody
Temp : tbody->tr
 id="i6" class="altColor" : tr => [ id = {i6.} ] tr => [ class = {altColor.} ] 
%%%%%%%%%%%%%%%%%%%%		tr: true
Temp : tr->0
 class="colFirst" : td => [ class = {colFirst.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= td
Temp : td->code
 Nada
/td <= tr
Temp : tr->td
 class="colLast" : td => [ class = {colLast.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 class="memberNameLink" : span => [ class = {memberNameLink.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 href="../../java/util/HashMap.html#containsValue-java.lang.Object-" : a => [ href = {../../java/util/HashMap.html#containsValue-java.lang.Object-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= span
Temp : span->a
 Nada
/span <= code
Temp : code->span
 href="../../java/lang/Object.html" title="class in java.lang" : a => [ href = {../../java/lang/Object.html.} ] a => [ title = {class.in.java.lang.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= td
Temp : td->code
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
/div <= td
Temp : td->div
 Nada
/td <= tr
Temp : tr->td
 Nada
/tr <= tbody
Temp : tbody->tr
 id="i7" class="rowColor" : tr => [ id = {i7.} ] tr => [ class = {rowColor.} ] 
%%%%%%%%%%%%%%%%%%%%		tr: true
Temp : tr->0
 class="colFirst" : td => [ class = {colFirst.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Set.html" title="interface in java.util" : a => [ href = {../../java/util/Set.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/Map.Entry.html" title="interface in java.util" : a => [ href = {../../java/util/Map.Entry.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= td
Temp : td->code
 Nada
/td <= tr
Temp : tr->td
 class="colLast" : td => [ class = {colLast.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 class="memberNameLink" : span => [ class = {memberNameLink.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 href="../../java/util/HashMap.html#entrySet--" : a => [ href = {../../java/util/HashMap.html#entrySet--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= span
Temp : span->a
 Nada
/span <= code
Temp : code->span
 Nada
/code <= td
Temp : td->code
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 href="../../java/util/Set.html" title="interface in java.util" : a => [ href = {../../java/util/Set.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= a
Temp : a->code
 Nada
/a <= div
Temp : div->a
 Nada
/div <= td
Temp : td->div
 Nada
/td <= tr
Temp : tr->td
 Nada
/tr <= tbody
Temp : tbody->tr
 id="i8" class="altColor" : tr => [ id = {i8.} ] tr => [ class = {altColor.} ] 
%%%%%%%%%%%%%%%%%%%%		tr: true
Temp : tr->0
 class="colFirst" : td => [ class = {colFirst.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= td
Temp : td->code
 Nada
/td <= tr
Temp : tr->td
 class="colLast" : td => [ class = {colLast.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 class="memberNameLink" : span => [ class = {memberNameLink.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 href="../../java/util/HashMap.html#forEach-java.util.function.BiConsumer-" : a => [ href = {../../java/util/HashMap.html#forEach-java.util.function.BiConsumer-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= span
Temp : span->a
 Nada
/span <= code
Temp : code->span
 href="../../java/util/function/BiConsumer.html" title="interface in java.util.function" : a => [ href = {../../java/util/function/BiConsumer.html.} ] a => [ title = {interface.in.java.util.function.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= td
Temp : td->code
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
/div <= td
Temp : td->div
 Nada
/td <= tr
Temp : tr->td
 Nada
/tr <= tbody
Temp : tbody->tr
 id="i9" class="rowColor" : tr => [ id = {i9.} ] tr => [ class = {rowColor.} ] 
%%%%%%%%%%%%%%%%%%%%		tr: true
Temp : tr->0
 class="colFirst" : td => [ class = {colFirst.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= td
Temp : td->code
 Nada
/td <= tr
Temp : tr->td
 class="colLast" : td => [ class = {colLast.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 class="memberNameLink" : span => [ class = {memberNameLink.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 href="../../java/util/HashMap.html#get-java.lang.Object-" : a => [ href = {../../java/util/HashMap.html#get-java.lang.Object-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= span
Temp : span->a
 Nada
/span <= code
Temp : code->span
 href="../../java/lang/Object.html" title="class in java.lang" : a => [ href = {../../java/lang/Object.html.} ] a => [ title = {class.in.java.lang.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= td
Temp : td->code
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= div
Temp : div->code
 Nada
/div <= td
Temp : td->div
 Nada
/td <= tr
Temp : tr->td
 Nada
/tr <= tbody
Temp : tbody->tr
 id="i10" class="altColor" : tr => [ id = {i10.} ] tr => [ class = {altColor.} ] 
%%%%%%%%%%%%%%%%%%%%		tr: true
Temp : tr->0
 class="colFirst" : td => [ class = {colFirst.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= td
Temp : td->code
 Nada
/td <= tr
Temp : tr->td
 class="colLast" : td => [ class = {colLast.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 class="memberNameLink" : span => [ class = {memberNameLink.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 href="../../java/util/HashMap.html#getOrDefault-java.lang.Object-V-" : a => [ href = {../../java/util/HashMap.html#getOrDefault-java.lang.Object-V-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= span
Temp : span->a
 Nada
/span <= code
Temp : code->span
 href="../../java/lang/Object.html" title="class in java.lang" : a => [ href = {../../java/lang/Object.html.} ] a => [ title = {class.in.java.lang.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= td
Temp : td->code
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= div
Temp : div->code
 Nada
/div <= td
Temp : td->div
 Nada
/td <= tr
Temp : tr->td
 Nada
/tr <= tbody
Temp : tbody->tr
 id="i11" class="rowColor" : tr => [ id = {i11.} ] tr => [ class = {rowColor.} ] 
%%%%%%%%%%%%%%%%%%%%		tr: true
Temp : tr->0
 class="colFirst" : td => [ class = {colFirst.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= td
Temp : td->code
 Nada
/td <= tr
Temp : tr->td
 class="colLast" : td => [ class = {colLast.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 class="memberNameLink" : span => [ class = {memberNameLink.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 href="../../java/util/HashMap.html#isEmpty--" : a => [ href = {../../java/util/HashMap.html#isEmpty--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= span
Temp : span->a
 Nada
/span <= code
Temp : code->span
 Nada
/code <= td
Temp : td->code
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
/div <= td
Temp : td->div
 Nada
/td <= tr
Temp : tr->td
 Nada
/tr <= tbody
Temp : tbody->tr
 id="i12" class="altColor" : tr => [ id = {i12.} ] tr => [ class = {altColor.} ] 
%%%%%%%%%%%%%%%%%%%%		tr: true
Temp : tr->0
 class="colFirst" : td => [ class = {colFirst.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Set.html" title="interface in java.util" : a => [ href = {../../java/util/Set.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= td
Temp : td->code
 Nada
/td <= tr
Temp : tr->td
 class="colLast" : td => [ class = {colLast.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 class="memberNameLink" : span => [ class = {memberNameLink.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 href="../../java/util/HashMap.html#keySet--" : a => [ href = {../../java/util/HashMap.html#keySet--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= span
Temp : span->a
 Nada
/span <= code
Temp : code->span
 Nada
/code <= td
Temp : td->code
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 href="../../java/util/Set.html" title="interface in java.util" : a => [ href = {../../java/util/Set.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= a
Temp : a->code
 Nada
/a <= div
Temp : div->a
 Nada
/div <= td
Temp : td->div
 Nada
/td <= tr
Temp : tr->td
 Nada
/tr <= tbody
Temp : tbody->tr
 id="i13" class="rowColor" : tr => [ id = {i13.} ] tr => [ class = {rowColor.} ] 
%%%%%%%%%%%%%%%%%%%%		tr: true
Temp : tr->0
 class="colFirst" : td => [ class = {colFirst.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= td
Temp : td->code
 Nada
/td <= tr
Temp : tr->td
 class="colLast" : td => [ class = {colLast.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 class="memberNameLink" : span => [ class = {memberNameLink.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 href="../../java/util/HashMap.html#merge-K-V-java.util.function.BiFunction-" : a => [ href = {../../java/util/HashMap.html#merge-K-V-java.util.function.BiFunction-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= span
Temp : span->a
 Nada
/span <= code
Temp : code->span
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/function/BiFunction.html" title="interface in java.util.function" : a => [ href = {../../java/util/function/BiFunction.html.} ] a => [ title = {interface.in.java.util.function.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= td
Temp : td->code
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
/div <= td
Temp : td->div
 Nada
/td <= tr
Temp : tr->td
 Nada
/tr <= tbody
Temp : tbody->tr
 id="i14" class="altColor" : tr => [ id = {i14.} ] tr => [ class = {altColor.} ] 
%%%%%%%%%%%%%%%%%%%%		tr: true
Temp : tr->0
 class="colFirst" : td => [ class = {colFirst.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= td
Temp : td->code
 Nada
/td <= tr
Temp : tr->td
 class="colLast" : td => [ class = {colLast.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 class="memberNameLink" : span => [ class = {memberNameLink.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 href="../../java/util/HashMap.html#put-K-V-" : a => [ href = {../../java/util/HashMap.html#put-K-V-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= span
Temp : span->a
 Nada
/span <= code
Temp : code->span
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= td
Temp : td->code
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
/div <= td
Temp : td->div
 Nada
/td <= tr
Temp : tr->td
 Nada
/tr <= tbody
Temp : tbody->tr
 id="i15" class="rowColor" : tr => [ id = {i15.} ] tr => [ class = {rowColor.} ] 
%%%%%%%%%%%%%%%%%%%%		tr: true
Temp : tr->0
 class="colFirst" : td => [ class = {colFirst.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= td
Temp : td->code
 Nada
/td <= tr
Temp : tr->td
 class="colLast" : td => [ class = {colLast.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 class="memberNameLink" : span => [ class = {memberNameLink.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 href="../../java/util/HashMap.html#putAll-java.util.Map-" : a => [ href = {../../java/util/HashMap.html#putAll-java.util.Map-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= span
Temp : span->a
 Nada
/span <= code
Temp : code->span
 href="../../java/util/Map.html" title="interface in java.util" : a => [ href = {../../java/util/Map.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= td
Temp : td->code
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
/div <= td
Temp : td->div
 Nada
/td <= tr
Temp : tr->td
 Nada
/tr <= tbody
Temp : tbody->tr
 id="i16" class="altColor" : tr => [ id = {i16.} ] tr => [ class = {altColor.} ] 
%%%%%%%%%%%%%%%%%%%%		tr: true
Temp : tr->0
 class="colFirst" : td => [ class = {colFirst.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= td
Temp : td->code
 Nada
/td <= tr
Temp : tr->td
 class="colLast" : td => [ class = {colLast.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 class="memberNameLink" : span => [ class = {memberNameLink.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 href="../../java/util/HashMap.html#putIfAbsent-K-V-" : a => [ href = {../../java/util/HashMap.html#putIfAbsent-K-V-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= span
Temp : span->a
 Nada
/span <= code
Temp : code->span
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= td
Temp : td->code
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= div
Temp : div->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= div
Temp : div->code
 Nada
/div <= td
Temp : td->div
 Nada
/td <= tr
Temp : tr->td
 Nada
/tr <= tbody
Temp : tbody->tr
 id="i17" class="rowColor" : tr => [ id = {i17.} ] tr => [ class = {rowColor.} ] 
%%%%%%%%%%%%%%%%%%%%		tr: true
Temp : tr->0
 class="colFirst" : td => [ class = {colFirst.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= td
Temp : td->code
 Nada
/td <= tr
Temp : tr->td
 class="colLast" : td => [ class = {colLast.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 class="memberNameLink" : span => [ class = {memberNameLink.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 href="../../java/util/HashMap.html#remove-java.lang.Object-" : a => [ href = {../../java/util/HashMap.html#remove-java.lang.Object-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= span
Temp : span->a
 Nada
/span <= code
Temp : code->span
 href="../../java/lang/Object.html" title="class in java.lang" : a => [ href = {../../java/lang/Object.html.} ] a => [ title = {class.in.java.lang.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= td
Temp : td->code
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
/div <= td
Temp : td->div
 Nada
/td <= tr
Temp : tr->td
 Nada
/tr <= tbody
Temp : tbody->tr
 id="i18" class="altColor" : tr => [ id = {i18.} ] tr => [ class = {altColor.} ] 
%%%%%%%%%%%%%%%%%%%%		tr: true
Temp : tr->0
 class="colFirst" : td => [ class = {colFirst.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= td
Temp : td->code
 Nada
/td <= tr
Temp : tr->td
 class="colLast" : td => [ class = {colLast.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 class="memberNameLink" : span => [ class = {memberNameLink.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 href="../../java/util/HashMap.html#remove-java.lang.Object-java.lang.Object-" : a => [ href = {../../java/util/HashMap.html#remove-java.lang.Object-java.lang.Object-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= span
Temp : span->a
 Nada
/span <= code
Temp : code->span
 href="../../java/lang/Object.html" title="class in java.lang" : a => [ href = {../../java/lang/Object.html.} ] a => [ title = {class.in.java.lang.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/lang/Object.html" title="class in java.lang" : a => [ href = {../../java/lang/Object.html.} ] a => [ title = {class.in.java.lang.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= td
Temp : td->code
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
/div <= td
Temp : td->div
 Nada
/td <= tr
Temp : tr->td
 Nada
/tr <= tbody
Temp : tbody->tr
 id="i19" class="rowColor" : tr => [ id = {i19.} ] tr => [ class = {rowColor.} ] 
%%%%%%%%%%%%%%%%%%%%		tr: true
Temp : tr->0
 class="colFirst" : td => [ class = {colFirst.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= td
Temp : td->code
 Nada
/td <= tr
Temp : tr->td
 class="colLast" : td => [ class = {colLast.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 class="memberNameLink" : span => [ class = {memberNameLink.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 href="../../java/util/HashMap.html#replace-K-V-" : a => [ href = {../../java/util/HashMap.html#replace-K-V-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= span
Temp : span->a
 Nada
/span <= code
Temp : code->span
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= td
Temp : td->code
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
/div <= td
Temp : td->div
 Nada
/td <= tr
Temp : tr->td
 Nada
/tr <= tbody
Temp : tbody->tr
 id="i20" class="altColor" : tr => [ id = {i20.} ] tr => [ class = {altColor.} ] 
%%%%%%%%%%%%%%%%%%%%		tr: true
Temp : tr->0
 class="colFirst" : td => [ class = {colFirst.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= td
Temp : td->code
 Nada
/td <= tr
Temp : tr->td
 class="colLast" : td => [ class = {colLast.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 class="memberNameLink" : span => [ class = {memberNameLink.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 href="../../java/util/HashMap.html#replace-K-V-V-" : a => [ href = {../../java/util/HashMap.html#replace-K-V-V-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= span
Temp : span->a
 Nada
/span <= code
Temp : code->span
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= td
Temp : td->code
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
/div <= td
Temp : td->div
 Nada
/td <= tr
Temp : tr->td
 Nada
/tr <= tbody
Temp : tbody->tr
 id="i21" class="rowColor" : tr => [ id = {i21.} ] tr => [ class = {rowColor.} ] 
%%%%%%%%%%%%%%%%%%%%		tr: true
Temp : tr->0
 class="colFirst" : td => [ class = {colFirst.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= td
Temp : td->code
 Nada
/td <= tr
Temp : tr->td
 class="colLast" : td => [ class = {colLast.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 class="memberNameLink" : span => [ class = {memberNameLink.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 href="../../java/util/HashMap.html#replaceAll-java.util.function.BiFunction-" : a => [ href = {../../java/util/HashMap.html#replaceAll-java.util.function.BiFunction-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= span
Temp : span->a
 Nada
/span <= code
Temp : code->span
 href="../../java/util/function/BiFunction.html" title="interface in java.util.function" : a => [ href = {../../java/util/function/BiFunction.html.} ] a => [ title = {interface.in.java.util.function.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= td
Temp : td->code
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
/div <= td
Temp : td->div
 Nada
/td <= tr
Temp : tr->td
 Nada
/tr <= tbody
Temp : tbody->tr
 id="i22" class="altColor" : tr => [ id = {i22.} ] tr => [ class = {altColor.} ] 
%%%%%%%%%%%%%%%%%%%%		tr: true
Temp : tr->0
 class="colFirst" : td => [ class = {colFirst.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= td
Temp : td->code
 Nada
/td <= tr
Temp : tr->td
 class="colLast" : td => [ class = {colLast.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 class="memberNameLink" : span => [ class = {memberNameLink.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 href="../../java/util/HashMap.html#size--" : a => [ href = {../../java/util/HashMap.html#size--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= span
Temp : span->a
 Nada
/span <= code
Temp : code->span
 Nada
/code <= td
Temp : td->code
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
/div <= td
Temp : td->div
 Nada
/td <= tr
Temp : tr->td
 Nada
/tr <= tbody
Temp : tbody->tr
 id="i23" class="rowColor" : tr => [ id = {i23.} ] tr => [ class = {rowColor.} ] 
%%%%%%%%%%%%%%%%%%%%		tr: true
Temp : tr->0
 class="colFirst" : td => [ class = {colFirst.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Collection.html" title="interface in java.util" : a => [ href = {../../java/util/Collection.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= td
Temp : td->code
 Nada
/td <= tr
Temp : tr->td
 class="colLast" : td => [ class = {colLast.} ] 
%%%%%%%%%%%%%%%%%%%%		td: true
Temp : td->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 class="memberNameLink" : span => [ class = {memberNameLink.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 href="../../java/util/HashMap.html#values--" : a => [ href = {../../java/util/HashMap.html#values--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= span
Temp : span->a
 Nada
/span <= code
Temp : code->span
 Nada
/code <= td
Temp : td->code
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 href="../../java/util/Collection.html" title="interface in java.util" : a => [ href = {../../java/util/Collection.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= a
Temp : a->code
 Nada
/a <= div
Temp : div->a
 Nada
/div <= td
Temp : td->div
 Nada
/td <= tr
Temp : tr->td
 Nada
/tr <= tbody
Temp : tbody->tr
 Nada
/tbody <= table
Temp : table->tbody
 Nada
/table <= li
Temp : li->table
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 name="methods.inherited.from.class.java.util.AbstractMap" : a => [ name = {methods.inherited.from.class.java.util.AbstractMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
%%%%%%%%%%%%%%%%%%%%		h3: true
Temp : h3->0
 href="../../java/util/AbstractMap.html" title="class in java.util" : a => [ href = {../../java/util/AbstractMap.html.} ] a => [ title = {class.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= h3
Temp : h3->a
 Nada
/h3 <= li
Temp : li->h3
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/AbstractMap.html#equals-java.lang.Object-" : a => [ href = {../../java/util/AbstractMap.html#equals-java.lang.Object-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/AbstractMap.html#hashCode--" : a => [ href = {../../java/util/AbstractMap.html#hashCode--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/AbstractMap.html#toString--" : a => [ href = {../../java/util/AbstractMap.html#toString--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= li
Temp : li->code
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 name="methods.inherited.from.class.java.lang.Object" : a => [ name = {methods.inherited.from.class.java.lang.Object.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
%%%%%%%%%%%%%%%%%%%%		h3: true
Temp : h3->0
 href="../../java/lang/Object.html" title="class in java.lang" : a => [ href = {../../java/lang/Object.html.} ] a => [ title = {class.in.java.lang.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= h3
Temp : h3->a
 Nada
/h3 <= li
Temp : li->h3
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/lang/Object.html#finalize--" : a => [ href = {../../java/lang/Object.html#finalize--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/lang/Object.html#getClass--" : a => [ href = {../../java/lang/Object.html#getClass--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/lang/Object.html#notify--" : a => [ href = {../../java/lang/Object.html#notify--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/lang/Object.html#notifyAll--" : a => [ href = {../../java/lang/Object.html#notifyAll--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/lang/Object.html#wait--" : a => [ href = {../../java/lang/Object.html#wait--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/lang/Object.html#wait-long-" : a => [ href = {../../java/lang/Object.html#wait-long-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/lang/Object.html#wait-long-int-" : a => [ href = {../../java/lang/Object.html#wait-long-int-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= li
Temp : li->code
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 name="methods.inherited.from.class.java.util.Map" : a => [ name = {methods.inherited.from.class.java.util.Map.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
%%%%%%%%%%%%%%%%%%%%		h3: true
Temp : h3->0
 href="../../java/util/Map.html" title="interface in java.util" : a => [ href = {../../java/util/Map.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= h3
Temp : h3->a
 Nada
/h3 <= li
Temp : li->h3
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#equals-java.lang.Object-" : a => [ href = {../../java/util/Map.html#equals-java.lang.Object-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/Map.html#hashCode--" : a => [ href = {../../java/util/Map.html#hashCode--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= li
Temp : li->code
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= div
Temp : div->ul
 Nada
/div <= div
Temp : div->div
 class="details" : div => [ class = {details.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 name="constructor.detail" : a => [ name = {constructor.detail.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
%%%%%%%%%%%%%%%%%%%%		h3: true
Temp : h3->0
 Nada
/h3 <= li
Temp : li->h3
 name="HashMap-int-float-" : a => [ name = {HashMap-int-float-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
%%%%%%%%%%%%%%%%%%%%		h4: true
Temp : h4->0
 Nada
/h4 <= li
Temp : li->h4
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 Nada
/pre <= li
Temp : li->pre
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
/div <= li
Temp : li->div
 Nada
%%%%%%%%%%%%%%%%%%%%		dl: true
Temp : dl->0
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="paramLabel" : span => [ class = {paramLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="throwsLabel" : span => [ class = {throwsLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/lang/IllegalArgumentException.html" title="class in java.lang" : a => [ href = {../../java/lang/IllegalArgumentException.html.} ] a => [ title = {class.in.java.lang.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
/dl <= li
Temp : li->dl
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 name="HashMap-int-" : a => [ name = {HashMap-int-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
%%%%%%%%%%%%%%%%%%%%		h4: true
Temp : h4->0
 Nada
/h4 <= li
Temp : li->h4
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 Nada
/pre <= li
Temp : li->pre
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
/div <= li
Temp : li->div
 Nada
%%%%%%%%%%%%%%%%%%%%		dl: true
Temp : dl->0
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="paramLabel" : span => [ class = {paramLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="throwsLabel" : span => [ class = {throwsLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/lang/IllegalArgumentException.html" title="class in java.lang" : a => [ href = {../../java/lang/IllegalArgumentException.html.} ] a => [ title = {class.in.java.lang.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
/dl <= li
Temp : li->dl
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 name="HashMap--" : a => [ name = {HashMap--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
%%%%%%%%%%%%%%%%%%%%		h4: true
Temp : h4->0
 Nada
/h4 <= li
Temp : li->h4
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 Nada
/pre <= li
Temp : li->pre
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
/div <= li
Temp : li->div
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 name="HashMap-java.util.Map-" : a => [ name = {HashMap-java.util.Map-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 class="blockListLast" : ul => [ class = {blockListLast.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
%%%%%%%%%%%%%%%%%%%%		h4: true
Temp : h4->0
 Nada
/h4 <= li
Temp : li->h4
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 href="../../java/util/Map.html" title="interface in java.util" : a => [ href = {../../java/util/Map.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 Nada
/pre <= li
Temp : li->pre
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
/div <= li
Temp : li->div
 Nada
%%%%%%%%%%%%%%%%%%%%		dl: true
Temp : dl->0
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="paramLabel" : span => [ class = {paramLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="throwsLabel" : span => [ class = {throwsLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/lang/NullPointerException.html" title="class in java.lang" : a => [ href = {../../java/lang/NullPointerException.html.} ] a => [ title = {class.in.java.lang.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
/dl <= li
Temp : li->dl
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 name="method.detail" : a => [ name = {method.detail.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
%%%%%%%%%%%%%%%%%%%%		h3: true
Temp : h3->0
 Nada
/h3 <= li
Temp : li->h3
 name="size--" : a => [ name = {size--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
%%%%%%%%%%%%%%%%%%%%		h4: true
Temp : h4->0
 Nada
/h4 <= li
Temp : li->h4
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 Nada
/pre <= li
Temp : li->pre
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
/div <= li
Temp : li->div
 Nada
%%%%%%%%%%%%%%%%%%%%		dl: true
Temp : dl->0
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#size--" : a => [ href = {../../java/util/Map.html#size--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html" title="interface in java.util" : a => [ href = {../../java/util/Map.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/AbstractMap.html#size--" : a => [ href = {../../java/util/AbstractMap.html#size--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/AbstractMap.html" title="class in java.util" : a => [ href = {../../java/util/AbstractMap.html.} ] a => [ title = {class.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="returnLabel" : span => [ class = {returnLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
/dd <= dl
Temp : dl->dd
 Nada
/dl <= li
Temp : li->dl
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 name="isEmpty--" : a => [ name = {isEmpty--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
%%%%%%%%%%%%%%%%%%%%		h4: true
Temp : h4->0
 Nada
/h4 <= li
Temp : li->h4
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 Nada
/pre <= li
Temp : li->pre
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
/div <= li
Temp : li->div
 Nada
%%%%%%%%%%%%%%%%%%%%		dl: true
Temp : dl->0
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#isEmpty--" : a => [ href = {../../java/util/Map.html#isEmpty--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html" title="interface in java.util" : a => [ href = {../../java/util/Map.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/AbstractMap.html#isEmpty--" : a => [ href = {../../java/util/AbstractMap.html#isEmpty--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/AbstractMap.html" title="class in java.util" : a => [ href = {../../java/util/AbstractMap.html.} ] a => [ title = {class.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="returnLabel" : span => [ class = {returnLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= dd
Temp : dd->tt
 Nada
/dd <= dl
Temp : dl->dd
 Nada
/dl <= li
Temp : li->dl
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 name="get-java.lang.Object-" : a => [ name = {get-java.lang.Object-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
%%%%%%%%%%%%%%%%%%%%		h4: true
Temp : h4->0
 Nada
/h4 <= li
Temp : li->h4
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/lang/Object.html" title="class in java.lang" : a => [ href = {../../java/lang/Object.html.} ] a => [ title = {class.in.java.lang.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 Nada
/pre <= li
Temp : li->pre
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= div
Temp : div->code
 Nada
%%%%%%%%%%%%%%%%%%%%		p: true
Temp : p->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= p
Temp : p->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= p
Temp : p->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= p
Temp : p->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= p
Temp : p->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= p
Temp : p->code
 Nada
/p <= div
Temp : div->p
 Nada
%%%%%%%%%%%%%%%%%%%%		p: true
Temp : p->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= p
Temp : p->code
 Nada
%%%%%%%%%%%%%%%%%%%%		i: true
Temp : i->0
 Nada
/i <= p
Temp : p->i
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= p
Temp : p->code
 href="../../java/util/HashMap.html#containsKey-java.lang.Object-" : a => [ href = {../../java/util/HashMap.html#containsKey-java.lang.Object-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= a
Temp : a->code
 Nada
/a <= p
Temp : p->a
 Nada
/p <= div
Temp : div->p
 Nada
/div <= li
Temp : li->div
 Nada
%%%%%%%%%%%%%%%%%%%%		dl: true
Temp : dl->0
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#get-java.lang.Object-" : a => [ href = {../../java/util/Map.html#get-java.lang.Object-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html" title="interface in java.util" : a => [ href = {../../java/util/Map.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/AbstractMap.html#get-java.lang.Object-" : a => [ href = {../../java/util/AbstractMap.html#get-java.lang.Object-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/AbstractMap.html" title="class in java.util" : a => [ href = {../../java/util/AbstractMap.html.} ] a => [ title = {class.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="paramLabel" : span => [ class = {paramLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="returnLabel" : span => [ class = {returnLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="seeLabel" : span => [ class = {seeLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 href="../../java/util/HashMap.html#put-K-V-" : a => [ href = {../../java/util/HashMap.html#put-K-V-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= a
Temp : a->code
 Nada
/a <= dd
Temp : dd->a
 Nada
/dd <= dl
Temp : dl->dd
 Nada
/dl <= li
Temp : li->dl
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 name="containsKey-java.lang.Object-" : a => [ name = {containsKey-java.lang.Object-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
%%%%%%%%%%%%%%%%%%%%		h4: true
Temp : h4->0
 Nada
/h4 <= li
Temp : li->h4
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 href="../../java/lang/Object.html" title="class in java.lang" : a => [ href = {../../java/lang/Object.html.} ] a => [ title = {class.in.java.lang.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 Nada
/pre <= li
Temp : li->pre
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
/div <= li
Temp : li->div
 Nada
%%%%%%%%%%%%%%%%%%%%		dl: true
Temp : dl->0
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#containsKey-java.lang.Object-" : a => [ href = {../../java/util/Map.html#containsKey-java.lang.Object-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html" title="interface in java.util" : a => [ href = {../../java/util/Map.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/AbstractMap.html#containsKey-java.lang.Object-" : a => [ href = {../../java/util/AbstractMap.html#containsKey-java.lang.Object-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/AbstractMap.html" title="class in java.util" : a => [ href = {../../java/util/AbstractMap.html.} ] a => [ title = {class.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="paramLabel" : span => [ class = {paramLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="returnLabel" : span => [ class = {returnLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= dd
Temp : dd->tt
 Nada
/dd <= dl
Temp : dl->dd
 Nada
/dl <= li
Temp : li->dl
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 name="put-java.lang.Object-java.lang.Object-" : a => [ name = {put-java.lang.Object-java.lang.Object-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 name="put-K-V-" : a => [ name = {put-K-V-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
%%%%%%%%%%%%%%%%%%%%		h4: true
Temp : h4->0
 Nada
/h4 <= li
Temp : li->h4
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 Nada
/pre <= li
Temp : li->pre
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
/div <= li
Temp : li->div
 Nada
%%%%%%%%%%%%%%%%%%%%		dl: true
Temp : dl->0
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#put-K-V-" : a => [ href = {../../java/util/Map.html#put-K-V-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html" title="interface in java.util" : a => [ href = {../../java/util/Map.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/AbstractMap.html#put-K-V-" : a => [ href = {../../java/util/AbstractMap.html#put-K-V-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/AbstractMap.html" title="class in java.util" : a => [ href = {../../java/util/AbstractMap.html.} ] a => [ title = {class.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="paramLabel" : span => [ class = {paramLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="returnLabel" : span => [ class = {returnLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= dd
Temp : dd->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= dd
Temp : dd->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= dd
Temp : dd->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= dd
Temp : dd->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= dd
Temp : dd->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= dd
Temp : dd->tt
 Nada
/dd <= dl
Temp : dl->dd
 Nada
/dl <= li
Temp : li->dl
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 name="putAll-java.util.Map-" : a => [ name = {putAll-java.util.Map-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
%%%%%%%%%%%%%%%%%%%%		h4: true
Temp : h4->0
 Nada
/h4 <= li
Temp : li->h4
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 href="../../java/util/Map.html" title="interface in java.util" : a => [ href = {../../java/util/Map.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 Nada
/pre <= li
Temp : li->pre
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
/div <= li
Temp : li->div
 Nada
%%%%%%%%%%%%%%%%%%%%		dl: true
Temp : dl->0
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#putAll-java.util.Map-" : a => [ href = {../../java/util/Map.html#putAll-java.util.Map-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html" title="interface in java.util" : a => [ href = {../../java/util/Map.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/AbstractMap.html#putAll-java.util.Map-" : a => [ href = {../../java/util/AbstractMap.html#putAll-java.util.Map-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/AbstractMap.html" title="class in java.util" : a => [ href = {../../java/util/AbstractMap.html.} ] a => [ title = {class.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="paramLabel" : span => [ class = {paramLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="throwsLabel" : span => [ class = {throwsLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/lang/NullPointerException.html" title="class in java.lang" : a => [ href = {../../java/lang/NullPointerException.html.} ] a => [ title = {class.in.java.lang.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
/dl <= li
Temp : li->dl
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 name="remove-java.lang.Object-" : a => [ name = {remove-java.lang.Object-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
%%%%%%%%%%%%%%%%%%%%		h4: true
Temp : h4->0
 Nada
/h4 <= li
Temp : li->h4
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/lang/Object.html" title="class in java.lang" : a => [ href = {../../java/lang/Object.html.} ] a => [ title = {class.in.java.lang.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 Nada
/pre <= li
Temp : li->pre
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
/div <= li
Temp : li->div
 Nada
%%%%%%%%%%%%%%%%%%%%		dl: true
Temp : dl->0
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#remove-java.lang.Object-" : a => [ href = {../../java/util/Map.html#remove-java.lang.Object-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html" title="interface in java.util" : a => [ href = {../../java/util/Map.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/AbstractMap.html#remove-java.lang.Object-" : a => [ href = {../../java/util/AbstractMap.html#remove-java.lang.Object-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/AbstractMap.html" title="class in java.util" : a => [ href = {../../java/util/AbstractMap.html.} ] a => [ title = {class.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="paramLabel" : span => [ class = {paramLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="returnLabel" : span => [ class = {returnLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= dd
Temp : dd->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= dd
Temp : dd->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= dd
Temp : dd->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= dd
Temp : dd->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= dd
Temp : dd->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= dd
Temp : dd->tt
 Nada
/dd <= dl
Temp : dl->dd
 Nada
/dl <= li
Temp : li->dl
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 name="clear--" : a => [ name = {clear--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
%%%%%%%%%%%%%%%%%%%%		h4: true
Temp : h4->0
 Nada
/h4 <= li
Temp : li->h4
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 Nada
/pre <= li
Temp : li->pre
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
/div <= li
Temp : li->div
 Nada
%%%%%%%%%%%%%%%%%%%%		dl: true
Temp : dl->0
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#clear--" : a => [ href = {../../java/util/Map.html#clear--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html" title="interface in java.util" : a => [ href = {../../java/util/Map.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/AbstractMap.html#clear--" : a => [ href = {../../java/util/AbstractMap.html#clear--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/AbstractMap.html" title="class in java.util" : a => [ href = {../../java/util/AbstractMap.html.} ] a => [ title = {class.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
/dl <= li
Temp : li->dl
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 name="containsValue-java.lang.Object-" : a => [ name = {containsValue-java.lang.Object-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
%%%%%%%%%%%%%%%%%%%%		h4: true
Temp : h4->0
 Nada
/h4 <= li
Temp : li->h4
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 href="../../java/lang/Object.html" title="class in java.lang" : a => [ href = {../../java/lang/Object.html.} ] a => [ title = {class.in.java.lang.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 Nada
/pre <= li
Temp : li->pre
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
/div <= li
Temp : li->div
 Nada
%%%%%%%%%%%%%%%%%%%%		dl: true
Temp : dl->0
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#containsValue-java.lang.Object-" : a => [ href = {../../java/util/Map.html#containsValue-java.lang.Object-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html" title="interface in java.util" : a => [ href = {../../java/util/Map.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/AbstractMap.html#containsValue-java.lang.Object-" : a => [ href = {../../java/util/AbstractMap.html#containsValue-java.lang.Object-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/AbstractMap.html" title="class in java.util" : a => [ href = {../../java/util/AbstractMap.html.} ] a => [ title = {class.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="paramLabel" : span => [ class = {paramLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="returnLabel" : span => [ class = {returnLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= dd
Temp : dd->tt
 Nada
/dd <= dl
Temp : dl->dd
 Nada
/dl <= li
Temp : li->dl
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 name="keySet--" : a => [ name = {keySet--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
%%%%%%%%%%%%%%%%%%%%		h4: true
Temp : h4->0
 Nada
/h4 <= li
Temp : li->h4
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 href="../../java/util/Set.html" title="interface in java.util" : a => [ href = {../../java/util/Set.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 Nada
/pre <= li
Temp : li->pre
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 href="../../java/util/Set.html" title="interface in java.util" : a => [ href = {../../java/util/Set.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= a
Temp : a->code
 Nada
/a <= div
Temp : div->a
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
/div <= li
Temp : li->div
 Nada
%%%%%%%%%%%%%%%%%%%%		dl: true
Temp : dl->0
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#keySet--" : a => [ href = {../../java/util/Map.html#keySet--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html" title="interface in java.util" : a => [ href = {../../java/util/Map.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/AbstractMap.html#keySet--" : a => [ href = {../../java/util/AbstractMap.html#keySet--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/AbstractMap.html" title="class in java.util" : a => [ href = {../../java/util/AbstractMap.html.} ] a => [ title = {class.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="returnLabel" : span => [ class = {returnLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
/dd <= dl
Temp : dl->dd
 Nada
/dl <= li
Temp : li->dl
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 name="values--" : a => [ name = {values--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
%%%%%%%%%%%%%%%%%%%%		h4: true
Temp : h4->0
 Nada
/h4 <= li
Temp : li->h4
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 href="../../java/util/Collection.html" title="interface in java.util" : a => [ href = {../../java/util/Collection.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 Nada
/pre <= li
Temp : li->pre
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 href="../../java/util/Collection.html" title="interface in java.util" : a => [ href = {../../java/util/Collection.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= a
Temp : a->code
 Nada
/a <= div
Temp : div->a
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
/div <= li
Temp : li->div
 Nada
%%%%%%%%%%%%%%%%%%%%		dl: true
Temp : dl->0
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#values--" : a => [ href = {../../java/util/Map.html#values--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html" title="interface in java.util" : a => [ href = {../../java/util/Map.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/AbstractMap.html#values--" : a => [ href = {../../java/util/AbstractMap.html#values--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/AbstractMap.html" title="class in java.util" : a => [ href = {../../java/util/AbstractMap.html.} ] a => [ title = {class.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="returnLabel" : span => [ class = {returnLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
/dd <= dl
Temp : dl->dd
 Nada
/dl <= li
Temp : li->dl
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 name="entrySet--" : a => [ name = {entrySet--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
%%%%%%%%%%%%%%%%%%%%		h4: true
Temp : h4->0
 Nada
/h4 <= li
Temp : li->h4
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 href="../../java/util/Set.html" title="interface in java.util" : a => [ href = {../../java/util/Set.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/Map.Entry.html" title="interface in java.util" : a => [ href = {../../java/util/Map.Entry.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 Nada
/pre <= li
Temp : li->pre
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 href="../../java/util/Set.html" title="interface in java.util" : a => [ href = {../../java/util/Set.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= a
Temp : a->code
 Nada
/a <= div
Temp : div->a
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
/div <= li
Temp : li->div
 Nada
%%%%%%%%%%%%%%%%%%%%		dl: true
Temp : dl->0
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#entrySet--" : a => [ href = {../../java/util/Map.html#entrySet--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html" title="interface in java.util" : a => [ href = {../../java/util/Map.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/AbstractMap.html#entrySet--" : a => [ href = {../../java/util/AbstractMap.html#entrySet--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/AbstractMap.html" title="class in java.util" : a => [ href = {../../java/util/AbstractMap.html.} ] a => [ title = {class.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="returnLabel" : span => [ class = {returnLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
/dd <= dl
Temp : dl->dd
 Nada
/dl <= li
Temp : li->dl
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 name="getOrDefault-java.lang.Object-java.lang.Object-" : a => [ name = {getOrDefault-java.lang.Object-java.lang.Object-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 name="getOrDefault-java.lang.Object-V-" : a => [ name = {getOrDefault-java.lang.Object-V-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
%%%%%%%%%%%%%%%%%%%%		h4: true
Temp : h4->0
 Nada
/h4 <= li
Temp : li->h4
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/lang/Object.html" title="class in java.lang" : a => [ href = {../../java/lang/Object.html.} ] a => [ title = {class.in.java.lang.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 Nada
/pre <= li
Temp : li->pre
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 class="descfrmTypeLabel" : span => [ class = {descfrmTypeLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#getOrDefault-java.lang.Object-V-" : a => [ href = {../../java/util/Map.html#getOrDefault-java.lang.Object-V-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= span
Temp : span->code
 Nada
/span <= div
Temp : div->span
 Nada
/div <= li
Temp : li->div
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= div
Temp : div->code
 Nada
/div <= li
Temp : li->div
 Nada
%%%%%%%%%%%%%%%%%%%%		dl: true
Temp : dl->0
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#getOrDefault-java.lang.Object-V-" : a => [ href = {../../java/util/Map.html#getOrDefault-java.lang.Object-V-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html" title="interface in java.util" : a => [ href = {../../java/util/Map.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="paramLabel" : span => [ class = {paramLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="returnLabel" : span => [ class = {returnLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
/dl <= li
Temp : li->dl
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 name="putIfAbsent-java.lang.Object-java.lang.Object-" : a => [ name = {putIfAbsent-java.lang.Object-java.lang.Object-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 name="putIfAbsent-K-V-" : a => [ name = {putIfAbsent-K-V-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
%%%%%%%%%%%%%%%%%%%%		h4: true
Temp : h4->0
 Nada
/h4 <= li
Temp : li->h4
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 Nada
/pre <= li
Temp : li->pre
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 class="descfrmTypeLabel" : span => [ class = {descfrmTypeLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#putIfAbsent-K-V-" : a => [ href = {../../java/util/Map.html#putIfAbsent-K-V-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= span
Temp : span->code
 Nada
/span <= div
Temp : div->span
 Nada
/div <= li
Temp : li->div
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= div
Temp : div->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= div
Temp : div->code
 Nada
/div <= li
Temp : li->div
 Nada
%%%%%%%%%%%%%%%%%%%%		dl: true
Temp : dl->0
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#putIfAbsent-K-V-" : a => [ href = {../../java/util/Map.html#putIfAbsent-K-V-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html" title="interface in java.util" : a => [ href = {../../java/util/Map.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="paramLabel" : span => [ class = {paramLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="returnLabel" : span => [ class = {returnLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
/dl <= li
Temp : li->dl
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 name="remove-java.lang.Object-java.lang.Object-" : a => [ name = {remove-java.lang.Object-java.lang.Object-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
%%%%%%%%%%%%%%%%%%%%		h4: true
Temp : h4->0
 Nada
/h4 <= li
Temp : li->h4
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 href="../../java/lang/Object.html" title="class in java.lang" : a => [ href = {../../java/lang/Object.html.} ] a => [ title = {class.in.java.lang.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/lang/Object.html" title="class in java.lang" : a => [ href = {../../java/lang/Object.html.} ] a => [ title = {class.in.java.lang.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 Nada
/pre <= li
Temp : li->pre
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 class="descfrmTypeLabel" : span => [ class = {descfrmTypeLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#remove-java.lang.Object-java.lang.Object-" : a => [ href = {../../java/util/Map.html#remove-java.lang.Object-java.lang.Object-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= span
Temp : span->code
 Nada
/span <= div
Temp : div->span
 Nada
/div <= li
Temp : li->div
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
/div <= li
Temp : li->div
 Nada
%%%%%%%%%%%%%%%%%%%%		dl: true
Temp : dl->0
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#remove-java.lang.Object-java.lang.Object-" : a => [ href = {../../java/util/Map.html#remove-java.lang.Object-java.lang.Object-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html" title="interface in java.util" : a => [ href = {../../java/util/Map.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="paramLabel" : span => [ class = {paramLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="returnLabel" : span => [ class = {returnLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
/dl <= li
Temp : li->dl
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 name="replace-java.lang.Object-java.lang.Object-java.lang.Object-" : a => [ name = {replace-java.lang.Object-java.lang.Object-java.lang.Object-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 name="replace-K-V-V-" : a => [ name = {replace-K-V-V-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
%%%%%%%%%%%%%%%%%%%%		h4: true
Temp : h4->0
 Nada
/h4 <= li
Temp : li->h4
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 Nada
/pre <= li
Temp : li->pre
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 class="descfrmTypeLabel" : span => [ class = {descfrmTypeLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#replace-K-V-V-" : a => [ href = {../../java/util/Map.html#replace-K-V-V-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= span
Temp : span->code
 Nada
/span <= div
Temp : div->span
 Nada
/div <= li
Temp : li->div
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
/div <= li
Temp : li->div
 Nada
%%%%%%%%%%%%%%%%%%%%		dl: true
Temp : dl->0
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#replace-K-V-V-" : a => [ href = {../../java/util/Map.html#replace-K-V-V-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html" title="interface in java.util" : a => [ href = {../../java/util/Map.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="paramLabel" : span => [ class = {paramLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="returnLabel" : span => [ class = {returnLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
/dl <= li
Temp : li->dl
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 name="replace-java.lang.Object-java.lang.Object-" : a => [ name = {replace-java.lang.Object-java.lang.Object-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 name="replace-K-V-" : a => [ name = {replace-K-V-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
%%%%%%%%%%%%%%%%%%%%		h4: true
Temp : h4->0
 Nada
/h4 <= li
Temp : li->h4
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 Nada
/pre <= li
Temp : li->pre
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 class="descfrmTypeLabel" : span => [ class = {descfrmTypeLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#replace-K-V-" : a => [ href = {../../java/util/Map.html#replace-K-V-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= span
Temp : span->code
 Nada
/span <= div
Temp : div->span
 Nada
/div <= li
Temp : li->div
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
/div <= li
Temp : li->div
 Nada
%%%%%%%%%%%%%%%%%%%%		dl: true
Temp : dl->0
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#replace-K-V-" : a => [ href = {../../java/util/Map.html#replace-K-V-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html" title="interface in java.util" : a => [ href = {../../java/util/Map.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="paramLabel" : span => [ class = {paramLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="returnLabel" : span => [ class = {returnLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
/dl <= li
Temp : li->dl
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 name="computeIfAbsent-java.lang.Object-java.util.function.Function-" : a => [ name = {computeIfAbsent-java.lang.Object-java.util.function.Function-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 name="computeIfAbsent-K-java.util.function.Function-" : a => [ name = {computeIfAbsent-K-java.util.function.Function-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
%%%%%%%%%%%%%%%%%%%%		h4: true
Temp : h4->0
 Nada
/h4 <= li
Temp : li->h4
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/function/Function.html" title="interface in java.util.function" : a => [ href = {../../java/util/function/Function.html.} ] a => [ title = {interface.in.java.util.function.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 Nada
/pre <= li
Temp : li->pre
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 class="descfrmTypeLabel" : span => [ class = {descfrmTypeLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#computeIfAbsent-K-java.util.function.Function-" : a => [ href = {../../java/util/Map.html#computeIfAbsent-K-java.util.function.Function-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= span
Temp : span->code
 Nada
/span <= div
Temp : div->span
 Nada
/div <= li
Temp : li->div
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= div
Temp : div->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= div
Temp : div->code
 Nada
%%%%%%%%%%%%%%%%%%%%		p: true
Temp : p->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= p
Temp : p->code
 Nada
/p <= div
Temp : div->p
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= pre
Temp : pre->code
 Nada
/pre <= div
Temp : div->pre
 Nada
%%%%%%%%%%%%%%%%%%%%		p: true
Temp : p->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= p
Temp : p->code
 Nada
/p <= div
Temp : div->p
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= pre
Temp : pre->code
 Nada
/pre <= div
Temp : div->pre
 Nada
/div <= li
Temp : li->div
 Nada
%%%%%%%%%%%%%%%%%%%%		dl: true
Temp : dl->0
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#computeIfAbsent-K-java.util.function.Function-" : a => [ href = {../../java/util/Map.html#computeIfAbsent-K-java.util.function.Function-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html" title="interface in java.util" : a => [ href = {../../java/util/Map.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="paramLabel" : span => [ class = {paramLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="returnLabel" : span => [ class = {returnLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
/dd <= dl
Temp : dl->dd
 Nada
/dl <= li
Temp : li->dl
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 name="computeIfPresent-java.lang.Object-java.util.function.BiFunction-" : a => [ name = {computeIfPresent-java.lang.Object-java.util.function.BiFunction-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 name="computeIfPresent-K-java.util.function.BiFunction-" : a => [ name = {computeIfPresent-K-java.util.function.BiFunction-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
%%%%%%%%%%%%%%%%%%%%		h4: true
Temp : h4->0
 Nada
/h4 <= li
Temp : li->h4
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/function/BiFunction.html" title="interface in java.util.function" : a => [ href = {../../java/util/function/BiFunction.html.} ] a => [ title = {interface.in.java.util.function.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 Nada
/pre <= li
Temp : li->pre
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 class="descfrmTypeLabel" : span => [ class = {descfrmTypeLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-" : a => [ href = {../../java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= span
Temp : span->code
 Nada
/span <= div
Temp : div->span
 Nada
/div <= li
Temp : li->div
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
%%%%%%%%%%%%%%%%%%%%		p: true
Temp : p->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= p
Temp : p->code
 Nada
/p <= div
Temp : div->p
 Nada
/div <= li
Temp : li->div
 Nada
%%%%%%%%%%%%%%%%%%%%		dl: true
Temp : dl->0
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-" : a => [ href = {../../java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html" title="interface in java.util" : a => [ href = {../../java/util/Map.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="paramLabel" : span => [ class = {paramLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="returnLabel" : span => [ class = {returnLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
/dd <= dl
Temp : dl->dd
 Nada
/dl <= li
Temp : li->dl
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 name="compute-java.lang.Object-java.util.function.BiFunction-" : a => [ name = {compute-java.lang.Object-java.util.function.BiFunction-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 name="compute-K-java.util.function.BiFunction-" : a => [ name = {compute-K-java.util.function.BiFunction-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
%%%%%%%%%%%%%%%%%%%%		h4: true
Temp : h4->0
 Nada
/h4 <= li
Temp : li->h4
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/function/BiFunction.html" title="interface in java.util.function" : a => [ href = {../../java/util/function/BiFunction.html.} ] a => [ title = {interface.in.java.util.function.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 Nada
/pre <= li
Temp : li->pre
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 class="descfrmTypeLabel" : span => [ class = {descfrmTypeLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#compute-K-java.util.function.BiFunction-" : a => [ href = {../../java/util/Map.html#compute-K-java.util.function.BiFunction-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= span
Temp : span->code
 Nada
/span <= div
Temp : div->span
 Nada
/div <= li
Temp : li->div
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= div
Temp : div->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= div
Temp : div->code
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= pre
Temp : pre->code
 Nada
/pre <= div
Temp : div->pre
 href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-" : a => [ href = {../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= a
Temp : a->code
 Nada
/a <= div
Temp : div->a
 Nada
%%%%%%%%%%%%%%%%%%%%		p: true
Temp : p->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= p
Temp : p->code
 Nada
/p <= div
Temp : div->p
 Nada
/div <= li
Temp : li->div
 Nada
%%%%%%%%%%%%%%%%%%%%		dl: true
Temp : dl->0
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#compute-K-java.util.function.BiFunction-" : a => [ href = {../../java/util/Map.html#compute-K-java.util.function.BiFunction-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html" title="interface in java.util" : a => [ href = {../../java/util/Map.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="paramLabel" : span => [ class = {paramLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="returnLabel" : span => [ class = {returnLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
/dd <= dl
Temp : dl->dd
 Nada
/dl <= li
Temp : li->dl
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 name="merge-java.lang.Object-java.lang.Object-java.util.function.BiFunction-" : a => [ name = {merge-java.lang.Object-java.lang.Object-java.util.function.BiFunction-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 name="merge-K-V-java.util.function.BiFunction-" : a => [ name = {merge-K-V-java.util.function.BiFunction-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
%%%%%%%%%%%%%%%%%%%%		h4: true
Temp : h4->0
 Nada
/h4 <= li
Temp : li->h4
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/function/BiFunction.html" title="interface in java.util.function" : a => [ href = {../../java/util/function/BiFunction.html.} ] a => [ title = {interface.in.java.util.function.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 Nada
/pre <= li
Temp : li->pre
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 class="descfrmTypeLabel" : span => [ class = {descfrmTypeLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-" : a => [ href = {../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= span
Temp : span->code
 Nada
/span <= div
Temp : div->span
 Nada
/div <= li
Temp : li->div
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= div
Temp : div->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= div
Temp : div->code
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= pre
Temp : pre->code
 Nada
/pre <= div
Temp : div->pre
 Nada
%%%%%%%%%%%%%%%%%%%%		p: true
Temp : p->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= p
Temp : p->code
 Nada
/p <= div
Temp : div->p
 Nada
/div <= li
Temp : li->div
 Nada
%%%%%%%%%%%%%%%%%%%%		dl: true
Temp : dl->0
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-" : a => [ href = {../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html" title="interface in java.util" : a => [ href = {../../java/util/Map.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="paramLabel" : span => [ class = {paramLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="returnLabel" : span => [ class = {returnLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
/dd <= dl
Temp : dl->dd
 Nada
/dl <= li
Temp : li->dl
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 name="forEach-java.util.function.BiConsumer-" : a => [ name = {forEach-java.util.function.BiConsumer-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
%%%%%%%%%%%%%%%%%%%%		h4: true
Temp : h4->0
 Nada
/h4 <= li
Temp : li->h4
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 href="../../java/util/function/BiConsumer.html" title="interface in java.util.function" : a => [ href = {../../java/util/function/BiConsumer.html.} ] a => [ title = {interface.in.java.util.function.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 Nada
/pre <= li
Temp : li->pre
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 class="descfrmTypeLabel" : span => [ class = {descfrmTypeLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#forEach-java.util.function.BiConsumer-" : a => [ href = {../../java/util/Map.html#forEach-java.util.function.BiConsumer-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= span
Temp : span->code
 Nada
/span <= div
Temp : div->span
 Nada
/div <= li
Temp : li->div
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
/div <= li
Temp : li->div
 Nada
%%%%%%%%%%%%%%%%%%%%		dl: true
Temp : dl->0
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#forEach-java.util.function.BiConsumer-" : a => [ href = {../../java/util/Map.html#forEach-java.util.function.BiConsumer-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html" title="interface in java.util" : a => [ href = {../../java/util/Map.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="paramLabel" : span => [ class = {paramLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
/dl <= li
Temp : li->dl
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 name="replaceAll-java.util.function.BiFunction-" : a => [ name = {replaceAll-java.util.function.BiFunction-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 class="blockList" : ul => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
%%%%%%%%%%%%%%%%%%%%		h4: true
Temp : h4->0
 Nada
/h4 <= li
Temp : li->h4
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 href="../../java/util/function/BiFunction.html" title="interface in java.util.function" : a => [ href = {../../java/util/function/BiFunction.html.} ] a => [ title = {interface.in.java.util.function.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 Nada
/pre <= li
Temp : li->pre
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 class="descfrmTypeLabel" : span => [ class = {descfrmTypeLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#replaceAll-java.util.function.BiFunction-" : a => [ href = {../../java/util/Map.html#replaceAll-java.util.function.BiFunction-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= span
Temp : span->code
 Nada
/span <= div
Temp : div->span
 Nada
/div <= li
Temp : li->div
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
/div <= li
Temp : li->div
 Nada
%%%%%%%%%%%%%%%%%%%%		dl: true
Temp : dl->0
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html#replaceAll-java.util.function.BiFunction-" : a => [ href = {../../java/util/Map.html#replaceAll-java.util.function.BiFunction-.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/Map.html" title="interface in java.util" : a => [ href = {../../java/util/Map.html.} ] a => [ title = {interface.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="paramLabel" : span => [ class = {paramLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
/dl <= li
Temp : li->dl
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 name="clone--" : a => [ name = {clone--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 class="blockListLast" : ul => [ class = {blockListLast.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 class="blockList" : li => [ class = {blockList.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
%%%%%%%%%%%%%%%%%%%%		h4: true
Temp : h4->0
 Nada
/h4 <= li
Temp : li->h4
 Nada
%%%%%%%%%%%%%%%%%%%%		pre: true
Temp : pre->0
 href="../../java/lang/Object.html" title="class in java.lang" : a => [ href = {../../java/lang/Object.html.} ] a => [ title = {class.in.java.lang.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= pre
Temp : pre->a
 Nada
/pre <= li
Temp : li->pre
 class="block" : div => [ class = {block.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
%%%%%%%%%%%%%%%%%%%%		tt: true
Temp : tt->0
 Nada
/tt <= div
Temp : div->tt
 Nada
/div <= li
Temp : li->div
 Nada
%%%%%%%%%%%%%%%%%%%%		dl: true
Temp : dl->0
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="overrideSpecifyLabel" : span => [ class = {overrideSpecifyLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/AbstractMap.html#clone--" : a => [ href = {../../java/util/AbstractMap.html#clone--.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 href="../../java/util/AbstractMap.html" title="class in java.util" : a => [ href = {../../java/util/AbstractMap.html.} ] a => [ title = {class.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 href="../../java/util/HashMap.html" title="type parameter in HashMap" : a => [ href = {../../java/util/HashMap.html.} ] a => [ title = {type.parameter.in.HashMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= code
Temp : code->a
 Nada
/code <= dd
Temp : dd->code
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="returnLabel" : span => [ class = {returnLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 Nada
/dd <= dl
Temp : dl->dd
 Nada
%%%%%%%%%%%%%%%%%%%%		dt: true
Temp : dt->0
 class="seeLabel" : span => [ class = {seeLabel.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= dt
Temp : dt->span
 Nada
/dt <= dl
Temp : dl->dt
 Nada
%%%%%%%%%%%%%%%%%%%%		dd: true
Temp : dd->0
 href="../../java/lang/Cloneable.html" title="interface in java.lang" : a => [ href = {../../java/lang/Cloneable.html.} ] a => [ title = {interface.in.java.lang.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
%%%%%%%%%%%%%%%%%%%%		code: true
Temp : code->0
 Nada
/code <= a
Temp : a->code
 Nada
/a <= dd
Temp : dd->a
 Nada
/dd <= dl
Temp : dl->dd
 Nada
/dl <= li
Temp : li->dl
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= li
Temp : li->ul
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= div
Temp : div->ul
 Nada
/div <= div
Temp : div->div
 Nada
/div <= body
Temp : body->div
 class="bottomNav" : div => [ class = {bottomNav.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 name="navbar.bottom" : a => [ name = {navbar.bottom.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= div
Temp : div->a
 class="skipNav" : div => [ class = {skipNav.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 href="#skip.navbar.bottom" title="Skip navigation links" : a => [ href = {#skip.navbar.bottom.} ] a => [ title = {Skip.navigation.links.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= div
Temp : div->a
 Nada
/div <= div
Temp : div->div
 name="navbar.bottom.firstrow" : a => [ name = {navbar.bottom.firstrow.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= div
Temp : div->a
 class="navList" title="Navigation" : ul => [ title = {Navigation.} ] ul => [ class = {navList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="../../overview-summary.html" : a => [ href = {../../overview-summary.html.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="package-summary.html" : a => [ href = {package-summary.html.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 class="navBarCell1Rev" : li => [ class = {navBarCell1Rev.} ] 
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
/li <= ul
Temp : ul->li
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="class-use/HashMap.html" : a => [ href = {class-use/HashMap.html.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="package-tree.html" : a => [ href = {package-tree.html.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="../../deprecated-list.html" : a => [ href = {../../deprecated-list.html.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="../../index-files/index-1.html" : a => [ href = {../../index-files/index-1.html.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="../../help-doc.html" : a => [ href = {../../help-doc.html.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= div
Temp : div->ul
 class="aboutLanguage" : div => [ class = {aboutLanguage.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 Nada
%%%%%%%%%%%%%%%%%%%%		strong: true
Temp : strong->0
 Nada
%%%%%%%%%%%%%%%%%%%%		br: false
Temp : strong->br
 Nada
/strong <= div
Temp : div->strong
 Nada
/div <= div
Temp : div->div
 Nada
/div <= body
Temp : body->div
 class="subNav" : div => [ class = {subNav.} ] 
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 class="navList" : ul => [ class = {navList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="../../java/util/GregorianCalendar.html" title="class in java.util" : a => [ href = {../../java/util/GregorianCalendar.html.} ] a => [ title = {class.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 class="typeNameLink" : span => [ class = {typeNameLink.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= a
Temp : a->span
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="../../java/util/HashSet.html" title="class in java.util" : a => [ href = {../../java/util/HashSet.html.} ] a => [ title = {class.in.java.util.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 class="typeNameLink" : span => [ class = {typeNameLink.} ] 
%%%%%%%%%%%%%%%%%%%%		span: true
Temp : span->0
 Nada
/span <= a
Temp : a->span
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= div
Temp : div->ul
 class="navList" : ul => [ class = {navList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="../../index.html?java/util/HashMap.html" target="_top" : a => [ href = {../../index.html?java/util/HashMap.html.} ] a => [ target = {_top.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="HashMap.html" target="_top" : a => [ href = {HashMap.html.} ] a => [ target = {_top.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= div
Temp : div->ul
 class="navList" id="allclasses_navbar_bottom" style="display: block;" : ul => [ style = {display:.block;.} ] ul => [ id = {allclasses_navbar_bottom.} ] ul => [ class = {navList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="../../allclasses-noframe.html" : a => [ href = {../../allclasses-noframe.html.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= div
Temp : div->ul
 Nada
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 type="text/javascript" : script => [ type = {text/javascript.} ] 
%%%%%%%%%%%%%%%%%%%%		script: true
 Nada
/script <= div
Temp : div->script
 Nada
/div <= div
Temp : div->div
 Nada
%%%%%%%%%%%%%%%%%%%%		div: true
Temp : div->0
 class="subNavList" : ul => [ class = {subNavList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
/li <= ul
Temp : ul->li
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="#nested.classes.inherited.from.class.java.util.AbstractMap" : a => [ href = {#nested.classes.inherited.from.class.java.util.AbstractMap.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
/li <= ul
Temp : ul->li
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="#constructor.summary" : a => [ href = {#constructor.summary.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="#method.summary" : a => [ href = {#method.summary.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= div
Temp : div->ul
 class="subNavList" : ul => [ class = {subNavList.} ] 
%%%%%%%%%%%%%%%%%%%%		ul: true
Temp : ul->0
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
/li <= ul
Temp : ul->li
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 Nada
/li <= ul
Temp : ul->li
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="#constructor.detail" : a => [ href = {#constructor.detail.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
%%%%%%%%%%%%%%%%%%%%		li: true
Temp : li->0
 href="#method.detail" : a => [ href = {#method.detail.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= li
Temp : li->a
 Nada
/li <= ul
Temp : ul->li
 Nada
/ul <= div
Temp : div->ul
 Nada
/div <= div
Temp : div->div
 name="skip.navbar.bottom" : a => [ name = {skip.navbar.bottom.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= div
Temp : div->a
 Nada
/div <= body
Temp : body->div
 class="legalCopy" : p => [ class = {legalCopy.} ] 
%%%%%%%%%%%%%%%%%%%%		p: true
Temp : p->0
 Nada
%%%%%%%%%%%%%%%%%%%%		small: true
Temp : small->0
 size="-1" : font => [ size = {-1.} ] 
%%%%%%%%%%%%%%%%%%%%		font: true
Temp : font->0
 href="http://bugreport.sun.com/bugreport/" : a => [ href = {http://bugreport.sun.com/bugreport/.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= font
Temp : font->a
 Nada
%%%%%%%%%%%%%%%%%%%%		br: false
Temp : font->br
 href="https://docs.oracle.com/javase/8/docs/index.html" target="_blank" : a => [ href = {https://docs.oracle.com/javase/8/docs/index.html.} ] a => [ target = {_blank.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= font
Temp : font->a
 Nada
%%%%%%%%%%%%%%%%%%%%		br: false
Temp : font->br
 href="../../../legal/cpyr.html" : a => [ href = {../../../legal/cpyr.html.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= font
Temp : font->a
 href="http://download.oracle.com/otndocs/jcp/java_se-8-mrel-spec/license.html" : a => [ href = {http://download.oracle.com/otndocs/jcp/java_se-8-mrel-spec/license.html.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= font
Temp : font->a
 target="_blank" href="http://www.oracle.com/technetwork/java/redist-137594.html" : a => [ href = {http://www.oracle.com/technetwork/java/redist-137594.html.} ] a => [ target = {_blank.} ] 
%%%%%%%%%%%%%%%%%%%%		a: true
Temp : a->0
 Nada
/a <= font
Temp : font->a
 Nada
/font <= small
Temp : small->font
 Nada
/small <= p
Temp : p->small
 Nada
/p <= body
Temp : body->p
 type="application/javascript" src="https://www.oracleimg.com/us/assets/metrics/ora_docs.js" : script => [ src = {https://www.oracleimg.com/us/assets/metrics/ora_docs.js.} ] script => [ type = {application/javascript.} ] 
%%%%%%%%%%%%%%%%%%%%		script: true
 Nada
/script <= body
Temp : body->script
 src="https://www.oracleimg.com/us/assets/metrics/ora_code_docs.js" : script => [ src = {https://www.oracleimg.com/us/assets/metrics/ora_code_docs.js.} ] 
%%%%%%%%%%%%%%%%%%%%		script: true
 Nada
/script <= body
Temp : body->script
 src="https://www.oracleimg.com/us/assets/metrics/ora_code.js" : script => [ src = {https://www.oracleimg.com/us/assets/metrics/ora_code.js.} ] 
%%%%%%%%%%%%%%%%%%%%		script: true
 Nada
/script <= body
Temp : body->script
 Nada
%%%%%%%%%%%%%%%%%%%%		noscript: true
Temp : noscript->0
 Nada
%%%%%%%%%%%%%%%%%%%%		p: true
Temp : p->0
 Nada
/p <= noscript
Temp : noscript->p
 Nada
/noscript <= body
Temp : body->noscript
 Nada
/body <= html
Temp : html->body
 Nada
/html <= ROOT
Temp : ROOT->html

ROOT {} : [
<link type="text/css" id="dark-mode" rel="stylesheet" href=""><style type="text/css" id="dark-mode-custom-style"></style><head> <!-- Generated by javadoc (1.8.0_211) on Wed Mar 06 05:40:48 PST 2019 --> <title>HashMap (Java Platform SE 8 )</title> <meta name="date" content="2019-03-06"> <meta name="keywords" content="java.util.HashMap class"> <meta name="keywords" content="size()"> <meta name="keywords" content="isEmpty()"> <meta name="keywords" content="get()"> <meta name="keywords" content="containsKey()"> <meta name="keywords" content="put()"> <meta name="keywords" content="putAll()"> <meta name="keywords" content="remove()"> <meta name="keywords" content="clear()"> <meta name="keywords" content="containsValue()"> <meta name="keywords" content="keySet()"> <meta name="keywords" content="values()"> <meta name="keywords" content="entrySet()"> <meta name="keywords" content="getOrDefault()"> <meta name="keywords" content="putIfAbsent()"> <meta name="keywords" content="replace()"> <meta name="keywords" content="computeIfAbsent()"> <meta name="keywords" content="computeIfPresent()"> <meta name="keywords" content="compute()"> <meta name="keywords" content="merge()"> <meta name="keywords" content="forEach()"> <meta name="keywords" content="replaceAll()"> <meta name="keywords" content="clone()"> <link rel="stylesheet" type="text/css" href="../../stylesheet.css" title="Style"> <script type="text/javascript" src="../../script.js"></script> <script> </script> <script src="/en/dcommon/js/global.js"></script></head><body data-gr-c-s-loaded="true"> <script type="text/javascript"> </script> <noscript> <div>JavaScript is disabled on your browser.</div> </noscript> <!-- ========= START OF TOP NAVBAR ======= --> <div class="topNav"><a name="navbar.top"> <!-- --> </a> <div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div> <a name="navbar.top.firstrow"> <!-- --> </a> <ul class="navList" title="Navigation"> <li><a href="../../overview-summary.html">Overview</a></li> <li><a href="package-summary.html">Package</a></li> <li class="navBarCell1Rev">Class</li> <li><a href="class-use/HashMap.html">Use</a></li> <li><a href="package-tree.html">Tree</a></li> <li><a href="../../deprecated-list.html">Deprecated</a></li> <li><a href="../../index-files/index-1.html">Index</a></li> <li><a href="../../help-doc.html">Help</a></li> </ul> <div class="aboutLanguage"><strong>Javaâ„¢&nbsp;Platform<br>Standard&nbsp;Ed.&nbsp;8</strong></div> </div> <div class="subNav"> <ul class="navList"> <li><a href="../../java/util/GregorianCalendar.html" title="class in java.util"><span class="typeNameLink">Prev&nbsp;Class</span></a></li> <li><a href="../../java/util/HashSet.html" title="class in java.util"><span class="typeNameLink">Next&nbsp;Class</span></a></li> </ul> <ul class="navList"> <li><a href="../../index.html?java/util/HashMap.html" target="_top">Frames</a></li> <li><a href="HashMap.html" target="_top">No&nbsp;Frames</a></li> </ul> <ul class="navList" id="allclasses_navbar_top" style="display: block;"> <li><a href="../../allclasses-noframe.html">All&nbsp;Classes</a></li> </ul> <div> <script type="text/javascript"> </script> </div> <div> <ul class="subNavList"> <li>Summary:&nbsp;</li> <li><a href="#nested.classes.inherited.from.class.java.util.AbstractMap">Nested</a>&nbsp;|&nbsp;</li> <li>Field&nbsp;|&nbsp;</li> <li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li> <li><a href="#method.summary">Method</a></li> </ul> <ul class="subNavList"> <li>Detail:&nbsp;</li> <li>Field&nbsp;|&nbsp;</li> <li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li> <li><a href="#method.detail">Method</a></li> </ul> </div> <a name="skip.navbar.top"> <!-- --> </a> </div> <!-- ========= END OF TOP NAVBAR ========= --> <!-- ======== START OF CLASS DATA ======== --> <div class="header"> <div class="subTitle">compact1, compact2, compact3</div> <div class="subTitle">java.util</div> <h2 title="Class HashMap" class="title">Class HashMap&lt;K,V&gt;</h2> </div> <div class="contentContainer"> <ul class="inheritance"> <li><a href="../../java/lang/Object.html" title="class in java.lang">java.lang.Object</a></li> <li> <ul class="inheritance"> <li><a href="../../java/util/AbstractMap.html" title="class in java.util">java.util.AbstractMap</a>&lt;K,V&gt;</li> <li> <ul class="inheritance"> <li>java.util.HashMap&lt;K,V&gt;</li> </ul> </li> </ul> </li> </ul> <div class="description"> <ul class="blockList"> <li class="blockList"> <dl> <dt><span class="paramLabel">Type Parameters:</span></dt> <dd><code>K</code> - the type of keys maintained by this map</dd> <dd><code>V</code> - the type of mapped values</dd> </dl> <dl> <dt>All Implemented Interfaces:</dt> <dd><a href="../../java/io/Serializable.html" title="interface in java.io">Serializable</a>, <a href="../../java/lang/Cloneable.html" title="interface in java.lang">Cloneable</a>, <a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;K,V&gt;</dd> </dl> <dl> <dt>Direct Known Subclasses:</dt> <dd><a href="../../java/util/LinkedHashMap.html" title="class in java.util">LinkedHashMap</a>, <a href="../../javax/print/attribute/standard/PrinterStateReasons.html" title="class in javax.print.attribute.standard">PrinterStateReasons</a></dd> </dl> <hr> <br> <pre>public class <span class="typeNameLabel">HashMap&lt;K,V&gt;</span>extends <a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;K,V&gt;implements <a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;K,V&gt;, <a href="../../java/lang/Cloneable.html" title="interface in java.lang">Cloneable</a>, <a href="../../java/io/Serializable.html" title="interface in java.io">Serializable</a></pre> <div class="block">Hash table based implementation of the <tt>Map</tt> interface. This implementation provides all of the optional map operations, and permits <tt>null</tt> values and the <tt>null</tt> key. (The <tt>HashMap</tt> class is roughly equivalent to <tt>Hashtable</tt>, except that it is unsynchronized and permits nulls.) This class makes no guarantees as to the order of the map; in particular, it does not guarantee that the order will remain constant over time. <p>This implementation provides constant-time performance for the basic operations (<tt>get</tt> and <tt>put</tt>), assuming the hash function disperses the elements properly among the buckets. Iteration over collection views requires time proportional to the "capacity" of the <tt>HashMap</tt> instance (the number of buckets) plus its size (the number of key-value mappings). Thus, it's very important not to set the initial capacity too high (or the load factor too low) if iteration performance is important. </p> <p>An instance of <tt>HashMap</tt> has two parameters that affect its performance: <i>initial capacity</i> and <i>load factor</i>. The <i>capacity</i> is the number of buckets in the hash table, and the initial capacity is simply the capacity at the time the hash table is created. The <i>load factor</i> is a measure of how full the hash table is allowed to get before its capacity is automatically increased. When the number of entries in the hash table exceeds the product of the load factor and the current capacity, the hash table is <i>rehashed</i> (that is, internal data structures are rebuilt) so that the hash table has approximately twice the number of buckets. </p> <p>As a general rule, the default load factor (.75) offers a good tradeoff between time and space costs. Higher values decrease the space overhead but increase the lookup cost (reflected in most of the operations of the <tt>HashMap</tt> class, including <tt>get</tt> and <tt>put</tt>). The expected number of entries in the map and its load factor should be taken into account when setting its initial capacity, so as to minimize the number of rehash operations. If the initial capacity is greater than the maximum number of entries divided by the load factor, no rehash operations will ever occur. </p> <p>If many mappings are to be stored in a <tt>HashMap</tt> instance, creating it with a sufficiently large capacity will allow the mappings to be stored more efficiently than letting it perform automatic rehashing as needed to grow the table. Note that using many keys with the same <code>hashCode()</code> is a sure way to slow down performance of any hash table. To ameliorate impact, when keys are <a href="../../java/lang/Comparable.html" title="interface in java.lang"><code>Comparable</code></a>, this class may use comparison order among keys to help break ties. </p> <p><strong>Note that this implementation is not synchronized.</strong> If multiple threads access a hash map concurrently, and at least one of the threads modifies the map structurally, it <i>must</i> be synchronized externally. (A structural modification is any operation that adds or deletes one or more mappings; merely changing the value associated with a key that an instance already contains is not a structural modification.) This is typically accomplished by synchronizing on some object that naturally encapsulates the map. If no such object exists, the map should be "wrapped" using the <a href="../../java/util/Collections.html#synchronizedMap-java.util.Map-"><code>Collections.synchronizedMap</code></a> method. This is best done at creation time, to prevent accidental unsynchronized access to the map:</p> <pre> Map m = Collections.synchronizedMap(new HashMap(...));</pre> <p>The iterators returned by all of this class's "collection view methods" are <i>fail-fast</i>: if the map is structurally modified at any time after the iterator is created, in any way except through the iterator's own <tt>remove</tt> method, the iterator will throw a <a href="../../java/util/ConcurrentModificationException.html" title="class in java.util"><code>ConcurrentModificationException</code></a>. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. </p> <p>Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw <tt>ConcurrentModificationException</tt> on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: <i>the fail-fast behavior of iterators should be used only to detect bugs.</i> </p> <p>This class is a member of the <a href="../../../technotes/guides/collections/index.html"> Java Collections Framework</a>.</p> </div> <dl> <dt><span class="simpleTagLabel">Since:</span></dt> <dd>1.2</dd> <dt><span class="seeLabel">See Also:</span></dt> <dd><a href="../../java/lang/Object.html#hashCode--"><code>Object.hashCode()</code></a>, <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a>, <a href="../../java/util/Map.html" title="interface in java.util"><code>Map</code></a>, <a href="../../java/util/TreeMap.html" title="class in java.util"><code>TreeMap</code></a>, <a href="../../java/util/Hashtable.html" title="class in java.util"><code>Hashtable</code></a>, <a href="../../serialized-form.html#java.util.HashMap">Serialized Form</a></dd> </dl> </li> </ul> </div> <div class="summary"> <ul class="blockList"> <li class="blockList"> <!-- ======== NESTED CLASS SUMMARY ======== --> <ul class="blockList"> <li class="blockList"><a name="nested.class.summary"> <!-- --> </a> <h3>Nested Class Summary</h3> <ul class="blockList"> <li class="blockList"><a name="nested.classes.inherited.from.class.java.util.AbstractMap"> <!-- --> </a> <h3>Nested classes/interfaces inherited from class&nbsp;java.util.<a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a></h3> <code><a href="../../java/util/AbstractMap.SimpleEntry.html" title="class in java.util">AbstractMap.SimpleEntry</a>&lt;<a href="../../java/util/AbstractMap.SimpleEntry.html" title="type parameter in AbstractMap.SimpleEntry">K</a>,<a href="../../java/util/AbstractMap.SimpleEntry.html" title="type parameter in AbstractMap.SimpleEntry">V</a>&gt;, <a href="../../java/util/AbstractMap.SimpleImmutableEntry.html" title="class in java.util">AbstractMap.SimpleImmutableEntry</a>&lt;<a href="../../java/util/AbstractMap.SimpleImmutableEntry.html" title="type parameter in AbstractMap.SimpleImmutableEntry">K</a>,<a href="../../java/util/AbstractMap.SimpleImmutableEntry.html" title="type parameter in AbstractMap.SimpleImmutableEntry">V</a>&gt;</code> </li> </ul> <ul class="blockList"> <li class="blockList"><a name="nested.classes.inherited.from.class.java.util.Map"> <!-- --> </a> <h3>Nested classes/interfaces inherited from interface&nbsp;java.util.<a href="../../java/util/Map.html" title="interface in java.util">Map</a></h3> <code><a href="../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../java/util/Map.Entry.html" title="type parameter in Map.Entry">K</a>,<a href="../../java/util/Map.Entry.html" title="type parameter in Map.Entry">V</a>&gt;</code> </li> </ul> </li> </ul> <!-- ======== CONSTRUCTOR SUMMARY ======== --> <ul class="blockList"> <li class="blockList"><a name="constructor.summary"> <!-- --> </a> <h3>Constructor Summary</h3> <table class="memberSummary" summary="Constructor Summary table, listing constructors, and an explanation" cellspacing="0" cellpadding="3" border="0"> <caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption> <tbody> <tr> <th class="colOne" scope="col">Constructor and Description</th> </tr> <tr class="altColor"> <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap--">HashMap</a></span>()</code> <div class="block">Constructs an empty <tt>HashMap</tt> with the default initial capacity (16) and the default load factor (0.75).</div> </td> </tr> <tr class="rowColor"> <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap-int-">HashMap</a></span>(int&nbsp;initialCapacity)</code> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and the default load factor (0.75).</div> </td> </tr> <tr class="altColor"> <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap-int-float-">HashMap</a></span>(int&nbsp;initialCapacity, float&nbsp;loadFactor)</code> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and load factor.</div> </td> </tr> <tr class="rowColor"> <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap-java.util.Map-">HashMap</a></span>(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</code> <div class="block">Constructs a new <tt>HashMap</tt> with the same mappings as the specified <tt>Map</tt>.</div> </td> </tr> </tbody> </table> </li> </ul> <!-- ========== METHOD SUMMARY =========== --> <ul class="blockList"> <li class="blockList"><a name="method.summary"> <!-- --> </a> <h3>Method Summary</h3> <table class="memberSummary" summary="Method Summary table, listing methods, and an explanation" cellspacing="0" cellpadding="3" border="0"> <caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption> <tbody> <tr> <th class="colFirst" scope="col">Modifier and Type</th> <th class="colLast" scope="col">Method and Description</th> </tr> <tr id="i0" class="altColor"> <td class="colFirst"><code>void</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#clear--">clear</a></span>()</code> <div class="block">Removes all of the mappings from this map.</div> </td> </tr> <tr id="i1" class="rowColor"> <td class="colFirst"><code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#clone--">clone</a></span>()</code> <div class="block">Returns a shallow copy of this <tt>HashMap</tt> instance: the keys and values themselves are not cloned.</div> </td> </tr> <tr id="i2" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#compute-K-java.util.function.BiFunction-">compute</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</code> <div class="block">Attempts to compute a mapping for the specified key and its current mapped value (or <code>null</code> if there is no current mapping). </div> </td> </tr> <tr id="i3" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#computeIfAbsent-K-java.util.function.Function-">computeIfAbsent</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/Function.html" title="interface in java.util.function">Function</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;mappingFunction)</code> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>), attempts to compute its value using the given mapping function and enters it into this map unless <code>null</code>.</div> </td> </tr> <tr id="i4" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#computeIfPresent-K-java.util.function.BiFunction-">computeIfPresent</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</code> <div class="block">If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.</div> </td> </tr> <tr id="i5" class="rowColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#containsKey-java.lang.Object-">containsKey</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</code> <div class="block">Returns <tt>true</tt> if this map contains a mapping for the specified key.</div> </td> </tr> <tr id="i6" class="altColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#containsValue-java.lang.Object-">containsValue</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</code> <div class="block">Returns <tt>true</tt> if this map maps one or more keys to the specified value.</div> </td> </tr> <tr id="i7" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&gt;</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#entrySet--">entrySet</a></span>()</code> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the mappings contained in this map.</div> </td> </tr> <tr id="i8" class="altColor"> <td class="colFirst"><code>void</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#forEach-java.util.function.BiConsumer-">forEach</a></span>(<a href="../../java/util/function/BiConsumer.html" title="interface in java.util.function">BiConsumer</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;action)</code> <div class="block">Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.</div> </td> </tr> <tr id="i9" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#get-java.lang.Object-">get</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</code> <div class="block">Returns the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key.</div> </td> </tr> <tr id="i10" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#getOrDefault-java.lang.Object-V-">getOrDefault</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;defaultValue)</code> <div class="block">Returns the value to which the specified key is mapped, or <code>defaultValue</code> if this map contains no mapping for the key. </div> </td> </tr> <tr id="i11" class="rowColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#isEmpty--">isEmpty</a></span>()</code> <div class="block">Returns <tt>true</tt> if this map contains no key-value mappings.</div> </td> </tr> <tr id="i12" class="altColor"> <td class="colFirst"><code><a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&gt;</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#keySet--">keySet</a></span>()</code> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the keys contained in this map.</div> </td> </tr> <tr id="i13" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#merge-K-V-java.util.function.BiFunction-">merge</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</code> <div class="block">If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.</div> </td> </tr> <tr id="i14" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#put-K-V-">put</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</code> <div class="block">Associates the specified value with the specified key in this map.</div> </td> </tr> <tr id="i15" class="rowColor"> <td class="colFirst"><code>void</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#putAll-java.util.Map-">putAll</a></span>(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</code> <div class="block">Copies all of the mappings from the specified map to this map.</div> </td> </tr> <tr id="i16" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#putIfAbsent-K-V-">putIfAbsent</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</code> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>) associates it with the given value and returns <code>null</code>, else returns the current value.</div> </td> </tr> <tr id="i17" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#remove-java.lang.Object-">remove</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</code> <div class="block">Removes the mapping for the specified key from this map if present.</div> </td> </tr> <tr id="i18" class="altColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#remove-java.lang.Object-java.lang.Object-">remove</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</code> <div class="block">Removes the entry for the specified key only if it is currently mapped to the specified value.</div> </td> </tr> <tr id="i19" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#replace-K-V-">replace</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</code> <div class="block">Replaces the entry for the specified key only if it is currently mapped to some value.</div> </td> </tr> <tr id="i20" class="altColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#replace-K-V-V-">replace</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;oldValue, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;newValue)</code> <div class="block">Replaces the entry for the specified key only if currently mapped to the specified value.</div> </td> </tr> <tr id="i21" class="rowColor"> <td class="colFirst"><code>void</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#replaceAll-java.util.function.BiFunction-">replaceAll</a></span>(<a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;function)</code> <div class="block">Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.</div> </td> </tr> <tr id="i22" class="altColor"> <td class="colFirst"><code>int</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#size--">size</a></span>()</code> <div class="block">Returns the number of key-value mappings in this map. </div> </td> </tr> <tr id="i23" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#values--">values</a></span>()</code> <div class="block">Returns a <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a> view of the values contained in this map.</div> </td> </tr> </tbody> </table> <ul class="blockList"> <li class="blockList"><a name="methods.inherited.from.class.java.util.AbstractMap"> <!-- --> </a> <h3>Methods inherited from class&nbsp;java.util.<a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a></h3> <code><a href="../../java/util/AbstractMap.html#equals-java.lang.Object-">equals</a>, <a href="../../java/util/AbstractMap.html#hashCode--">hashCode</a>, <a href="../../java/util/AbstractMap.html#toString--">toString</a></code> </li> </ul> <ul class="blockList"> <li class="blockList"><a name="methods.inherited.from.class.java.lang.Object"> <!-- --> </a> <h3>Methods inherited from class&nbsp;java.lang.<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> </h3> <code><a href="../../java/lang/Object.html#finalize--">finalize</a>, <a href="../../java/lang/Object.html#getClass--">getClass</a>, <a href="../../java/lang/Object.html#notify--">notify</a>, <a href="../../java/lang/Object.html#notifyAll--">notifyAll</a>, <a href="../../java/lang/Object.html#wait--">wait</a>, <a href="../../java/lang/Object.html#wait-long-">wait</a>, <a href="../../java/lang/Object.html#wait-long-int-">wait</a></code> </li> </ul> <ul class="blockList"> <li class="blockList"><a name="methods.inherited.from.class.java.util.Map"> <!-- --> </a> <h3>Methods inherited from interface&nbsp;java.util.<a href="../../java/util/Map.html" title="interface in java.util">Map</a></h3> <code><a href="../../java/util/Map.html#equals-java.lang.Object-">equals</a>, <a href="../../java/util/Map.html#hashCode--">hashCode</a></code> </li> </ul> </li> </ul> </li> </ul> </div> <div class="details"> <ul class="blockList"> <li class="blockList"> <!-- ========= CONSTRUCTOR DETAIL ======== --> <ul class="blockList"> <li class="blockList"><a name="constructor.detail"> <!-- --> </a> <h3>Constructor Detail</h3> <a name="HashMap-int-float-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>HashMap</h4> <pre>public&nbsp;HashMap(int&nbsp;initialCapacity, float&nbsp;loadFactor)</pre> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and load factor.</div> <dl> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>initialCapacity</code> - the initial capacity</dd> <dd><code>loadFactor</code> - the load factor</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the initial capacity is negative or the load factor is nonpositive</dd> </dl> </li> </ul> <a name="HashMap-int-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>HashMap</h4> <pre>public&nbsp;HashMap(int&nbsp;initialCapacity)</pre> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and the default load factor (0.75).</div> <dl> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>initialCapacity</code> - the initial capacity.</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the initial capacity is negative.</dd> </dl> </li> </ul> <a name="HashMap--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>HashMap</h4> <pre>public&nbsp;HashMap()</pre> <div class="block">Constructs an empty <tt>HashMap</tt> with the default initial capacity (16) and the default load factor (0.75).</div> </li> </ul> <a name="HashMap-java.util.Map-"> <!-- --> </a> <ul class="blockListLast"> <li class="blockList"> <h4>HashMap</h4> <pre>public&nbsp;HashMap(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</pre> <div class="block">Constructs a new <tt>HashMap</tt> with the same mappings as the specified <tt>Map</tt>. The <tt>HashMap</tt> is created with default load factor (0.75) and an initial capacity sufficient to hold the mappings in the specified <tt>Map</tt>.</div> <dl> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>m</code> - the map whose mappings are to be placed in this map</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified map is null</dd> </dl> </li> </ul> </li> </ul> <!-- ============ METHOD DETAIL ========== --> <ul class="blockList"> <li class="blockList"><a name="method.detail"> <!-- --> </a> <h3>Method Detail</h3> <a name="size--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>size</h4> <pre>public&nbsp;int&nbsp;size()</pre> <div class="block">Returns the number of key-value mappings in this map.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#size--">size</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#size--">size</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the number of key-value mappings in this map</dd> </dl> </li> </ul> <a name="isEmpty--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>isEmpty</h4> <pre>public&nbsp;boolean&nbsp;isEmpty()</pre> <div class="block">Returns <tt>true</tt> if this map contains no key-value mappings. </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#isEmpty--">isEmpty</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#isEmpty--">isEmpty</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><tt>true</tt> if this map contains no key-value mappings</dd> </dl> </li> </ul> <a name="get-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>get</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;get(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</pre> <div class="block">Returns the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key. <p>More formally, if this map contains a mapping from a key <code>k</code> to a value <code>v</code> such that <code>(key==null ? k==null : key.equals(k))</code>, then this method returns <code>v</code>; otherwise it returns <code>null</code>. (There can be at most one such mapping.) </p> <p>A return value of <code>null</code> does not <i>necessarily</i> indicate that the map contains no mapping for the key; it's also possible that the map explicitly maps the key to <code>null</code>. The <a href="../../java/util/HashMap.html#containsKey-java.lang.Object-"><code>containsKey</code></a> operation may be used to distinguish these two cases.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#get-java.lang.Object-">get</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#get-java.lang.Object-">get</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - the key whose associated value is to be returned</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key</dd> <dt><span class="seeLabel">See Also:</span></dt> <dd><a href="../../java/util/HashMap.html#put-K-V-"><code>put(Object, Object)</code></a></dd> </dl> </li> </ul> <a name="containsKey-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>containsKey</h4> <pre>public&nbsp;boolean&nbsp;containsKey(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</pre> <div class="block">Returns <tt>true</tt> if this map contains a mapping for the specified key.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#containsKey-java.lang.Object-">containsKey</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#containsKey-java.lang.Object-">containsKey</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - The key whose presence in this map is to be tested</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><tt>true</tt> if this map contains a mapping for the specified key.</dd> </dl> </li> </ul> <a name="put-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="put-K-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>put</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;put(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</pre> <div class="block">Associates the specified value with the specified key in this map. If the map previously contained a mapping for the key, the old value is replaced.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#put-K-V-">put</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#put-K-V-">put</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>value</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with <tt>key</tt>, or <tt>null</tt> if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return can also indicate that the map previously associated <tt>null</tt> with <tt>key</tt>.)</dd> </dl> </li> </ul> <a name="putAll-java.util.Map-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>putAll</h4> <pre>public&nbsp;void&nbsp;putAll(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</pre> <div class="block">Copies all of the mappings from the specified map to this map. These mappings will replace any mappings that this map had for any of the keys currently in the specified map.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#putAll-java.util.Map-">putAll</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#putAll-java.util.Map-">putAll</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>m</code> - mappings to be stored in this map</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified map is null</dd> </dl> </li> </ul> <a name="remove-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>remove</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;remove(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</pre> <div class="block">Removes the mapping for the specified key from this map if present.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#remove-java.lang.Object-">remove</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#remove-java.lang.Object-">remove</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key whose mapping is to be removed from the map</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with <tt>key</tt>, or <tt>null</tt> if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return can also indicate that the map previously associated <tt>null</tt> with <tt>key</tt>.)</dd> </dl> </li> </ul> <a name="clear--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>clear</h4> <pre>public&nbsp;void&nbsp;clear()</pre> <div class="block">Removes all of the mappings from this map. The map will be empty after this call returns.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#clear--">clear</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#clear--">clear</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> </dl> </li> </ul> <a name="containsValue-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>containsValue</h4> <pre>public&nbsp;boolean&nbsp;containsValue(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</pre> <div class="block">Returns <tt>true</tt> if this map maps one or more keys to the specified value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#containsValue-java.lang.Object-">containsValue</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#containsValue-java.lang.Object-">containsValue</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>value</code> - value whose presence in this map is to be tested</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><tt>true</tt> if this map maps one or more keys to the specified value</dd> </dl> </li> </ul> <a name="keySet--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>keySet</h4> <pre>public&nbsp;<a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&gt;&nbsp;keySet()</pre> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own <tt>remove</tt> operation), the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#keySet--">keySet</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#keySet--">keySet</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a set view of the keys contained in this map</dd> </dl> </li> </ul> <a name="values--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>values</h4> <pre>public&nbsp;<a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;values()</pre> <div class="block">Returns a <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a> view of the values contained in this map. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. If the map is modified while an iteration over the collection is in progress (except through the iterator's own <tt>remove</tt> operation), the results of the iteration are undefined. The collection supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Collection.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#values--">values</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#values--">values</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a view of the values contained in this map</dd> </dl> </li> </ul> <a name="entrySet--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>entrySet</h4> <pre>public&nbsp;<a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&gt;&nbsp;entrySet()</pre> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the mappings contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own <tt>remove</tt> operation, or through the <tt>setValue</tt> operation on a map entry returned by the iterator) the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#entrySet--">entrySet</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#entrySet--">entrySet</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a set view of the mappings contained in this map</dd> </dl> </li> </ul> <a name="getOrDefault-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="getOrDefault-java.lang.Object-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>getOrDefault</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;getOrDefault(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;defaultValue)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#getOrDefault-java.lang.Object-V-">Map</a></code></span> </div> <div class="block">Returns the value to which the specified key is mapped, or <code>defaultValue</code> if this map contains no mapping for the key.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#getOrDefault-java.lang.Object-V-">getOrDefault</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - the key whose associated value is to be returned</dd> <dd><code>defaultValue</code> - the default mapping of the key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the value to which the specified key is mapped, or <code>defaultValue</code> if this map contains no mapping for the key</dd> </dl> </li> </ul> <a name="putIfAbsent-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="putIfAbsent-K-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>putIfAbsent</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;putIfAbsent(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#putIfAbsent-K-V-">Map</a></code></span> </div> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>) associates it with the given value and returns <code>null</code>, else returns the current value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#putIfAbsent-K-V-">putIfAbsent</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>value</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with the specified key, or <code>null</code> if there was no mapping for the key. (A <code>null</code> return can also indicate that the map previously associated <code>null</code> with the key, if the implementation supports null values.)</dd> </dl> </li> </ul> <a name="remove-java.lang.Object-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>remove</h4> <pre>public&nbsp;boolean&nbsp;remove(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#remove-java.lang.Object-java.lang.Object-">Map</a></code></span> </div> <div class="block">Removes the entry for the specified key only if it is currently mapped to the specified value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#remove-java.lang.Object-java.lang.Object-">remove</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is associated</dd> <dd><code>value</code> - value expected to be associated with the specified key </dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><code>true</code> if the value was removed</dd> </dl> </li> </ul> <a name="replace-java.lang.Object-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="replace-K-V-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>replace</h4> <pre>public&nbsp;boolean&nbsp;replace(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;oldValue, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;newValue)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#replace-K-V-V-">Map</a></code></span> </div> <div class="block">Replaces the entry for the specified key only if currently mapped to the specified value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#replace-K-V-V-">replace</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is associated</dd> <dd><code>oldValue</code> - value expected to be associated with the specified key</dd> <dd><code>newValue</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><code>true</code> if the value was replaced</dd> </dl> </li> </ul> <a name="replace-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="replace-K-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>replace</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;replace(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#replace-K-V-">Map</a></code></span> </div> <div class="block">Replaces the entry for the specified key only if it is currently mapped to some value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#replace-K-V-">replace</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is associated</dd> <dd><code>value</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with the specified key, or <code>null</code> if there was no mapping for the key. (A <code>null</code> return can also indicate that the map previously associated <code>null</code> with the key, if the implementation supports null values.)</dd> </dl> </li> </ul> <a name="computeIfAbsent-java.lang.Object-java.util.function.Function-"> <!-- --> </a><a name="computeIfAbsent-K-java.util.function.Function-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>computeIfAbsent</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;computeIfAbsent(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/Function.html" title="interface in java.util.function">Function</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;mappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#computeIfAbsent-K-java.util.function.Function-">Map</a></code></span> </div> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>), attempts to compute its value using the given mapping function and enters it into this map unless <code>null</code>. <p>If the function returns <code>null</code> no mapping is recorded. If the function itself throws an (unchecked) exception, the exception is rethrown, and no mapping is recorded. The most common usage is to construct a new object serving as an initial mapped value or memoized result, as in: </p> <pre> <code> map.computeIfAbsent(key, k -&gt; new Value(f(k))); </code></pre> <p>Or to implement a multi-value map, <code>Map&lt;K,Collection&lt;V&gt;&gt;</code>, supporting multiple values per key: </p> <pre> <code> map.computeIfAbsent(key, k -&gt; new HashSet&lt;V&gt;()).add(v); </code></pre> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#computeIfAbsent-K-java.util.function.Function-">computeIfAbsent</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>mappingFunction</code> - the function to compute a value</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the current (existing or computed) value associated with the specified key, or null if the computed value is null</dd> </dl> </li> </ul> <a name="computeIfPresent-java.lang.Object-java.util.function.BiFunction-"> <!-- --> </a><a name="computeIfPresent-K-java.util.function.BiFunction-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>computeIfPresent</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;computeIfPresent(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value. <p>If the function returns <code>null</code>, the mapping is removed. If the function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-">computeIfPresent</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>remappingFunction</code> - the function to compute a value</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the new value associated with the specified key, or null if none</dd> </dl> </li> </ul> <a name="compute-java.lang.Object-java.util.function.BiFunction-"> <!-- --> </a><a name="compute-K-java.util.function.BiFunction-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>compute</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;compute(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#compute-K-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">Attempts to compute a mapping for the specified key and its current mapped value (or <code>null</code> if there is no current mapping). For example, to either create or append a <code>String</code> msg to a value mapping: <pre> <code> map.compute(key, (k, v) -&gt; (v == null) ? msg : v.concat(msg))</code></pre> (Method <a href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-"><code>merge()</code></a> is often simpler to use for such purposes.) <p>If the function returns <code>null</code>, the mapping is removed (or remains absent if initially absent). If the function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#compute-K-java.util.function.BiFunction-">compute</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>remappingFunction</code> - the function to compute a value</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the new value associated with the specified key, or null if none</dd> </dl> </li> </ul> <a name="merge-java.lang.Object-java.lang.Object-java.util.function.BiFunction-"> <!-- --> </a><a name="merge-K-V-java.util.function.BiFunction-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>merge</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;merge(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value. Otherwise, replaces the associated value with the results of the given remapping function, or removes if the result is <code>null</code>. This method may be of use when combining multiple mapped values for a key. For example, to either create or append a <code>String msg</code> to a value mapping: <pre> <code> map.merge(key, msg, String::concat) </code></pre> <p>If the function returns <code>null</code> the mapping is removed. If the function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-">merge</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the resulting value is to be associated </dd> <dd><code>value</code> - the non-null value to be merged with the existing value associated with the key or, if no existing value or a null value is associated with the key, to be associated with the key</dd> <dd><code>remappingFunction</code> - the function to recompute a value if present</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the new value associated with the specified key, or null if no value is associated with the key</dd> </dl> </li> </ul> <a name="forEach-java.util.function.BiConsumer-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>forEach</h4> <pre>public&nbsp;void&nbsp;forEach(<a href="../../java/util/function/BiConsumer.html" title="interface in java.util.function">BiConsumer</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;action)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#forEach-java.util.function.BiConsumer-">Map</a></code></span> </div> <div class="block">Performs the given action for each entry in this map until all entries have been processed or the action throws an exception. Unless otherwise specified by the implementing class, actions are performed in the order of entry set iteration (if an iteration order is specified.) Exceptions thrown by the action are relayed to the caller.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#forEach-java.util.function.BiConsumer-">forEach</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>action</code> - The action to be performed for each entry</dd> </dl> </li> </ul> <a name="replaceAll-java.util.function.BiFunction-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>replaceAll</h4> <pre>public&nbsp;void&nbsp;replaceAll(<a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;function)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#replaceAll-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception. Exceptions thrown by the function are relayed to the caller.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#replaceAll-java.util.function.BiFunction-">replaceAll</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>function</code> - the function to apply to each entry</dd> </dl> </li> </ul> <a name="clone--"> <!-- --> </a> <ul class="blockListLast"> <li class="blockList"> <h4>clone</h4> <pre>public&nbsp;<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;clone()</pre> <div class="block">Returns a shallow copy of this <tt>HashMap</tt> instance: the keys and values themselves are not cloned.</div> <dl> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#clone--">clone</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a shallow copy of this map</dd> <dt><span class="seeLabel">See Also:</span></dt> <dd><a href="../../java/lang/Cloneable.html" title="interface in java.lang"><code>Cloneable</code></a></dd> </dl> </li> </ul> </li> </ul> </li> </ul> </div> </div> <!-- ========= END OF CLASS DATA ========= --> <!-- ======= START OF BOTTOM NAVBAR ====== --> <div class="bottomNav"><a name="navbar.bottom"> <!-- --> </a> <div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div> <a name="navbar.bottom.firstrow"> <!-- --> </a> <ul class="navList" title="Navigation"> <li><a href="../../overview-summary.html">Overview</a></li> <li><a href="package-summary.html">Package</a></li> <li class="navBarCell1Rev">Class</li> <li><a href="class-use/HashMap.html">Use</a></li> <li><a href="package-tree.html">Tree</a></li> <li><a href="../../deprecated-list.html">Deprecated</a></li> <li><a href="../../index-files/index-1.html">Index</a></li> <li><a href="../../help-doc.html">Help</a></li> </ul> <div class="aboutLanguage"><strong>Javaâ„¢&nbsp;Platform<br>Standard&nbsp;Ed.&nbsp;8</strong></div> </div> <div class="subNav"> <ul class="navList"> <li><a href="../../java/util/GregorianCalendar.html" title="class in java.util"><span class="typeNameLink">Prev&nbsp;Class</span></a></li> <li><a href="../../java/util/HashSet.html" title="class in java.util"><span class="typeNameLink">Next&nbsp;Class</span></a></li> </ul> <ul class="navList"> <li><a href="../../index.html?java/util/HashMap.html" target="_top">Frames</a></li> <li><a href="HashMap.html" target="_top">No&nbsp;Frames</a></li> </ul> <ul class="navList" id="allclasses_navbar_bottom" style="display: block;"> <li><a href="../../allclasses-noframe.html">All&nbsp;Classes</a></li> </ul> <div> <script type="text/javascript"> <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if (window == top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } // --> </script> </div> <div> <ul class="subNavList"> <li>Summary:&nbsp;</li> <li><a href="#nested.classes.inherited.from.class.java.util.AbstractMap">Nested</a>&nbsp;|&nbsp;</li> <li>Field&nbsp;|&nbsp;</li> <li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li> <li><a href="#method.summary">Method</a></li> </ul> <ul class="subNavList"> <li>Detail:&nbsp;</li> <li>Field&nbsp;|&nbsp;</li> <li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li> <li><a href="#method.detail">Method</a></li> </ul> </div> <a name="skip.navbar.bottom"> <!-- --> </a> </div> <!-- ======== END OF BOTTOM NAVBAR ======= --> <p class="legalCopy"><small> <font size="-1"> <a href="http://bugreport.sun.com/bugreport/">Submit a bug or feature</a> <br>For further API reference and developer documentation, see <a href="https://docs.oracle.com/javase/8/docs/index.html" target="_blank">Java SE Documentation</a>. That documentation contains more detailed, developer-targeted descriptions, with conceptual overviews, definitions of terms, workarounds, and working code examples.<br> <a href="../../../legal/cpyr.html">Copyright</a> Â© 1993, 2019, Oracle and/or its affiliates. All rights reserved. Use is subject to <a href="http://download.oracle.com/otndocs/jcp/java_se-8-mrel-spec/license.html">license terms</a>. Also see the <a target="_blank" href="http://www.oracle.com/technetwork/java/redist-137594.html">documentation redistribution policy</a>. </font> </small></p> <!-- Start SiteCatalyst code --> <script type="application/javascript" src="https://www.oracleimg.com/us/assets/metrics/ora_docs.js"></script> <script src="https://www.oracleimg.com/us/assets/metrics/ora_code_docs.js"></script> <script src="https://www.oracleimg.com/us/assets/metrics/ora_code.js"></script> <!-- End SiteCatalyst code --> <noscript> <p>Scripting on this page tracks web page traffic, but does not change the content in any way.</p> </noscript></body>
]

html{
  lang = (en:)
  class = (gr__docs_oracle_com:)
} : [
 <script type="text/javascript"> </script> <noscript> <div>JavaScript is disabled on your browser.</div> </noscript> <!-- ========= START OF TOP NAVBAR ======= --> <div class="topNav"><a name="navbar.top"> <!-- --> </a> <div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div> <a name="navbar.top.firstrow"> <!-- --> </a> <ul class="navList" title="Navigation"> <li><a href="../../overview-summary.html">Overview</a></li> <li><a href="package-summary.html">Package</a></li> <li class="navBarCell1Rev">Class</li> <li><a href="class-use/HashMap.html">Use</a></li> <li><a href="package-tree.html">Tree</a></li> <li><a href="../../deprecated-list.html">Deprecated</a></li> <li><a href="../../index-files/index-1.html">Index</a></li> <li><a href="../../help-doc.html">Help</a></li> </ul> <div class="aboutLanguage"><strong>Javaâ„¢&nbsp;Platform<br>Standard&nbsp;Ed.&nbsp;8</strong></div> </div> <div class="subNav"> <ul class="navList"> <li><a href="../../java/util/GregorianCalendar.html" title="class in java.util"><span class="typeNameLink">Prev&nbsp;Class</span></a></li> <li><a href="../../java/util/HashSet.html" title="class in java.util"><span class="typeNameLink">Next&nbsp;Class</span></a></li> </ul> <ul class="navList"> <li><a href="../../index.html?java/util/HashMap.html" target="_top">Frames</a></li> <li><a href="HashMap.html" target="_top">No&nbsp;Frames</a></li> </ul> <ul class="navList" id="allclasses_navbar_top" style="display: block;"> <li><a href="../../allclasses-noframe.html">All&nbsp;Classes</a></li> </ul> <div> <script type="text/javascript"> </script> </div> <div> <ul class="subNavList"> <li>Summary:&nbsp;</li> <li><a href="#nested.classes.inherited.from.class.java.util.AbstractMap">Nested</a>&nbsp;|&nbsp;</li> <li>Field&nbsp;|&nbsp;</li> <li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li> <li><a href="#method.summary">Method</a></li> </ul> <ul class="subNavList"> <li>Detail:&nbsp;</li> <li>Field&nbsp;|&nbsp;</li> <li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li> <li><a href="#method.detail">Method</a></li> </ul> </div> <a name="skip.navbar.top"> <!-- --> </a> </div> <!-- ========= END OF TOP NAVBAR ========= --> <!-- ======== START OF CLASS DATA ======== --> <div class="header"> <div class="subTitle">compact1, compact2, compact3</div> <div class="subTitle">java.util</div> <h2 title="Class HashMap" class="title">Class HashMap&lt;K,V&gt;</h2> </div> <div class="contentContainer"> <ul class="inheritance"> <li><a href="../../java/lang/Object.html" title="class in java.lang">java.lang.Object</a></li> <li> <ul class="inheritance"> <li><a href="../../java/util/AbstractMap.html" title="class in java.util">java.util.AbstractMap</a>&lt;K,V&gt;</li> <li> <ul class="inheritance"> <li>java.util.HashMap&lt;K,V&gt;</li> </ul> </li> </ul> </li> </ul> <div class="description"> <ul class="blockList"> <li class="blockList"> <dl> <dt><span class="paramLabel">Type Parameters:</span></dt> <dd><code>K</code> - the type of keys maintained by this map</dd> <dd><code>V</code> - the type of mapped values</dd> </dl> <dl> <dt>All Implemented Interfaces:</dt> <dd><a href="../../java/io/Serializable.html" title="interface in java.io">Serializable</a>, <a href="../../java/lang/Cloneable.html" title="interface in java.lang">Cloneable</a>, <a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;K,V&gt;</dd> </dl> <dl> <dt>Direct Known Subclasses:</dt> <dd><a href="../../java/util/LinkedHashMap.html" title="class in java.util">LinkedHashMap</a>, <a href="../../javax/print/attribute/standard/PrinterStateReasons.html" title="class in javax.print.attribute.standard">PrinterStateReasons</a></dd> </dl> <hr> <br> <pre>public class <span class="typeNameLabel">HashMap&lt;K,V&gt;</span>extends <a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;K,V&gt;implements <a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;K,V&gt;, <a href="../../java/lang/Cloneable.html" title="interface in java.lang">Cloneable</a>, <a href="../../java/io/Serializable.html" title="interface in java.io">Serializable</a></pre> <div class="block">Hash table based implementation of the <tt>Map</tt> interface. This implementation provides all of the optional map operations, and permits <tt>null</tt> values and the <tt>null</tt> key. (The <tt>HashMap</tt> class is roughly equivalent to <tt>Hashtable</tt>, except that it is unsynchronized and permits nulls.) This class makes no guarantees as to the order of the map; in particular, it does not guarantee that the order will remain constant over time. <p>This implementation provides constant-time performance for the basic operations (<tt>get</tt> and <tt>put</tt>), assuming the hash function disperses the elements properly among the buckets. Iteration over collection views requires time proportional to the "capacity" of the <tt>HashMap</tt> instance (the number of buckets) plus its size (the number of key-value mappings). Thus, it's very important not to set the initial capacity too high (or the load factor too low) if iteration performance is important. </p> <p>An instance of <tt>HashMap</tt> has two parameters that affect its performance: <i>initial capacity</i> and <i>load factor</i>. The <i>capacity</i> is the number of buckets in the hash table, and the initial capacity is simply the capacity at the time the hash table is created. The <i>load factor</i> is a measure of how full the hash table is allowed to get before its capacity is automatically increased. When the number of entries in the hash table exceeds the product of the load factor and the current capacity, the hash table is <i>rehashed</i> (that is, internal data structures are rebuilt) so that the hash table has approximately twice the number of buckets. </p> <p>As a general rule, the default load factor (.75) offers a good tradeoff between time and space costs. Higher values decrease the space overhead but increase the lookup cost (reflected in most of the operations of the <tt>HashMap</tt> class, including <tt>get</tt> and <tt>put</tt>). The expected number of entries in the map and its load factor should be taken into account when setting its initial capacity, so as to minimize the number of rehash operations. If the initial capacity is greater than the maximum number of entries divided by the load factor, no rehash operations will ever occur. </p> <p>If many mappings are to be stored in a <tt>HashMap</tt> instance, creating it with a sufficiently large capacity will allow the mappings to be stored more efficiently than letting it perform automatic rehashing as needed to grow the table. Note that using many keys with the same <code>hashCode()</code> is a sure way to slow down performance of any hash table. To ameliorate impact, when keys are <a href="../../java/lang/Comparable.html" title="interface in java.lang"><code>Comparable</code></a>, this class may use comparison order among keys to help break ties. </p> <p><strong>Note that this implementation is not synchronized.</strong> If multiple threads access a hash map concurrently, and at least one of the threads modifies the map structurally, it <i>must</i> be synchronized externally. (A structural modification is any operation that adds or deletes one or more mappings; merely changing the value associated with a key that an instance already contains is not a structural modification.) This is typically accomplished by synchronizing on some object that naturally encapsulates the map. If no such object exists, the map should be "wrapped" using the <a href="../../java/util/Collections.html#synchronizedMap-java.util.Map-"><code>Collections.synchronizedMap</code></a> method. This is best done at creation time, to prevent accidental unsynchronized access to the map:</p> <pre> Map m = Collections.synchronizedMap(new HashMap(...));</pre> <p>The iterators returned by all of this class's "collection view methods" are <i>fail-fast</i>: if the map is structurally modified at any time after the iterator is created, in any way except through the iterator's own <tt>remove</tt> method, the iterator will throw a <a href="../../java/util/ConcurrentModificationException.html" title="class in java.util"><code>ConcurrentModificationException</code></a>. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. </p> <p>Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw <tt>ConcurrentModificationException</tt> on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: <i>the fail-fast behavior of iterators should be used only to detect bugs.</i> </p> <p>This class is a member of the <a href="../../../technotes/guides/collections/index.html"> Java Collections Framework</a>.</p> </div> <dl> <dt><span class="simpleTagLabel">Since:</span></dt> <dd>1.2</dd> <dt><span class="seeLabel">See Also:</span></dt> <dd><a href="../../java/lang/Object.html#hashCode--"><code>Object.hashCode()</code></a>, <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a>, <a href="../../java/util/Map.html" title="interface in java.util"><code>Map</code></a>, <a href="../../java/util/TreeMap.html" title="class in java.util"><code>TreeMap</code></a>, <a href="../../java/util/Hashtable.html" title="class in java.util"><code>Hashtable</code></a>, <a href="../../serialized-form.html#java.util.HashMap">Serialized Form</a></dd> </dl> </li> </ul> </div> <div class="summary"> <ul class="blockList"> <li class="blockList"> <!-- ======== NESTED CLASS SUMMARY ======== --> <ul class="blockList"> <li class="blockList"><a name="nested.class.summary"> <!-- --> </a> <h3>Nested Class Summary</h3> <ul class="blockList"> <li class="blockList"><a name="nested.classes.inherited.from.class.java.util.AbstractMap"> <!-- --> </a> <h3>Nested classes/interfaces inherited from class&nbsp;java.util.<a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a></h3> <code><a href="../../java/util/AbstractMap.SimpleEntry.html" title="class in java.util">AbstractMap.SimpleEntry</a>&lt;<a href="../../java/util/AbstractMap.SimpleEntry.html" title="type parameter in AbstractMap.SimpleEntry">K</a>,<a href="../../java/util/AbstractMap.SimpleEntry.html" title="type parameter in AbstractMap.SimpleEntry">V</a>&gt;, <a href="../../java/util/AbstractMap.SimpleImmutableEntry.html" title="class in java.util">AbstractMap.SimpleImmutableEntry</a>&lt;<a href="../../java/util/AbstractMap.SimpleImmutableEntry.html" title="type parameter in AbstractMap.SimpleImmutableEntry">K</a>,<a href="../../java/util/AbstractMap.SimpleImmutableEntry.html" title="type parameter in AbstractMap.SimpleImmutableEntry">V</a>&gt;</code> </li> </ul> <ul class="blockList"> <li class="blockList"><a name="nested.classes.inherited.from.class.java.util.Map"> <!-- --> </a> <h3>Nested classes/interfaces inherited from interface&nbsp;java.util.<a href="../../java/util/Map.html" title="interface in java.util">Map</a></h3> <code><a href="../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../java/util/Map.Entry.html" title="type parameter in Map.Entry">K</a>,<a href="../../java/util/Map.Entry.html" title="type parameter in Map.Entry">V</a>&gt;</code> </li> </ul> </li> </ul> <!-- ======== CONSTRUCTOR SUMMARY ======== --> <ul class="blockList"> <li class="blockList"><a name="constructor.summary"> <!-- --> </a> <h3>Constructor Summary</h3> <table class="memberSummary" summary="Constructor Summary table, listing constructors, and an explanation" cellspacing="0" cellpadding="3" border="0"> <caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption> <tbody> <tr> <th class="colOne" scope="col">Constructor and Description</th> </tr> <tr class="altColor"> <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap--">HashMap</a></span>()</code> <div class="block">Constructs an empty <tt>HashMap</tt> with the default initial capacity (16) and the default load factor (0.75).</div> </td> </tr> <tr class="rowColor"> <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap-int-">HashMap</a></span>(int&nbsp;initialCapacity)</code> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and the default load factor (0.75).</div> </td> </tr> <tr class="altColor"> <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap-int-float-">HashMap</a></span>(int&nbsp;initialCapacity, float&nbsp;loadFactor)</code> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and load factor.</div> </td> </tr> <tr class="rowColor"> <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap-java.util.Map-">HashMap</a></span>(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</code> <div class="block">Constructs a new <tt>HashMap</tt> with the same mappings as the specified <tt>Map</tt>.</div> </td> </tr> </tbody> </table> </li> </ul> <!-- ========== METHOD SUMMARY =========== --> <ul class="blockList"> <li class="blockList"><a name="method.summary"> <!-- --> </a> <h3>Method Summary</h3> <table class="memberSummary" summary="Method Summary table, listing methods, and an explanation" cellspacing="0" cellpadding="3" border="0"> <caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption> <tbody> <tr> <th class="colFirst" scope="col">Modifier and Type</th> <th class="colLast" scope="col">Method and Description</th> </tr> <tr id="i0" class="altColor"> <td class="colFirst"><code>void</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#clear--">clear</a></span>()</code> <div class="block">Removes all of the mappings from this map.</div> </td> </tr> <tr id="i1" class="rowColor"> <td class="colFirst"><code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#clone--">clone</a></span>()</code> <div class="block">Returns a shallow copy of this <tt>HashMap</tt> instance: the keys and values themselves are not cloned.</div> </td> </tr> <tr id="i2" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#compute-K-java.util.function.BiFunction-">compute</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</code> <div class="block">Attempts to compute a mapping for the specified key and its current mapped value (or <code>null</code> if there is no current mapping). </div> </td> </tr> <tr id="i3" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#computeIfAbsent-K-java.util.function.Function-">computeIfAbsent</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/Function.html" title="interface in java.util.function">Function</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;mappingFunction)</code> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>), attempts to compute its value using the given mapping function and enters it into this map unless <code>null</code>.</div> </td> </tr> <tr id="i4" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#computeIfPresent-K-java.util.function.BiFunction-">computeIfPresent</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</code> <div class="block">If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.</div> </td> </tr> <tr id="i5" class="rowColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#containsKey-java.lang.Object-">containsKey</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</code> <div class="block">Returns <tt>true</tt> if this map contains a mapping for the specified key.</div> </td> </tr> <tr id="i6" class="altColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#containsValue-java.lang.Object-">containsValue</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</code> <div class="block">Returns <tt>true</tt> if this map maps one or more keys to the specified value.</div> </td> </tr> <tr id="i7" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&gt;</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#entrySet--">entrySet</a></span>()</code> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the mappings contained in this map.</div> </td> </tr> <tr id="i8" class="altColor"> <td class="colFirst"><code>void</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#forEach-java.util.function.BiConsumer-">forEach</a></span>(<a href="../../java/util/function/BiConsumer.html" title="interface in java.util.function">BiConsumer</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;action)</code> <div class="block">Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.</div> </td> </tr> <tr id="i9" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#get-java.lang.Object-">get</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</code> <div class="block">Returns the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key.</div> </td> </tr> <tr id="i10" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#getOrDefault-java.lang.Object-V-">getOrDefault</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;defaultValue)</code> <div class="block">Returns the value to which the specified key is mapped, or <code>defaultValue</code> if this map contains no mapping for the key. </div> </td> </tr> <tr id="i11" class="rowColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#isEmpty--">isEmpty</a></span>()</code> <div class="block">Returns <tt>true</tt> if this map contains no key-value mappings.</div> </td> </tr> <tr id="i12" class="altColor"> <td class="colFirst"><code><a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&gt;</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#keySet--">keySet</a></span>()</code> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the keys contained in this map.</div> </td> </tr> <tr id="i13" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#merge-K-V-java.util.function.BiFunction-">merge</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</code> <div class="block">If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.</div> </td> </tr> <tr id="i14" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#put-K-V-">put</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</code> <div class="block">Associates the specified value with the specified key in this map.</div> </td> </tr> <tr id="i15" class="rowColor"> <td class="colFirst"><code>void</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#putAll-java.util.Map-">putAll</a></span>(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</code> <div class="block">Copies all of the mappings from the specified map to this map.</div> </td> </tr> <tr id="i16" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#putIfAbsent-K-V-">putIfAbsent</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</code> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>) associates it with the given value and returns <code>null</code>, else returns the current value.</div> </td> </tr> <tr id="i17" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#remove-java.lang.Object-">remove</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</code> <div class="block">Removes the mapping for the specified key from this map if present.</div> </td> </tr> <tr id="i18" class="altColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#remove-java.lang.Object-java.lang.Object-">remove</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</code> <div class="block">Removes the entry for the specified key only if it is currently mapped to the specified value.</div> </td> </tr> <tr id="i19" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#replace-K-V-">replace</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</code> <div class="block">Replaces the entry for the specified key only if it is currently mapped to some value.</div> </td> </tr> <tr id="i20" class="altColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#replace-K-V-V-">replace</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;oldValue, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;newValue)</code> <div class="block">Replaces the entry for the specified key only if currently mapped to the specified value.</div> </td> </tr> <tr id="i21" class="rowColor"> <td class="colFirst"><code>void</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#replaceAll-java.util.function.BiFunction-">replaceAll</a></span>(<a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;function)</code> <div class="block">Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.</div> </td> </tr> <tr id="i22" class="altColor"> <td class="colFirst"><code>int</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#size--">size</a></span>()</code> <div class="block">Returns the number of key-value mappings in this map. </div> </td> </tr> <tr id="i23" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#values--">values</a></span>()</code> <div class="block">Returns a <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a> view of the values contained in this map.</div> </td> </tr> </tbody> </table> <ul class="blockList"> <li class="blockList"><a name="methods.inherited.from.class.java.util.AbstractMap"> <!-- --> </a> <h3>Methods inherited from class&nbsp;java.util.<a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a></h3> <code><a href="../../java/util/AbstractMap.html#equals-java.lang.Object-">equals</a>, <a href="../../java/util/AbstractMap.html#hashCode--">hashCode</a>, <a href="../../java/util/AbstractMap.html#toString--">toString</a></code> </li> </ul> <ul class="blockList"> <li class="blockList"><a name="methods.inherited.from.class.java.lang.Object"> <!-- --> </a> <h3>Methods inherited from class&nbsp;java.lang.<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> </h3> <code><a href="../../java/lang/Object.html#finalize--">finalize</a>, <a href="../../java/lang/Object.html#getClass--">getClass</a>, <a href="../../java/lang/Object.html#notify--">notify</a>, <a href="../../java/lang/Object.html#notifyAll--">notifyAll</a>, <a href="../../java/lang/Object.html#wait--">wait</a>, <a href="../../java/lang/Object.html#wait-long-">wait</a>, <a href="../../java/lang/Object.html#wait-long-int-">wait</a></code> </li> </ul> <ul class="blockList"> <li class="blockList"><a name="methods.inherited.from.class.java.util.Map"> <!-- --> </a> <h3>Methods inherited from interface&nbsp;java.util.<a href="../../java/util/Map.html" title="interface in java.util">Map</a></h3> <code><a href="../../java/util/Map.html#equals-java.lang.Object-">equals</a>, <a href="../../java/util/Map.html#hashCode--">hashCode</a></code> </li> </ul> </li> </ul> </li> </ul> </div> <div class="details"> <ul class="blockList"> <li class="blockList"> <!-- ========= CONSTRUCTOR DETAIL ======== --> <ul class="blockList"> <li class="blockList"><a name="constructor.detail"> <!-- --> </a> <h3>Constructor Detail</h3> <a name="HashMap-int-float-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>HashMap</h4> <pre>public&nbsp;HashMap(int&nbsp;initialCapacity, float&nbsp;loadFactor)</pre> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and load factor.</div> <dl> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>initialCapacity</code> - the initial capacity</dd> <dd><code>loadFactor</code> - the load factor</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the initial capacity is negative or the load factor is nonpositive</dd> </dl> </li> </ul> <a name="HashMap-int-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>HashMap</h4> <pre>public&nbsp;HashMap(int&nbsp;initialCapacity)</pre> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and the default load factor (0.75).</div> <dl> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>initialCapacity</code> - the initial capacity.</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the initial capacity is negative.</dd> </dl> </li> </ul> <a name="HashMap--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>HashMap</h4> <pre>public&nbsp;HashMap()</pre> <div class="block">Constructs an empty <tt>HashMap</tt> with the default initial capacity (16) and the default load factor (0.75).</div> </li> </ul> <a name="HashMap-java.util.Map-"> <!-- --> </a> <ul class="blockListLast"> <li class="blockList"> <h4>HashMap</h4> <pre>public&nbsp;HashMap(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</pre> <div class="block">Constructs a new <tt>HashMap</tt> with the same mappings as the specified <tt>Map</tt>. The <tt>HashMap</tt> is created with default load factor (0.75) and an initial capacity sufficient to hold the mappings in the specified <tt>Map</tt>.</div> <dl> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>m</code> - the map whose mappings are to be placed in this map</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified map is null</dd> </dl> </li> </ul> </li> </ul> <!-- ============ METHOD DETAIL ========== --> <ul class="blockList"> <li class="blockList"><a name="method.detail"> <!-- --> </a> <h3>Method Detail</h3> <a name="size--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>size</h4> <pre>public&nbsp;int&nbsp;size()</pre> <div class="block">Returns the number of key-value mappings in this map.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#size--">size</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#size--">size</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the number of key-value mappings in this map</dd> </dl> </li> </ul> <a name="isEmpty--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>isEmpty</h4> <pre>public&nbsp;boolean&nbsp;isEmpty()</pre> <div class="block">Returns <tt>true</tt> if this map contains no key-value mappings. </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#isEmpty--">isEmpty</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#isEmpty--">isEmpty</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><tt>true</tt> if this map contains no key-value mappings</dd> </dl> </li> </ul> <a name="get-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>get</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;get(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</pre> <div class="block">Returns the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key. <p>More formally, if this map contains a mapping from a key <code>k</code> to a value <code>v</code> such that <code>(key==null ? k==null : key.equals(k))</code>, then this method returns <code>v</code>; otherwise it returns <code>null</code>. (There can be at most one such mapping.) </p> <p>A return value of <code>null</code> does not <i>necessarily</i> indicate that the map contains no mapping for the key; it's also possible that the map explicitly maps the key to <code>null</code>. The <a href="../../java/util/HashMap.html#containsKey-java.lang.Object-"><code>containsKey</code></a> operation may be used to distinguish these two cases.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#get-java.lang.Object-">get</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#get-java.lang.Object-">get</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - the key whose associated value is to be returned</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key</dd> <dt><span class="seeLabel">See Also:</span></dt> <dd><a href="../../java/util/HashMap.html#put-K-V-"><code>put(Object, Object)</code></a></dd> </dl> </li> </ul> <a name="containsKey-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>containsKey</h4> <pre>public&nbsp;boolean&nbsp;containsKey(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</pre> <div class="block">Returns <tt>true</tt> if this map contains a mapping for the specified key.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#containsKey-java.lang.Object-">containsKey</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#containsKey-java.lang.Object-">containsKey</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - The key whose presence in this map is to be tested</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><tt>true</tt> if this map contains a mapping for the specified key.</dd> </dl> </li> </ul> <a name="put-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="put-K-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>put</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;put(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</pre> <div class="block">Associates the specified value with the specified key in this map. If the map previously contained a mapping for the key, the old value is replaced.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#put-K-V-">put</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#put-K-V-">put</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>value</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with <tt>key</tt>, or <tt>null</tt> if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return can also indicate that the map previously associated <tt>null</tt> with <tt>key</tt>.)</dd> </dl> </li> </ul> <a name="putAll-java.util.Map-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>putAll</h4> <pre>public&nbsp;void&nbsp;putAll(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</pre> <div class="block">Copies all of the mappings from the specified map to this map. These mappings will replace any mappings that this map had for any of the keys currently in the specified map.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#putAll-java.util.Map-">putAll</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#putAll-java.util.Map-">putAll</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>m</code> - mappings to be stored in this map</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified map is null</dd> </dl> </li> </ul> <a name="remove-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>remove</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;remove(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</pre> <div class="block">Removes the mapping for the specified key from this map if present.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#remove-java.lang.Object-">remove</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#remove-java.lang.Object-">remove</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key whose mapping is to be removed from the map</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with <tt>key</tt>, or <tt>null</tt> if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return can also indicate that the map previously associated <tt>null</tt> with <tt>key</tt>.)</dd> </dl> </li> </ul> <a name="clear--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>clear</h4> <pre>public&nbsp;void&nbsp;clear()</pre> <div class="block">Removes all of the mappings from this map. The map will be empty after this call returns.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#clear--">clear</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#clear--">clear</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> </dl> </li> </ul> <a name="containsValue-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>containsValue</h4> <pre>public&nbsp;boolean&nbsp;containsValue(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</pre> <div class="block">Returns <tt>true</tt> if this map maps one or more keys to the specified value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#containsValue-java.lang.Object-">containsValue</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#containsValue-java.lang.Object-">containsValue</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>value</code> - value whose presence in this map is to be tested</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><tt>true</tt> if this map maps one or more keys to the specified value</dd> </dl> </li> </ul> <a name="keySet--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>keySet</h4> <pre>public&nbsp;<a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&gt;&nbsp;keySet()</pre> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own <tt>remove</tt> operation), the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#keySet--">keySet</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#keySet--">keySet</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a set view of the keys contained in this map</dd> </dl> </li> </ul> <a name="values--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>values</h4> <pre>public&nbsp;<a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;values()</pre> <div class="block">Returns a <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a> view of the values contained in this map. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. If the map is modified while an iteration over the collection is in progress (except through the iterator's own <tt>remove</tt> operation), the results of the iteration are undefined. The collection supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Collection.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#values--">values</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#values--">values</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a view of the values contained in this map</dd> </dl> </li> </ul> <a name="entrySet--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>entrySet</h4> <pre>public&nbsp;<a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&gt;&nbsp;entrySet()</pre> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the mappings contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own <tt>remove</tt> operation, or through the <tt>setValue</tt> operation on a map entry returned by the iterator) the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#entrySet--">entrySet</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#entrySet--">entrySet</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a set view of the mappings contained in this map</dd> </dl> </li> </ul> <a name="getOrDefault-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="getOrDefault-java.lang.Object-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>getOrDefault</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;getOrDefault(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;defaultValue)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#getOrDefault-java.lang.Object-V-">Map</a></code></span> </div> <div class="block">Returns the value to which the specified key is mapped, or <code>defaultValue</code> if this map contains no mapping for the key.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#getOrDefault-java.lang.Object-V-">getOrDefault</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - the key whose associated value is to be returned</dd> <dd><code>defaultValue</code> - the default mapping of the key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the value to which the specified key is mapped, or <code>defaultValue</code> if this map contains no mapping for the key</dd> </dl> </li> </ul> <a name="putIfAbsent-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="putIfAbsent-K-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>putIfAbsent</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;putIfAbsent(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#putIfAbsent-K-V-">Map</a></code></span> </div> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>) associates it with the given value and returns <code>null</code>, else returns the current value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#putIfAbsent-K-V-">putIfAbsent</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>value</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with the specified key, or <code>null</code> if there was no mapping for the key. (A <code>null</code> return can also indicate that the map previously associated <code>null</code> with the key, if the implementation supports null values.)</dd> </dl> </li> </ul> <a name="remove-java.lang.Object-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>remove</h4> <pre>public&nbsp;boolean&nbsp;remove(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#remove-java.lang.Object-java.lang.Object-">Map</a></code></span> </div> <div class="block">Removes the entry for the specified key only if it is currently mapped to the specified value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#remove-java.lang.Object-java.lang.Object-">remove</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is associated</dd> <dd><code>value</code> - value expected to be associated with the specified key </dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><code>true</code> if the value was removed</dd> </dl> </li> </ul> <a name="replace-java.lang.Object-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="replace-K-V-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>replace</h4> <pre>public&nbsp;boolean&nbsp;replace(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;oldValue, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;newValue)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#replace-K-V-V-">Map</a></code></span> </div> <div class="block">Replaces the entry for the specified key only if currently mapped to the specified value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#replace-K-V-V-">replace</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is associated</dd> <dd><code>oldValue</code> - value expected to be associated with the specified key</dd> <dd><code>newValue</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><code>true</code> if the value was replaced</dd> </dl> </li> </ul> <a name="replace-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="replace-K-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>replace</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;replace(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#replace-K-V-">Map</a></code></span> </div> <div class="block">Replaces the entry for the specified key only if it is currently mapped to some value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#replace-K-V-">replace</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is associated</dd> <dd><code>value</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with the specified key, or <code>null</code> if there was no mapping for the key. (A <code>null</code> return can also indicate that the map previously associated <code>null</code> with the key, if the implementation supports null values.)</dd> </dl> </li> </ul> <a name="computeIfAbsent-java.lang.Object-java.util.function.Function-"> <!-- --> </a><a name="computeIfAbsent-K-java.util.function.Function-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>computeIfAbsent</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;computeIfAbsent(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/Function.html" title="interface in java.util.function">Function</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;mappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#computeIfAbsent-K-java.util.function.Function-">Map</a></code></span> </div> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>), attempts to compute its value using the given mapping function and enters it into this map unless <code>null</code>. <p>If the function returns <code>null</code> no mapping is recorded. If the function itself throws an (unchecked) exception, the exception is rethrown, and no mapping is recorded. The most common usage is to construct a new object serving as an initial mapped value or memoized result, as in: </p> <pre> <code> map.computeIfAbsent(key, k -&gt; new Value(f(k))); </code></pre> <p>Or to implement a multi-value map, <code>Map&lt;K,Collection&lt;V&gt;&gt;</code>, supporting multiple values per key: </p> <pre> <code> map.computeIfAbsent(key, k -&gt; new HashSet&lt;V&gt;()).add(v); </code></pre> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#computeIfAbsent-K-java.util.function.Function-">computeIfAbsent</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>mappingFunction</code> - the function to compute a value</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the current (existing or computed) value associated with the specified key, or null if the computed value is null</dd> </dl> </li> </ul> <a name="computeIfPresent-java.lang.Object-java.util.function.BiFunction-"> <!-- --> </a><a name="computeIfPresent-K-java.util.function.BiFunction-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>computeIfPresent</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;computeIfPresent(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value. <p>If the function returns <code>null</code>, the mapping is removed. If the function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-">computeIfPresent</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>remappingFunction</code> - the function to compute a value</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the new value associated with the specified key, or null if none</dd> </dl> </li> </ul> <a name="compute-java.lang.Object-java.util.function.BiFunction-"> <!-- --> </a><a name="compute-K-java.util.function.BiFunction-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>compute</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;compute(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#compute-K-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">Attempts to compute a mapping for the specified key and its current mapped value (or <code>null</code> if there is no current mapping). For example, to either create or append a <code>String</code> msg to a value mapping: <pre> <code> map.compute(key, (k, v) -&gt; (v == null) ? msg : v.concat(msg))</code></pre> (Method <a href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-"><code>merge()</code></a> is often simpler to use for such purposes.) <p>If the function returns <code>null</code>, the mapping is removed (or remains absent if initially absent). If the function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#compute-K-java.util.function.BiFunction-">compute</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>remappingFunction</code> - the function to compute a value</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the new value associated with the specified key, or null if none</dd> </dl> </li> </ul> <a name="merge-java.lang.Object-java.lang.Object-java.util.function.BiFunction-"> <!-- --> </a><a name="merge-K-V-java.util.function.BiFunction-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>merge</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;merge(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value. Otherwise, replaces the associated value with the results of the given remapping function, or removes if the result is <code>null</code>. This method may be of use when combining multiple mapped values for a key. For example, to either create or append a <code>String msg</code> to a value mapping: <pre> <code> map.merge(key, msg, String::concat) </code></pre> <p>If the function returns <code>null</code> the mapping is removed. If the function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-">merge</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the resulting value is to be associated </dd> <dd><code>value</code> - the non-null value to be merged with the existing value associated with the key or, if no existing value or a null value is associated with the key, to be associated with the key</dd> <dd><code>remappingFunction</code> - the function to recompute a value if present</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the new value associated with the specified key, or null if no value is associated with the key</dd> </dl> </li> </ul> <a name="forEach-java.util.function.BiConsumer-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>forEach</h4> <pre>public&nbsp;void&nbsp;forEach(<a href="../../java/util/function/BiConsumer.html" title="interface in java.util.function">BiConsumer</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;action)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#forEach-java.util.function.BiConsumer-">Map</a></code></span> </div> <div class="block">Performs the given action for each entry in this map until all entries have been processed or the action throws an exception. Unless otherwise specified by the implementing class, actions are performed in the order of entry set iteration (if an iteration order is specified.) Exceptions thrown by the action are relayed to the caller.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#forEach-java.util.function.BiConsumer-">forEach</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>action</code> - The action to be performed for each entry</dd> </dl> </li> </ul> <a name="replaceAll-java.util.function.BiFunction-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>replaceAll</h4> <pre>public&nbsp;void&nbsp;replaceAll(<a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;function)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#replaceAll-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception. Exceptions thrown by the function are relayed to the caller.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#replaceAll-java.util.function.BiFunction-">replaceAll</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>function</code> - the function to apply to each entry</dd> </dl> </li> </ul> <a name="clone--"> <!-- --> </a> <ul class="blockListLast"> <li class="blockList"> <h4>clone</h4> <pre>public&nbsp;<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;clone()</pre> <div class="block">Returns a shallow copy of this <tt>HashMap</tt> instance: the keys and values themselves are not cloned.</div> <dl> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#clone--">clone</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a shallow copy of this map</dd> <dt><span class="seeLabel">See Also:</span></dt> <dd><a href="../../java/lang/Cloneable.html" title="interface in java.lang"><code>Cloneable</code></a></dd> </dl> </li> </ul> </li> </ul> </li> </ul> </div> </div> <!-- ========= END OF CLASS DATA ========= --> <!-- ======= START OF BOTTOM NAVBAR ====== --> <div class="bottomNav"><a name="navbar.bottom"> <!-- --> </a> <div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div> <a name="navbar.bottom.firstrow"> <!-- --> </a> <ul class="navList" title="Navigation"> <li><a href="../../overview-summary.html">Overview</a></li> <li><a href="package-summary.html">Package</a></li> <li class="navBarCell1Rev">Class</li> <li><a href="class-use/HashMap.html">Use</a></li> <li><a href="package-tree.html">Tree</a></li> <li><a href="../../deprecated-list.html">Deprecated</a></li> <li><a href="../../index-files/index-1.html">Index</a></li> <li><a href="../../help-doc.html">Help</a></li> </ul> <div class="aboutLanguage"><strong>Javaâ„¢&nbsp;Platform<br>Standard&nbsp;Ed.&nbsp;8</strong></div> </div> <div class="subNav"> <ul class="navList"> <li><a href="../../java/util/GregorianCalendar.html" title="class in java.util"><span class="typeNameLink">Prev&nbsp;Class</span></a></li> <li><a href="../../java/util/HashSet.html" title="class in java.util"><span class="typeNameLink">Next&nbsp;Class</span></a></li> </ul> <ul class="navList"> <li><a href="../../index.html?java/util/HashMap.html" target="_top">Frames</a></li> <li><a href="HashMap.html" target="_top">No&nbsp;Frames</a></li> </ul> <ul class="navList" id="allclasses_navbar_bottom" style="display: block;"> <li><a href="../../allclasses-noframe.html">All&nbsp;Classes</a></li> </ul> <div> <script type="text/javascript"> <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if (window == top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } // --> </script> </div> <div> <ul class="subNavList"> <li>Summary:&nbsp;</li> <li><a href="#nested.classes.inherited.from.class.java.util.AbstractMap">Nested</a>&nbsp;|&nbsp;</li> <li>Field&nbsp;|&nbsp;</li> <li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li> <li><a href="#method.summary">Method</a></li> </ul> <ul class="subNavList"> <li>Detail:&nbsp;</li> <li>Field&nbsp;|&nbsp;</li> <li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li> <li><a href="#method.detail">Method</a></li> </ul> </div> <a name="skip.navbar.bottom"> <!-- --> </a> </div> <!-- ======== END OF BOTTOM NAVBAR ======= --> <p class="legalCopy"><small> <font size="-1"> <a href="http://bugreport.sun.com/bugreport/">Submit a bug or feature</a> <br>For further API reference and developer documentation, see <a href="https://docs.oracle.com/javase/8/docs/index.html" target="_blank">Java SE Documentation</a>. That documentation contains more detailed, developer-targeted descriptions, with conceptual overviews, definitions of terms, workarounds, and working code examples.<br> <a href="../../../legal/cpyr.html">Copyright</a> Â© 1993, 2019, Oracle and/or its affiliates. All rights reserved. Use is subject to <a href="http://download.oracle.com/otndocs/jcp/java_se-8-mrel-spec/license.html">license terms</a>. Also see the <a target="_blank" href="http://www.oracle.com/technetwork/java/redist-137594.html">documentation redistribution policy</a>. </font> </small></p> <!-- Start SiteCatalyst code --> <script type="application/javascript" src="https://www.oracleimg.com/us/assets/metrics/ora_docs.js"></script> <script src="https://www.oracleimg.com/us/assets/metrics/ora_code_docs.js"></script> <script src="https://www.oracleimg.com/us/assets/metrics/ora_code.js"></script> <!-- End SiteCatalyst code --> <noscript> <p>Scripting on this page tracks web page traffic, but does not change the content in any way.</p> </noscript>
]

body{
  data-gr-c-s-loaded = (true:)
} : [
 <p>Scripting on this page tracks web page traffic, but does not change the content in any way.</p> 
]

head {} : [

]

style{
  id = (dark-mode-custom-style:)
  type = (text/css:)
} : [

]

link{
  rel = (stylesheet:)
  id = (dark-mode:)
  href = ()
  type = (text/css:)
} : [

]

script{
  src = (/en/dcommon/js/global.js:)
} : [

]

script {} : [

]

script{
  src = (../../script.js:)
  type = (text/javascript:)
} : [

]

link{
  rel = (stylesheet:)
  href = (../../stylesheet.css:)
  type = (text/css:)
  title = (Style:)
} : [

]

meta{
  name = (keywords:)
  content = (clone():)
} : [

]

meta{
  name = (keywords:)
  content = (replaceAll():)
} : [

]

meta{
  name = (keywords:)
  content = (forEach():)
} : [

]

meta{
  name = (keywords:)
  content = (merge():)
} : [

]

meta{
  name = (keywords:)
  content = (compute():)
} : [

]

meta{
  name = (keywords:)
  content = (computeIfPresent():)
} : [

]

meta{
  name = (keywords:)
  content = (computeIfAbsent():)
} : [

]

meta{
  name = (keywords:)
  content = (replace():)
} : [

]

meta{
  name = (keywords:)
  content = (putIfAbsent():)
} : [

]

meta{
  name = (keywords:)
  content = (getOrDefault():)
} : [

]

meta{
  name = (keywords:)
  content = (entrySet():)
} : [

]

meta{
  name = (keywords:)
  content = (values():)
} : [

]

meta{
  name = (keywords:)
  content = (keySet():)
} : [

]

meta{
  name = (keywords:)
  content = (containsValue():)
} : [

]

meta{
  name = (keywords:)
  content = (clear():)
} : [

]

meta{
  name = (keywords:)
  content = (remove():)
} : [

]

meta{
  name = (keywords:)
  content = (putAll():)
} : [

]

meta{
  name = (keywords:)
  content = (put():)
} : [

]

meta{
  name = (keywords:)
  content = (containsKey():)
} : [

]

meta{
  name = (keywords:)
  content = (get():)
} : [

]

meta{
  name = (keywords:)
  content = (isEmpty():)
} : [

]

meta{
  name = (keywords:)
  content = (size():)
} : [

]

meta{
  name = (keywords:)
  content = (java.util.HashMap:class:)
} : [

]

meta{
  name = (date:)
  content = (2019-03-06:)
} : [

]

title {} : [

]

noscript {} : [
Scripting on this page tracks web page traffic, but does not change the content in any way.
]

script{
  src = (https://www.oracleimg.com/us/assets/metrics/ora_code.js:)
} : [

]

script{
  src = (https://www.oracleimg.com/us/assets/metrics/ora_code_docs.js:)
} : [

]

script{
  src = (https://www.oracleimg.com/us/assets/metrics/ora_docs.js:)
  type = (application/javascript:)
} : [

]

p{
  class = (legalCopy:)
} : [
 <font size="-1"> <a href="http://bugreport.sun.com/bugreport/">Submit a bug or feature</a> <br>For further API reference and developer documentation, see <a href="https://docs.oracle.com/javase/8/docs/index.html" target="_blank">Java SE Documentation</a>. That documentation contains more detailed, developer-targeted descriptions, with conceptual overviews, definitions of terms, workarounds, and working code examples.<br> <a href="../../../legal/cpyr.html">Copyright</a> Â© 1993, 2019, Oracle and/or its affiliates. All rights reserved. Use is subject to <a href="http://download.oracle.com/otndocs/jcp/java_se-8-mrel-spec/license.html">license terms</a>. Also see the <a target="_blank" href="http://www.oracle.com/technetwork/java/redist-137594.html">documentation redistribution policy</a>. </font> 
]

div{
  class = (subNav:)
} : [
 <!-- --> 
]

div{
  class = (bottomNav:)
} : [
<strong>Javaâ„¢&nbsp;Platform<br>Standard&nbsp;Ed.&nbsp;8</strong>
]

div{
  class = (contentContainer:)
} : [
 <ul class="blockList"> <li class="blockList"> <!-- ========= CONSTRUCTOR DETAIL ======== --> <ul class="blockList"> <li class="blockList"><a name="constructor.detail"> <!-- --> </a> <h3>Constructor Detail</h3> <a name="HashMap-int-float-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>HashMap</h4> <pre>public&nbsp;HashMap(int&nbsp;initialCapacity, float&nbsp;loadFactor)</pre> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and load factor.</div> <dl> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>initialCapacity</code> - the initial capacity</dd> <dd><code>loadFactor</code> - the load factor</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the initial capacity is negative or the load factor is nonpositive</dd> </dl> </li> </ul> <a name="HashMap-int-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>HashMap</h4> <pre>public&nbsp;HashMap(int&nbsp;initialCapacity)</pre> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and the default load factor (0.75).</div> <dl> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>initialCapacity</code> - the initial capacity.</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the initial capacity is negative.</dd> </dl> </li> </ul> <a name="HashMap--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>HashMap</h4> <pre>public&nbsp;HashMap()</pre> <div class="block">Constructs an empty <tt>HashMap</tt> with the default initial capacity (16) and the default load factor (0.75).</div> </li> </ul> <a name="HashMap-java.util.Map-"> <!-- --> </a> <ul class="blockListLast"> <li class="blockList"> <h4>HashMap</h4> <pre>public&nbsp;HashMap(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</pre> <div class="block">Constructs a new <tt>HashMap</tt> with the same mappings as the specified <tt>Map</tt>. The <tt>HashMap</tt> is created with default load factor (0.75) and an initial capacity sufficient to hold the mappings in the specified <tt>Map</tt>.</div> <dl> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>m</code> - the map whose mappings are to be placed in this map</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified map is null</dd> </dl> </li> </ul> </li> </ul> <!-- ============ METHOD DETAIL ========== --> <ul class="blockList"> <li class="blockList"><a name="method.detail"> <!-- --> </a> <h3>Method Detail</h3> <a name="size--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>size</h4> <pre>public&nbsp;int&nbsp;size()</pre> <div class="block">Returns the number of key-value mappings in this map.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#size--">size</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#size--">size</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the number of key-value mappings in this map</dd> </dl> </li> </ul> <a name="isEmpty--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>isEmpty</h4> <pre>public&nbsp;boolean&nbsp;isEmpty()</pre> <div class="block">Returns <tt>true</tt> if this map contains no key-value mappings. </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#isEmpty--">isEmpty</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#isEmpty--">isEmpty</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><tt>true</tt> if this map contains no key-value mappings</dd> </dl> </li> </ul> <a name="get-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>get</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;get(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</pre> <div class="block">Returns the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key. <p>More formally, if this map contains a mapping from a key <code>k</code> to a value <code>v</code> such that <code>(key==null ? k==null : key.equals(k))</code>, then this method returns <code>v</code>; otherwise it returns <code>null</code>. (There can be at most one such mapping.) </p> <p>A return value of <code>null</code> does not <i>necessarily</i> indicate that the map contains no mapping for the key; it's also possible that the map explicitly maps the key to <code>null</code>. The <a href="../../java/util/HashMap.html#containsKey-java.lang.Object-"><code>containsKey</code></a> operation may be used to distinguish these two cases.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#get-java.lang.Object-">get</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#get-java.lang.Object-">get</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - the key whose associated value is to be returned</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key</dd> <dt><span class="seeLabel">See Also:</span></dt> <dd><a href="../../java/util/HashMap.html#put-K-V-"><code>put(Object, Object)</code></a></dd> </dl> </li> </ul> <a name="containsKey-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>containsKey</h4> <pre>public&nbsp;boolean&nbsp;containsKey(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</pre> <div class="block">Returns <tt>true</tt> if this map contains a mapping for the specified key.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#containsKey-java.lang.Object-">containsKey</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#containsKey-java.lang.Object-">containsKey</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - The key whose presence in this map is to be tested</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><tt>true</tt> if this map contains a mapping for the specified key.</dd> </dl> </li> </ul> <a name="put-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="put-K-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>put</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;put(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</pre> <div class="block">Associates the specified value with the specified key in this map. If the map previously contained a mapping for the key, the old value is replaced.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#put-K-V-">put</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#put-K-V-">put</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>value</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with <tt>key</tt>, or <tt>null</tt> if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return can also indicate that the map previously associated <tt>null</tt> with <tt>key</tt>.)</dd> </dl> </li> </ul> <a name="putAll-java.util.Map-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>putAll</h4> <pre>public&nbsp;void&nbsp;putAll(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</pre> <div class="block">Copies all of the mappings from the specified map to this map. These mappings will replace any mappings that this map had for any of the keys currently in the specified map.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#putAll-java.util.Map-">putAll</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#putAll-java.util.Map-">putAll</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>m</code> - mappings to be stored in this map</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified map is null</dd> </dl> </li> </ul> <a name="remove-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>remove</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;remove(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</pre> <div class="block">Removes the mapping for the specified key from this map if present.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#remove-java.lang.Object-">remove</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#remove-java.lang.Object-">remove</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key whose mapping is to be removed from the map</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with <tt>key</tt>, or <tt>null</tt> if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return can also indicate that the map previously associated <tt>null</tt> with <tt>key</tt>.)</dd> </dl> </li> </ul> <a name="clear--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>clear</h4> <pre>public&nbsp;void&nbsp;clear()</pre> <div class="block">Removes all of the mappings from this map. The map will be empty after this call returns.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#clear--">clear</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#clear--">clear</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> </dl> </li> </ul> <a name="containsValue-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>containsValue</h4> <pre>public&nbsp;boolean&nbsp;containsValue(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</pre> <div class="block">Returns <tt>true</tt> if this map maps one or more keys to the specified value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#containsValue-java.lang.Object-">containsValue</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#containsValue-java.lang.Object-">containsValue</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>value</code> - value whose presence in this map is to be tested</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><tt>true</tt> if this map maps one or more keys to the specified value</dd> </dl> </li> </ul> <a name="keySet--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>keySet</h4> <pre>public&nbsp;<a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&gt;&nbsp;keySet()</pre> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own <tt>remove</tt> operation), the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#keySet--">keySet</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#keySet--">keySet</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a set view of the keys contained in this map</dd> </dl> </li> </ul> <a name="values--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>values</h4> <pre>public&nbsp;<a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;values()</pre> <div class="block">Returns a <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a> view of the values contained in this map. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. If the map is modified while an iteration over the collection is in progress (except through the iterator's own <tt>remove</tt> operation), the results of the iteration are undefined. The collection supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Collection.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#values--">values</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#values--">values</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a view of the values contained in this map</dd> </dl> </li> </ul> <a name="entrySet--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>entrySet</h4> <pre>public&nbsp;<a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&gt;&nbsp;entrySet()</pre> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the mappings contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own <tt>remove</tt> operation, or through the <tt>setValue</tt> operation on a map entry returned by the iterator) the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#entrySet--">entrySet</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#entrySet--">entrySet</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a set view of the mappings contained in this map</dd> </dl> </li> </ul> <a name="getOrDefault-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="getOrDefault-java.lang.Object-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>getOrDefault</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;getOrDefault(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;defaultValue)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#getOrDefault-java.lang.Object-V-">Map</a></code></span> </div> <div class="block">Returns the value to which the specified key is mapped, or <code>defaultValue</code> if this map contains no mapping for the key.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#getOrDefault-java.lang.Object-V-">getOrDefault</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - the key whose associated value is to be returned</dd> <dd><code>defaultValue</code> - the default mapping of the key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the value to which the specified key is mapped, or <code>defaultValue</code> if this map contains no mapping for the key</dd> </dl> </li> </ul> <a name="putIfAbsent-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="putIfAbsent-K-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>putIfAbsent</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;putIfAbsent(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#putIfAbsent-K-V-">Map</a></code></span> </div> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>) associates it with the given value and returns <code>null</code>, else returns the current value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#putIfAbsent-K-V-">putIfAbsent</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>value</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with the specified key, or <code>null</code> if there was no mapping for the key. (A <code>null</code> return can also indicate that the map previously associated <code>null</code> with the key, if the implementation supports null values.)</dd> </dl> </li> </ul> <a name="remove-java.lang.Object-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>remove</h4> <pre>public&nbsp;boolean&nbsp;remove(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#remove-java.lang.Object-java.lang.Object-">Map</a></code></span> </div> <div class="block">Removes the entry for the specified key only if it is currently mapped to the specified value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#remove-java.lang.Object-java.lang.Object-">remove</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is associated</dd> <dd><code>value</code> - value expected to be associated with the specified key </dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><code>true</code> if the value was removed</dd> </dl> </li> </ul> <a name="replace-java.lang.Object-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="replace-K-V-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>replace</h4> <pre>public&nbsp;boolean&nbsp;replace(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;oldValue, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;newValue)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#replace-K-V-V-">Map</a></code></span> </div> <div class="block">Replaces the entry for the specified key only if currently mapped to the specified value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#replace-K-V-V-">replace</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is associated</dd> <dd><code>oldValue</code> - value expected to be associated with the specified key</dd> <dd><code>newValue</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><code>true</code> if the value was replaced</dd> </dl> </li> </ul> <a name="replace-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="replace-K-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>replace</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;replace(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#replace-K-V-">Map</a></code></span> </div> <div class="block">Replaces the entry for the specified key only if it is currently mapped to some value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#replace-K-V-">replace</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is associated</dd> <dd><code>value</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with the specified key, or <code>null</code> if there was no mapping for the key. (A <code>null</code> return can also indicate that the map previously associated <code>null</code> with the key, if the implementation supports null values.)</dd> </dl> </li> </ul> <a name="computeIfAbsent-java.lang.Object-java.util.function.Function-"> <!-- --> </a><a name="computeIfAbsent-K-java.util.function.Function-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>computeIfAbsent</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;computeIfAbsent(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/Function.html" title="interface in java.util.function">Function</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;mappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#computeIfAbsent-K-java.util.function.Function-">Map</a></code></span> </div> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>), attempts to compute its value using the given mapping function and enters it into this map unless <code>null</code>. <p>If the function returns <code>null</code> no mapping is recorded. If the function itself throws an (unchecked) exception, the exception is rethrown, and no mapping is recorded. The most common usage is to construct a new object serving as an initial mapped value or memoized result, as in: </p> <pre> <code> map.computeIfAbsent(key, k -&gt; new Value(f(k))); </code></pre> <p>Or to implement a multi-value map, <code>Map&lt;K,Collection&lt;V&gt;&gt;</code>, supporting multiple values per key: </p> <pre> <code> map.computeIfAbsent(key, k -&gt; new HashSet&lt;V&gt;()).add(v); </code></pre> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#computeIfAbsent-K-java.util.function.Function-">computeIfAbsent</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>mappingFunction</code> - the function to compute a value</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the current (existing or computed) value associated with the specified key, or null if the computed value is null</dd> </dl> </li> </ul> <a name="computeIfPresent-java.lang.Object-java.util.function.BiFunction-"> <!-- --> </a><a name="computeIfPresent-K-java.util.function.BiFunction-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>computeIfPresent</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;computeIfPresent(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value. <p>If the function returns <code>null</code>, the mapping is removed. If the function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-">computeIfPresent</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>remappingFunction</code> - the function to compute a value</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the new value associated with the specified key, or null if none</dd> </dl> </li> </ul> <a name="compute-java.lang.Object-java.util.function.BiFunction-"> <!-- --> </a><a name="compute-K-java.util.function.BiFunction-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>compute</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;compute(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#compute-K-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">Attempts to compute a mapping for the specified key and its current mapped value (or <code>null</code> if there is no current mapping). For example, to either create or append a <code>String</code> msg to a value mapping: <pre> <code> map.compute(key, (k, v) -&gt; (v == null) ? msg : v.concat(msg))</code></pre> (Method <a href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-"><code>merge()</code></a> is often simpler to use for such purposes.) <p>If the function returns <code>null</code>, the mapping is removed (or remains absent if initially absent). If the function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#compute-K-java.util.function.BiFunction-">compute</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>remappingFunction</code> - the function to compute a value</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the new value associated with the specified key, or null if none</dd> </dl> </li> </ul> <a name="merge-java.lang.Object-java.lang.Object-java.util.function.BiFunction-"> <!-- --> </a><a name="merge-K-V-java.util.function.BiFunction-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>merge</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;merge(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value. Otherwise, replaces the associated value with the results of the given remapping function, or removes if the result is <code>null</code>. This method may be of use when combining multiple mapped values for a key. For example, to either create or append a <code>String msg</code> to a value mapping: <pre> <code> map.merge(key, msg, String::concat) </code></pre> <p>If the function returns <code>null</code> the mapping is removed. If the function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-">merge</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the resulting value is to be associated </dd> <dd><code>value</code> - the non-null value to be merged with the existing value associated with the key or, if no existing value or a null value is associated with the key, to be associated with the key</dd> <dd><code>remappingFunction</code> - the function to recompute a value if present</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the new value associated with the specified key, or null if no value is associated with the key</dd> </dl> </li> </ul> <a name="forEach-java.util.function.BiConsumer-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>forEach</h4> <pre>public&nbsp;void&nbsp;forEach(<a href="../../java/util/function/BiConsumer.html" title="interface in java.util.function">BiConsumer</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;action)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#forEach-java.util.function.BiConsumer-">Map</a></code></span> </div> <div class="block">Performs the given action for each entry in this map until all entries have been processed or the action throws an exception. Unless otherwise specified by the implementing class, actions are performed in the order of entry set iteration (if an iteration order is specified.) Exceptions thrown by the action are relayed to the caller.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#forEach-java.util.function.BiConsumer-">forEach</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>action</code> - The action to be performed for each entry</dd> </dl> </li> </ul> <a name="replaceAll-java.util.function.BiFunction-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>replaceAll</h4> <pre>public&nbsp;void&nbsp;replaceAll(<a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;function)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#replaceAll-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception. Exceptions thrown by the function are relayed to the caller.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#replaceAll-java.util.function.BiFunction-">replaceAll</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>function</code> - the function to apply to each entry</dd> </dl> </li> </ul> <a name="clone--"> <!-- --> </a> <ul class="blockListLast"> <li class="blockList"> <h4>clone</h4> <pre>public&nbsp;<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;clone()</pre> <div class="block">Returns a shallow copy of this <tt>HashMap</tt> instance: the keys and values themselves are not cloned.</div> <dl> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#clone--">clone</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a shallow copy of this map</dd> <dt><span class="seeLabel">See Also:</span></dt> <dd><a href="../../java/lang/Cloneable.html" title="interface in java.lang"><code>Cloneable</code></a></dd> </dl> </li> </ul> </li> </ul> </li> </ul> 
]

div{
  class = (header:)
} : [
Class HashMap&lt;K,V&gt;
]

div{
  class = (subNav:)
} : [
 <!-- --> 
]

div{
  class = (topNav:)
} : [
<strong>Javaâ„¢&nbsp;Platform<br>Standard&nbsp;Ed.&nbsp;8</strong>
]

noscript {} : [
JavaScript is disabled on your browser.
]

script{
  type = (text/javascript:)
} : [

]

div {} : [

]

div{
  class = (aboutLanguage:)
} : [
Javaâ„¢&nbsp;Platform<br>Standard&nbsp;Ed.&nbsp;8
]

ul{
  title = (Navigation:)
  class = (navList:)
} : [
<a href="../../help-doc.html">Help</a>
]

a{
  name = (navbar.top.firstrow:)
} : [

]

div{
  class = (skipNav:)
} : [
Skip navigation links
]

a{
  name = (navbar.top:)
} : [

]

a{
  href = (#skip.navbar.top:)
  title = (Skip:navigation:links:)
} : [

]

li {} : [
Help
]

li {} : [
Index
]

li {} : [
Deprecated
]

li {} : [
Tree
]

li {} : [
Use
]

li{
  class = (navBarCell1Rev:)
} : [

]

li {} : [
Package
]

li {} : [
Overview
]

a{
  href = (../../overview-summary.html:)
} : [

]

a{
  href = (package-summary.html:)
} : [

]

a{
  href = (class-use/HashMap.html:)
} : [

]

a{
  href = (package-tree.html:)
} : [

]

a{
  href = (../../deprecated-list.html:)
} : [

]

a{
  href = (../../index-files/index-1.html:)
} : [

]

a{
  href = (../../help-doc.html:)
} : [

]

strong {} : [

]

br {} : [

]

a{
  name = (skip.navbar.top:)
} : [

]

div {} : [
 <li>Detail:&nbsp;</li> <li>Field&nbsp;|&nbsp;</li> <li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li> <li><a href="#method.detail">Method</a></li> 
]

div {} : [
 
]

ul{
  style = (display::block;:)
  id = (allclasses_navbar_top:)
  class = (navList:)
} : [
<a href="../../allclasses-noframe.html">All&nbsp;Classes</a>
]

ul{
  class = (navList:)
} : [
<a href="HashMap.html" target="_top">No&nbsp;Frames</a>
]

ul{
  class = (navList:)
} : [
<a href="../../java/util/HashSet.html" title="class in java.util"><span class="typeNameLink">Next&nbsp;Class</span></a>
]

li {} : [
<span class="typeNameLink">Next&nbsp;Class</span>
]

li {} : [
<span class="typeNameLink">Prev&nbsp;Class</span>
]

a{
  href = (../../java/util/GregorianCalendar.html:)
  title = (class:in:java.util:)
} : [
Prev&nbsp;Class
]

span{
  class = (typeNameLink:)
} : [

]

a{
  href = (../../java/util/HashSet.html:)
  title = (class:in:java.util:)
} : [
Next&nbsp;Class
]

span{
  class = (typeNameLink:)
} : [

]

li {} : [
No&nbsp;Frames
]

li {} : [
Frames
]

a{
  href = (../../index.html?java/util/HashMap.html:)
  target = (_top:)
} : [

]

a{
  href = (HashMap.html:)
  target = (_top:)
} : [

]

li {} : [
All&nbsp;Classes
]

a{
  href = (../../allclasses-noframe.html:)
} : [

]

script{
  type = (text/javascript:)
} : [

]

ul{
  class = (subNavList:)
} : [
<a href="#method.detail">Method</a>
]

ul{
  class = (subNavList:)
} : [
<a href="#method.summary">Method</a>
]

li {} : [
Method
]

li {} : [
Constr
]

li {} : [

]

li {} : [
Nested
]

li {} : [

]

a{
  href = (#nested.classes.inherited.from.class.java.util.AbstractMap:)
} : [

]

a{
  href = (#constructor.summary:)
} : [

]

a{
  href = (#method.summary:)
} : [

]

li {} : [
Method
]

li {} : [
Constr
]

li {} : [

]

li {} : [

]

a{
  href = (#constructor.detail:)
} : [

]

a{
  href = (#method.detail:)
} : [

]

h2{
  title = (Class:HashMap:)
  class = (title:)
} : [

]

div{
  class = (subTitle:)
} : [

]

div{
  class = (subTitle:)
} : [

]

div{
  class = (details:)
} : [
 <li class="blockList"> <!-- ========= CONSTRUCTOR DETAIL ======== --> <ul class="blockList"> <li class="blockList"><a name="constructor.detail"> <!-- --> </a> <h3>Constructor Detail</h3> <a name="HashMap-int-float-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>HashMap</h4> <pre>public&nbsp;HashMap(int&nbsp;initialCapacity, float&nbsp;loadFactor)</pre> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and load factor.</div> <dl> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>initialCapacity</code> - the initial capacity</dd> <dd><code>loadFactor</code> - the load factor</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the initial capacity is negative or the load factor is nonpositive</dd> </dl> </li> </ul> <a name="HashMap-int-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>HashMap</h4> <pre>public&nbsp;HashMap(int&nbsp;initialCapacity)</pre> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and the default load factor (0.75).</div> <dl> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>initialCapacity</code> - the initial capacity.</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the initial capacity is negative.</dd> </dl> </li> </ul> <a name="HashMap--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>HashMap</h4> <pre>public&nbsp;HashMap()</pre> <div class="block">Constructs an empty <tt>HashMap</tt> with the default initial capacity (16) and the default load factor (0.75).</div> </li> </ul> <a name="HashMap-java.util.Map-"> <!-- --> </a> <ul class="blockListLast"> <li class="blockList"> <h4>HashMap</h4> <pre>public&nbsp;HashMap(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</pre> <div class="block">Constructs a new <tt>HashMap</tt> with the same mappings as the specified <tt>Map</tt>. The <tt>HashMap</tt> is created with default load factor (0.75) and an initial capacity sufficient to hold the mappings in the specified <tt>Map</tt>.</div> <dl> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>m</code> - the map whose mappings are to be placed in this map</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified map is null</dd> </dl> </li> </ul> </li> </ul> <!-- ============ METHOD DETAIL ========== --> <ul class="blockList"> <li class="blockList"><a name="method.detail"> <!-- --> </a> <h3>Method Detail</h3> <a name="size--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>size</h4> <pre>public&nbsp;int&nbsp;size()</pre> <div class="block">Returns the number of key-value mappings in this map.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#size--">size</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#size--">size</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the number of key-value mappings in this map</dd> </dl> </li> </ul> <a name="isEmpty--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>isEmpty</h4> <pre>public&nbsp;boolean&nbsp;isEmpty()</pre> <div class="block">Returns <tt>true</tt> if this map contains no key-value mappings. </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#isEmpty--">isEmpty</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#isEmpty--">isEmpty</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><tt>true</tt> if this map contains no key-value mappings</dd> </dl> </li> </ul> <a name="get-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>get</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;get(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</pre> <div class="block">Returns the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key. <p>More formally, if this map contains a mapping from a key <code>k</code> to a value <code>v</code> such that <code>(key==null ? k==null : key.equals(k))</code>, then this method returns <code>v</code>; otherwise it returns <code>null</code>. (There can be at most one such mapping.) </p> <p>A return value of <code>null</code> does not <i>necessarily</i> indicate that the map contains no mapping for the key; it's also possible that the map explicitly maps the key to <code>null</code>. The <a href="../../java/util/HashMap.html#containsKey-java.lang.Object-"><code>containsKey</code></a> operation may be used to distinguish these two cases.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#get-java.lang.Object-">get</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#get-java.lang.Object-">get</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - the key whose associated value is to be returned</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key</dd> <dt><span class="seeLabel">See Also:</span></dt> <dd><a href="../../java/util/HashMap.html#put-K-V-"><code>put(Object, Object)</code></a></dd> </dl> </li> </ul> <a name="containsKey-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>containsKey</h4> <pre>public&nbsp;boolean&nbsp;containsKey(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</pre> <div class="block">Returns <tt>true</tt> if this map contains a mapping for the specified key.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#containsKey-java.lang.Object-">containsKey</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#containsKey-java.lang.Object-">containsKey</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - The key whose presence in this map is to be tested</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><tt>true</tt> if this map contains a mapping for the specified key.</dd> </dl> </li> </ul> <a name="put-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="put-K-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>put</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;put(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</pre> <div class="block">Associates the specified value with the specified key in this map. If the map previously contained a mapping for the key, the old value is replaced.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#put-K-V-">put</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#put-K-V-">put</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>value</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with <tt>key</tt>, or <tt>null</tt> if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return can also indicate that the map previously associated <tt>null</tt> with <tt>key</tt>.)</dd> </dl> </li> </ul> <a name="putAll-java.util.Map-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>putAll</h4> <pre>public&nbsp;void&nbsp;putAll(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</pre> <div class="block">Copies all of the mappings from the specified map to this map. These mappings will replace any mappings that this map had for any of the keys currently in the specified map.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#putAll-java.util.Map-">putAll</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#putAll-java.util.Map-">putAll</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>m</code> - mappings to be stored in this map</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified map is null</dd> </dl> </li> </ul> <a name="remove-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>remove</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;remove(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</pre> <div class="block">Removes the mapping for the specified key from this map if present.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#remove-java.lang.Object-">remove</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#remove-java.lang.Object-">remove</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key whose mapping is to be removed from the map</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with <tt>key</tt>, or <tt>null</tt> if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return can also indicate that the map previously associated <tt>null</tt> with <tt>key</tt>.)</dd> </dl> </li> </ul> <a name="clear--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>clear</h4> <pre>public&nbsp;void&nbsp;clear()</pre> <div class="block">Removes all of the mappings from this map. The map will be empty after this call returns.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#clear--">clear</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#clear--">clear</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> </dl> </li> </ul> <a name="containsValue-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>containsValue</h4> <pre>public&nbsp;boolean&nbsp;containsValue(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</pre> <div class="block">Returns <tt>true</tt> if this map maps one or more keys to the specified value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#containsValue-java.lang.Object-">containsValue</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#containsValue-java.lang.Object-">containsValue</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>value</code> - value whose presence in this map is to be tested</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><tt>true</tt> if this map maps one or more keys to the specified value</dd> </dl> </li> </ul> <a name="keySet--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>keySet</h4> <pre>public&nbsp;<a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&gt;&nbsp;keySet()</pre> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own <tt>remove</tt> operation), the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#keySet--">keySet</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#keySet--">keySet</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a set view of the keys contained in this map</dd> </dl> </li> </ul> <a name="values--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>values</h4> <pre>public&nbsp;<a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;values()</pre> <div class="block">Returns a <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a> view of the values contained in this map. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. If the map is modified while an iteration over the collection is in progress (except through the iterator's own <tt>remove</tt> operation), the results of the iteration are undefined. The collection supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Collection.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#values--">values</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#values--">values</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a view of the values contained in this map</dd> </dl> </li> </ul> <a name="entrySet--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>entrySet</h4> <pre>public&nbsp;<a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&gt;&nbsp;entrySet()</pre> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the mappings contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own <tt>remove</tt> operation, or through the <tt>setValue</tt> operation on a map entry returned by the iterator) the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#entrySet--">entrySet</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#entrySet--">entrySet</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a set view of the mappings contained in this map</dd> </dl> </li> </ul> <a name="getOrDefault-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="getOrDefault-java.lang.Object-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>getOrDefault</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;getOrDefault(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;defaultValue)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#getOrDefault-java.lang.Object-V-">Map</a></code></span> </div> <div class="block">Returns the value to which the specified key is mapped, or <code>defaultValue</code> if this map contains no mapping for the key.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#getOrDefault-java.lang.Object-V-">getOrDefault</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - the key whose associated value is to be returned</dd> <dd><code>defaultValue</code> - the default mapping of the key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the value to which the specified key is mapped, or <code>defaultValue</code> if this map contains no mapping for the key</dd> </dl> </li> </ul> <a name="putIfAbsent-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="putIfAbsent-K-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>putIfAbsent</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;putIfAbsent(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#putIfAbsent-K-V-">Map</a></code></span> </div> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>) associates it with the given value and returns <code>null</code>, else returns the current value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#putIfAbsent-K-V-">putIfAbsent</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>value</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with the specified key, or <code>null</code> if there was no mapping for the key. (A <code>null</code> return can also indicate that the map previously associated <code>null</code> with the key, if the implementation supports null values.)</dd> </dl> </li> </ul> <a name="remove-java.lang.Object-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>remove</h4> <pre>public&nbsp;boolean&nbsp;remove(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#remove-java.lang.Object-java.lang.Object-">Map</a></code></span> </div> <div class="block">Removes the entry for the specified key only if it is currently mapped to the specified value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#remove-java.lang.Object-java.lang.Object-">remove</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is associated</dd> <dd><code>value</code> - value expected to be associated with the specified key </dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><code>true</code> if the value was removed</dd> </dl> </li> </ul> <a name="replace-java.lang.Object-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="replace-K-V-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>replace</h4> <pre>public&nbsp;boolean&nbsp;replace(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;oldValue, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;newValue)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#replace-K-V-V-">Map</a></code></span> </div> <div class="block">Replaces the entry for the specified key only if currently mapped to the specified value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#replace-K-V-V-">replace</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is associated</dd> <dd><code>oldValue</code> - value expected to be associated with the specified key</dd> <dd><code>newValue</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><code>true</code> if the value was replaced</dd> </dl> </li> </ul> <a name="replace-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="replace-K-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>replace</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;replace(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#replace-K-V-">Map</a></code></span> </div> <div class="block">Replaces the entry for the specified key only if it is currently mapped to some value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#replace-K-V-">replace</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is associated</dd> <dd><code>value</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with the specified key, or <code>null</code> if there was no mapping for the key. (A <code>null</code> return can also indicate that the map previously associated <code>null</code> with the key, if the implementation supports null values.)</dd> </dl> </li> </ul> <a name="computeIfAbsent-java.lang.Object-java.util.function.Function-"> <!-- --> </a><a name="computeIfAbsent-K-java.util.function.Function-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>computeIfAbsent</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;computeIfAbsent(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/Function.html" title="interface in java.util.function">Function</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;mappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#computeIfAbsent-K-java.util.function.Function-">Map</a></code></span> </div> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>), attempts to compute its value using the given mapping function and enters it into this map unless <code>null</code>. <p>If the function returns <code>null</code> no mapping is recorded. If the function itself throws an (unchecked) exception, the exception is rethrown, and no mapping is recorded. The most common usage is to construct a new object serving as an initial mapped value or memoized result, as in: </p> <pre> <code> map.computeIfAbsent(key, k -&gt; new Value(f(k))); </code></pre> <p>Or to implement a multi-value map, <code>Map&lt;K,Collection&lt;V&gt;&gt;</code>, supporting multiple values per key: </p> <pre> <code> map.computeIfAbsent(key, k -&gt; new HashSet&lt;V&gt;()).add(v); </code></pre> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#computeIfAbsent-K-java.util.function.Function-">computeIfAbsent</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>mappingFunction</code> - the function to compute a value</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the current (existing or computed) value associated with the specified key, or null if the computed value is null</dd> </dl> </li> </ul> <a name="computeIfPresent-java.lang.Object-java.util.function.BiFunction-"> <!-- --> </a><a name="computeIfPresent-K-java.util.function.BiFunction-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>computeIfPresent</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;computeIfPresent(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value. <p>If the function returns <code>null</code>, the mapping is removed. If the function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-">computeIfPresent</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>remappingFunction</code> - the function to compute a value</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the new value associated with the specified key, or null if none</dd> </dl> </li> </ul> <a name="compute-java.lang.Object-java.util.function.BiFunction-"> <!-- --> </a><a name="compute-K-java.util.function.BiFunction-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>compute</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;compute(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#compute-K-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">Attempts to compute a mapping for the specified key and its current mapped value (or <code>null</code> if there is no current mapping). For example, to either create or append a <code>String</code> msg to a value mapping: <pre> <code> map.compute(key, (k, v) -&gt; (v == null) ? msg : v.concat(msg))</code></pre> (Method <a href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-"><code>merge()</code></a> is often simpler to use for such purposes.) <p>If the function returns <code>null</code>, the mapping is removed (or remains absent if initially absent). If the function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#compute-K-java.util.function.BiFunction-">compute</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>remappingFunction</code> - the function to compute a value</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the new value associated with the specified key, or null if none</dd> </dl> </li> </ul> <a name="merge-java.lang.Object-java.lang.Object-java.util.function.BiFunction-"> <!-- --> </a><a name="merge-K-V-java.util.function.BiFunction-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>merge</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;merge(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value. Otherwise, replaces the associated value with the results of the given remapping function, or removes if the result is <code>null</code>. This method may be of use when combining multiple mapped values for a key. For example, to either create or append a <code>String msg</code> to a value mapping: <pre> <code> map.merge(key, msg, String::concat) </code></pre> <p>If the function returns <code>null</code> the mapping is removed. If the function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-">merge</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the resulting value is to be associated </dd> <dd><code>value</code> - the non-null value to be merged with the existing value associated with the key or, if no existing value or a null value is associated with the key, to be associated with the key</dd> <dd><code>remappingFunction</code> - the function to recompute a value if present</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the new value associated with the specified key, or null if no value is associated with the key</dd> </dl> </li> </ul> <a name="forEach-java.util.function.BiConsumer-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>forEach</h4> <pre>public&nbsp;void&nbsp;forEach(<a href="../../java/util/function/BiConsumer.html" title="interface in java.util.function">BiConsumer</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;action)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#forEach-java.util.function.BiConsumer-">Map</a></code></span> </div> <div class="block">Performs the given action for each entry in this map until all entries have been processed or the action throws an exception. Unless otherwise specified by the implementing class, actions are performed in the order of entry set iteration (if an iteration order is specified.) Exceptions thrown by the action are relayed to the caller.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#forEach-java.util.function.BiConsumer-">forEach</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>action</code> - The action to be performed for each entry</dd> </dl> </li> </ul> <a name="replaceAll-java.util.function.BiFunction-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>replaceAll</h4> <pre>public&nbsp;void&nbsp;replaceAll(<a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;function)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#replaceAll-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception. Exceptions thrown by the function are relayed to the caller.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#replaceAll-java.util.function.BiFunction-">replaceAll</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>function</code> - the function to apply to each entry</dd> </dl> </li> </ul> <a name="clone--"> <!-- --> </a> <ul class="blockListLast"> <li class="blockList"> <h4>clone</h4> <pre>public&nbsp;<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;clone()</pre> <div class="block">Returns a shallow copy of this <tt>HashMap</tt> instance: the keys and values themselves are not cloned.</div> <dl> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#clone--">clone</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a shallow copy of this map</dd> <dt><span class="seeLabel">See Also:</span></dt> <dd><a href="../../java/lang/Cloneable.html" title="interface in java.lang"><code>Cloneable</code></a></dd> </dl> </li> </ul> </li> </ul> </li> 
]

div{
  class = (summary:)
} : [
 <li class="blockList"> <!-- ======== NESTED CLASS SUMMARY ======== --> <ul class="blockList"> <li class="blockList"><a name="nested.class.summary"> <!-- --> </a> <h3>Nested Class Summary</h3> <ul class="blockList"> <li class="blockList"><a name="nested.classes.inherited.from.class.java.util.AbstractMap"> <!-- --> </a> <h3>Nested classes/interfaces inherited from class&nbsp;java.util.<a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a></h3> <code><a href="../../java/util/AbstractMap.SimpleEntry.html" title="class in java.util">AbstractMap.SimpleEntry</a>&lt;<a href="../../java/util/AbstractMap.SimpleEntry.html" title="type parameter in AbstractMap.SimpleEntry">K</a>,<a href="../../java/util/AbstractMap.SimpleEntry.html" title="type parameter in AbstractMap.SimpleEntry">V</a>&gt;, <a href="../../java/util/AbstractMap.SimpleImmutableEntry.html" title="class in java.util">AbstractMap.SimpleImmutableEntry</a>&lt;<a href="../../java/util/AbstractMap.SimpleImmutableEntry.html" title="type parameter in AbstractMap.SimpleImmutableEntry">K</a>,<a href="../../java/util/AbstractMap.SimpleImmutableEntry.html" title="type parameter in AbstractMap.SimpleImmutableEntry">V</a>&gt;</code> </li> </ul> <ul class="blockList"> <li class="blockList"><a name="nested.classes.inherited.from.class.java.util.Map"> <!-- --> </a> <h3>Nested classes/interfaces inherited from interface&nbsp;java.util.<a href="../../java/util/Map.html" title="interface in java.util">Map</a></h3> <code><a href="../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../java/util/Map.Entry.html" title="type parameter in Map.Entry">K</a>,<a href="../../java/util/Map.Entry.html" title="type parameter in Map.Entry">V</a>&gt;</code> </li> </ul> </li> </ul> <!-- ======== CONSTRUCTOR SUMMARY ======== --> <ul class="blockList"> <li class="blockList"><a name="constructor.summary"> <!-- --> </a> <h3>Constructor Summary</h3> <table class="memberSummary" summary="Constructor Summary table, listing constructors, and an explanation" cellspacing="0" cellpadding="3" border="0"> <caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption> <tbody> <tr> <th class="colOne" scope="col">Constructor and Description</th> </tr> <tr class="altColor"> <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap--">HashMap</a></span>()</code> <div class="block">Constructs an empty <tt>HashMap</tt> with the default initial capacity (16) and the default load factor (0.75).</div> </td> </tr> <tr class="rowColor"> <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap-int-">HashMap</a></span>(int&nbsp;initialCapacity)</code> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and the default load factor (0.75).</div> </td> </tr> <tr class="altColor"> <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap-int-float-">HashMap</a></span>(int&nbsp;initialCapacity, float&nbsp;loadFactor)</code> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and load factor.</div> </td> </tr> <tr class="rowColor"> <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap-java.util.Map-">HashMap</a></span>(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</code> <div class="block">Constructs a new <tt>HashMap</tt> with the same mappings as the specified <tt>Map</tt>.</div> </td> </tr> </tbody> </table> </li> </ul> <!-- ========== METHOD SUMMARY =========== --> <ul class="blockList"> <li class="blockList"><a name="method.summary"> <!-- --> </a> <h3>Method Summary</h3> <table class="memberSummary" summary="Method Summary table, listing methods, and an explanation" cellspacing="0" cellpadding="3" border="0"> <caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption> <tbody> <tr> <th class="colFirst" scope="col">Modifier and Type</th> <th class="colLast" scope="col">Method and Description</th> </tr> <tr id="i0" class="altColor"> <td class="colFirst"><code>void</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#clear--">clear</a></span>()</code> <div class="block">Removes all of the mappings from this map.</div> </td> </tr> <tr id="i1" class="rowColor"> <td class="colFirst"><code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#clone--">clone</a></span>()</code> <div class="block">Returns a shallow copy of this <tt>HashMap</tt> instance: the keys and values themselves are not cloned.</div> </td> </tr> <tr id="i2" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#compute-K-java.util.function.BiFunction-">compute</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</code> <div class="block">Attempts to compute a mapping for the specified key and its current mapped value (or <code>null</code> if there is no current mapping). </div> </td> </tr> <tr id="i3" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#computeIfAbsent-K-java.util.function.Function-">computeIfAbsent</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/Function.html" title="interface in java.util.function">Function</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;mappingFunction)</code> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>), attempts to compute its value using the given mapping function and enters it into this map unless <code>null</code>.</div> </td> </tr> <tr id="i4" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#computeIfPresent-K-java.util.function.BiFunction-">computeIfPresent</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</code> <div class="block">If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.</div> </td> </tr> <tr id="i5" class="rowColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#containsKey-java.lang.Object-">containsKey</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</code> <div class="block">Returns <tt>true</tt> if this map contains a mapping for the specified key.</div> </td> </tr> <tr id="i6" class="altColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#containsValue-java.lang.Object-">containsValue</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</code> <div class="block">Returns <tt>true</tt> if this map maps one or more keys to the specified value.</div> </td> </tr> <tr id="i7" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&gt;</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#entrySet--">entrySet</a></span>()</code> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the mappings contained in this map.</div> </td> </tr> <tr id="i8" class="altColor"> <td class="colFirst"><code>void</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#forEach-java.util.function.BiConsumer-">forEach</a></span>(<a href="../../java/util/function/BiConsumer.html" title="interface in java.util.function">BiConsumer</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;action)</code> <div class="block">Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.</div> </td> </tr> <tr id="i9" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#get-java.lang.Object-">get</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</code> <div class="block">Returns the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key.</div> </td> </tr> <tr id="i10" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#getOrDefault-java.lang.Object-V-">getOrDefault</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;defaultValue)</code> <div class="block">Returns the value to which the specified key is mapped, or <code>defaultValue</code> if this map contains no mapping for the key. </div> </td> </tr> <tr id="i11" class="rowColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#isEmpty--">isEmpty</a></span>()</code> <div class="block">Returns <tt>true</tt> if this map contains no key-value mappings.</div> </td> </tr> <tr id="i12" class="altColor"> <td class="colFirst"><code><a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&gt;</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#keySet--">keySet</a></span>()</code> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the keys contained in this map.</div> </td> </tr> <tr id="i13" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#merge-K-V-java.util.function.BiFunction-">merge</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</code> <div class="block">If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.</div> </td> </tr> <tr id="i14" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#put-K-V-">put</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</code> <div class="block">Associates the specified value with the specified key in this map.</div> </td> </tr> <tr id="i15" class="rowColor"> <td class="colFirst"><code>void</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#putAll-java.util.Map-">putAll</a></span>(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</code> <div class="block">Copies all of the mappings from the specified map to this map.</div> </td> </tr> <tr id="i16" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#putIfAbsent-K-V-">putIfAbsent</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</code> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>) associates it with the given value and returns <code>null</code>, else returns the current value.</div> </td> </tr> <tr id="i17" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#remove-java.lang.Object-">remove</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</code> <div class="block">Removes the mapping for the specified key from this map if present.</div> </td> </tr> <tr id="i18" class="altColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#remove-java.lang.Object-java.lang.Object-">remove</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</code> <div class="block">Removes the entry for the specified key only if it is currently mapped to the specified value.</div> </td> </tr> <tr id="i19" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#replace-K-V-">replace</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</code> <div class="block">Replaces the entry for the specified key only if it is currently mapped to some value.</div> </td> </tr> <tr id="i20" class="altColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#replace-K-V-V-">replace</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;oldValue, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;newValue)</code> <div class="block">Replaces the entry for the specified key only if currently mapped to the specified value.</div> </td> </tr> <tr id="i21" class="rowColor"> <td class="colFirst"><code>void</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#replaceAll-java.util.function.BiFunction-">replaceAll</a></span>(<a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;function)</code> <div class="block">Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.</div> </td> </tr> <tr id="i22" class="altColor"> <td class="colFirst"><code>int</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#size--">size</a></span>()</code> <div class="block">Returns the number of key-value mappings in this map. </div> </td> </tr> <tr id="i23" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#values--">values</a></span>()</code> <div class="block">Returns a <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a> view of the values contained in this map.</div> </td> </tr> </tbody> </table> <ul class="blockList"> <li class="blockList"><a name="methods.inherited.from.class.java.util.AbstractMap"> <!-- --> </a> <h3>Methods inherited from class&nbsp;java.util.<a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a></h3> <code><a href="../../java/util/AbstractMap.html#equals-java.lang.Object-">equals</a>, <a href="../../java/util/AbstractMap.html#hashCode--">hashCode</a>, <a href="../../java/util/AbstractMap.html#toString--">toString</a></code> </li> </ul> <ul class="blockList"> <li class="blockList"><a name="methods.inherited.from.class.java.lang.Object"> <!-- --> </a> <h3>Methods inherited from class&nbsp;java.lang.<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> </h3> <code><a href="../../java/lang/Object.html#finalize--">finalize</a>, <a href="../../java/lang/Object.html#getClass--">getClass</a>, <a href="../../java/lang/Object.html#notify--">notify</a>, <a href="../../java/lang/Object.html#notifyAll--">notifyAll</a>, <a href="../../java/lang/Object.html#wait--">wait</a>, <a href="../../java/lang/Object.html#wait-long-">wait</a>, <a href="../../java/lang/Object.html#wait-long-int-">wait</a></code> </li> </ul> <ul class="blockList"> <li class="blockList"><a name="methods.inherited.from.class.java.util.Map"> <!-- --> </a> <h3>Methods inherited from interface&nbsp;java.util.<a href="../../java/util/Map.html" title="interface in java.util">Map</a></h3> <code><a href="../../java/util/Map.html#equals-java.lang.Object-">equals</a>, <a href="../../java/util/Map.html#hashCode--">hashCode</a></code> </li> </ul> </li> </ul> </li> 
]

div{
  class = (description:)
} : [
 <li class="blockList"> <dl> <dt><span class="paramLabel">Type Parameters:</span></dt> <dd><code>K</code> - the type of keys maintained by this map</dd> <dd><code>V</code> - the type of mapped values</dd> </dl> <dl> <dt>All Implemented Interfaces:</dt> <dd><a href="../../java/io/Serializable.html" title="interface in java.io">Serializable</a>, <a href="../../java/lang/Cloneable.html" title="interface in java.lang">Cloneable</a>, <a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;K,V&gt;</dd> </dl> <dl> <dt>Direct Known Subclasses:</dt> <dd><a href="../../java/util/LinkedHashMap.html" title="class in java.util">LinkedHashMap</a>, <a href="../../javax/print/attribute/standard/PrinterStateReasons.html" title="class in javax.print.attribute.standard">PrinterStateReasons</a></dd> </dl> <hr> <br> <pre>public class <span class="typeNameLabel">HashMap&lt;K,V&gt;</span>extends <a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;K,V&gt;implements <a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;K,V&gt;, <a href="../../java/lang/Cloneable.html" title="interface in java.lang">Cloneable</a>, <a href="../../java/io/Serializable.html" title="interface in java.io">Serializable</a></pre> <div class="block">Hash table based implementation of the <tt>Map</tt> interface. This implementation provides all of the optional map operations, and permits <tt>null</tt> values and the <tt>null</tt> key. (The <tt>HashMap</tt> class is roughly equivalent to <tt>Hashtable</tt>, except that it is unsynchronized and permits nulls.) This class makes no guarantees as to the order of the map; in particular, it does not guarantee that the order will remain constant over time. <p>This implementation provides constant-time performance for the basic operations (<tt>get</tt> and <tt>put</tt>), assuming the hash function disperses the elements properly among the buckets. Iteration over collection views requires time proportional to the "capacity" of the <tt>HashMap</tt> instance (the number of buckets) plus its size (the number of key-value mappings). Thus, it's very important not to set the initial capacity too high (or the load factor too low) if iteration performance is important. </p> <p>An instance of <tt>HashMap</tt> has two parameters that affect its performance: <i>initial capacity</i> and <i>load factor</i>. The <i>capacity</i> is the number of buckets in the hash table, and the initial capacity is simply the capacity at the time the hash table is created. The <i>load factor</i> is a measure of how full the hash table is allowed to get before its capacity is automatically increased. When the number of entries in the hash table exceeds the product of the load factor and the current capacity, the hash table is <i>rehashed</i> (that is, internal data structures are rebuilt) so that the hash table has approximately twice the number of buckets. </p> <p>As a general rule, the default load factor (.75) offers a good tradeoff between time and space costs. Higher values decrease the space overhead but increase the lookup cost (reflected in most of the operations of the <tt>HashMap</tt> class, including <tt>get</tt> and <tt>put</tt>). The expected number of entries in the map and its load factor should be taken into account when setting its initial capacity, so as to minimize the number of rehash operations. If the initial capacity is greater than the maximum number of entries divided by the load factor, no rehash operations will ever occur. </p> <p>If many mappings are to be stored in a <tt>HashMap</tt> instance, creating it with a sufficiently large capacity will allow the mappings to be stored more efficiently than letting it perform automatic rehashing as needed to grow the table. Note that using many keys with the same <code>hashCode()</code> is a sure way to slow down performance of any hash table. To ameliorate impact, when keys are <a href="../../java/lang/Comparable.html" title="interface in java.lang"><code>Comparable</code></a>, this class may use comparison order among keys to help break ties. </p> <p><strong>Note that this implementation is not synchronized.</strong> If multiple threads access a hash map concurrently, and at least one of the threads modifies the map structurally, it <i>must</i> be synchronized externally. (A structural modification is any operation that adds or deletes one or more mappings; merely changing the value associated with a key that an instance already contains is not a structural modification.) This is typically accomplished by synchronizing on some object that naturally encapsulates the map. If no such object exists, the map should be "wrapped" using the <a href="../../java/util/Collections.html#synchronizedMap-java.util.Map-"><code>Collections.synchronizedMap</code></a> method. This is best done at creation time, to prevent accidental unsynchronized access to the map:</p> <pre> Map m = Collections.synchronizedMap(new HashMap(...));</pre> <p>The iterators returned by all of this class's "collection view methods" are <i>fail-fast</i>: if the map is structurally modified at any time after the iterator is created, in any way except through the iterator's own <tt>remove</tt> method, the iterator will throw a <a href="../../java/util/ConcurrentModificationException.html" title="class in java.util"><code>ConcurrentModificationException</code></a>. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. </p> <p>Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw <tt>ConcurrentModificationException</tt> on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: <i>the fail-fast behavior of iterators should be used only to detect bugs.</i> </p> <p>This class is a member of the <a href="../../../technotes/guides/collections/index.html"> Java Collections Framework</a>.</p> </div> <dl> <dt><span class="simpleTagLabel">Since:</span></dt> <dd>1.2</dd> <dt><span class="seeLabel">See Also:</span></dt> <dd><a href="../../java/lang/Object.html#hashCode--"><code>Object.hashCode()</code></a>, <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a>, <a href="../../java/util/Map.html" title="interface in java.util"><code>Map</code></a>, <a href="../../java/util/TreeMap.html" title="class in java.util"><code>TreeMap</code></a>, <a href="../../java/util/Hashtable.html" title="class in java.util"><code>Hashtable</code></a>, <a href="../../serialized-form.html#java.util.HashMap">Serialized Form</a></dd> </dl> </li> 
]

ul{
  class = (inheritance:)
} : [
 <ul class="inheritance"> <li><a href="../../java/util/AbstractMap.html" title="class in java.util">java.util.AbstractMap</a>&lt;K,V&gt;</li> <li> <ul class="inheritance"> <li>java.util.HashMap&lt;K,V&gt;</li> </ul> </li> </ul> 
]

li {} : [
 <li><a href="../../java/util/AbstractMap.html" title="class in java.util">java.util.AbstractMap</a>&lt;K,V&gt;</li> <li> <ul class="inheritance"> <li>java.util.HashMap&lt;K,V&gt;</li> </ul> </li> 
]

li {} : [
java.lang.Object
]

a{
  href = (../../java/lang/Object.html:)
  title = (class:in:java.lang:)
} : [

]

ul{
  class = (inheritance:)
} : [
 <ul class="inheritance"> <li>java.util.HashMap&lt;K,V&gt;</li> </ul> 
]

li {} : [
 <li>java.util.HashMap&lt;K,V&gt;</li> 
]

li {} : [
java.util.AbstractMap
]

a{
  href = (../../java/util/AbstractMap.html:)
  title = (class:in:java.util:)
} : [

]

ul{
  class = (inheritance:)
} : [
java.util.HashMap&lt;K,V&gt;
]

li {} : [

]

ul{
  class = (blockList:)
} : [
 <dl> <dt><span class="paramLabel">Type Parameters:</span></dt> <dd><code>K</code> - the type of keys maintained by this map</dd> <dd><code>V</code> - the type of mapped values</dd> </dl> <dl> <dt>All Implemented Interfaces:</dt> <dd><a href="../../java/io/Serializable.html" title="interface in java.io">Serializable</a>, <a href="../../java/lang/Cloneable.html" title="interface in java.lang">Cloneable</a>, <a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;K,V&gt;</dd> </dl> <dl> <dt>Direct Known Subclasses:</dt> <dd><a href="../../java/util/LinkedHashMap.html" title="class in java.util">LinkedHashMap</a>, <a href="../../javax/print/attribute/standard/PrinterStateReasons.html" title="class in javax.print.attribute.standard">PrinterStateReasons</a></dd> </dl> <hr> <br> <pre>public class <span class="typeNameLabel">HashMap&lt;K,V&gt;</span>extends <a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;K,V&gt;implements <a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;K,V&gt;, <a href="../../java/lang/Cloneable.html" title="interface in java.lang">Cloneable</a>, <a href="../../java/io/Serializable.html" title="interface in java.io">Serializable</a></pre> <div class="block">Hash table based implementation of the <tt>Map</tt> interface. This implementation provides all of the optional map operations, and permits <tt>null</tt> values and the <tt>null</tt> key. (The <tt>HashMap</tt> class is roughly equivalent to <tt>Hashtable</tt>, except that it is unsynchronized and permits nulls.) This class makes no guarantees as to the order of the map; in particular, it does not guarantee that the order will remain constant over time. <p>This implementation provides constant-time performance for the basic operations (<tt>get</tt> and <tt>put</tt>), assuming the hash function disperses the elements properly among the buckets. Iteration over collection views requires time proportional to the "capacity" of the <tt>HashMap</tt> instance (the number of buckets) plus its size (the number of key-value mappings). Thus, it's very important not to set the initial capacity too high (or the load factor too low) if iteration performance is important. </p> <p>An instance of <tt>HashMap</tt> has two parameters that affect its performance: <i>initial capacity</i> and <i>load factor</i>. The <i>capacity</i> is the number of buckets in the hash table, and the initial capacity is simply the capacity at the time the hash table is created. The <i>load factor</i> is a measure of how full the hash table is allowed to get before its capacity is automatically increased. When the number of entries in the hash table exceeds the product of the load factor and the current capacity, the hash table is <i>rehashed</i> (that is, internal data structures are rebuilt) so that the hash table has approximately twice the number of buckets. </p> <p>As a general rule, the default load factor (.75) offers a good tradeoff between time and space costs. Higher values decrease the space overhead but increase the lookup cost (reflected in most of the operations of the <tt>HashMap</tt> class, including <tt>get</tt> and <tt>put</tt>). The expected number of entries in the map and its load factor should be taken into account when setting its initial capacity, so as to minimize the number of rehash operations. If the initial capacity is greater than the maximum number of entries divided by the load factor, no rehash operations will ever occur. </p> <p>If many mappings are to be stored in a <tt>HashMap</tt> instance, creating it with a sufficiently large capacity will allow the mappings to be stored more efficiently than letting it perform automatic rehashing as needed to grow the table. Note that using many keys with the same <code>hashCode()</code> is a sure way to slow down performance of any hash table. To ameliorate impact, when keys are <a href="../../java/lang/Comparable.html" title="interface in java.lang"><code>Comparable</code></a>, this class may use comparison order among keys to help break ties. </p> <p><strong>Note that this implementation is not synchronized.</strong> If multiple threads access a hash map concurrently, and at least one of the threads modifies the map structurally, it <i>must</i> be synchronized externally. (A structural modification is any operation that adds or deletes one or more mappings; merely changing the value associated with a key that an instance already contains is not a structural modification.) This is typically accomplished by synchronizing on some object that naturally encapsulates the map. If no such object exists, the map should be "wrapped" using the <a href="../../java/util/Collections.html#synchronizedMap-java.util.Map-"><code>Collections.synchronizedMap</code></a> method. This is best done at creation time, to prevent accidental unsynchronized access to the map:</p> <pre> Map m = Collections.synchronizedMap(new HashMap(...));</pre> <p>The iterators returned by all of this class's "collection view methods" are <i>fail-fast</i>: if the map is structurally modified at any time after the iterator is created, in any way except through the iterator's own <tt>remove</tt> method, the iterator will throw a <a href="../../java/util/ConcurrentModificationException.html" title="class in java.util"><code>ConcurrentModificationException</code></a>. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. </p> <p>Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw <tt>ConcurrentModificationException</tt> on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: <i>the fail-fast behavior of iterators should be used only to detect bugs.</i> </p> <p>This class is a member of the <a href="../../../technotes/guides/collections/index.html"> Java Collections Framework</a>.</p> </div> <dl> <dt><span class="simpleTagLabel">Since:</span></dt> <dd>1.2</dd> <dt><span class="seeLabel">See Also:</span></dt> <dd><a href="../../java/lang/Object.html#hashCode--"><code>Object.hashCode()</code></a>, <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a>, <a href="../../java/util/Map.html" title="interface in java.util"><code>Map</code></a>, <a href="../../java/util/TreeMap.html" title="class in java.util"><code>TreeMap</code></a>, <a href="../../java/util/Hashtable.html" title="class in java.util"><code>Hashtable</code></a>, <a href="../../serialized-form.html#java.util.HashMap">Serialized Form</a></dd> </dl> 
]

li{
  class = (blockList:)
} : [
 <dt><span class="simpleTagLabel">Since:</span></dt> <dd>1.2</dd> <dt><span class="seeLabel">See Also:</span></dt> <dd><a href="../../java/lang/Object.html#hashCode--"><code>Object.hashCode()</code></a>, <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a>, <a href="../../java/util/Map.html" title="interface in java.util"><code>Map</code></a>, <a href="../../java/util/TreeMap.html" title="class in java.util"><code>TreeMap</code></a>, <a href="../../java/util/Hashtable.html" title="class in java.util"><code>Hashtable</code></a>, <a href="../../serialized-form.html#java.util.HashMap">Serialized Form</a></dd> 
]

dl {} : [
<a href="../../java/lang/Object.html#hashCode--"><code>Object.hashCode()</code></a>, <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a>, <a href="../../java/util/Map.html" title="interface in java.util"><code>Map</code></a>, <a href="../../java/util/TreeMap.html" title="class in java.util"><code>TreeMap</code></a>, <a href="../../java/util/Hashtable.html" title="class in java.util"><code>Hashtable</code></a>, <a href="../../serialized-form.html#java.util.HashMap">Serialized Form</a>
]

div{
  class = (block:)
} : [
This class is a member of the <a href="../../../technotes/guides/collections/index.html"> Java Collections Framework</a>.
]

pre {} : [
Serializable
]

br {} : [

]

hr {} : [

]

dl {} : [
<a href="../../java/util/LinkedHashMap.html" title="class in java.util">LinkedHashMap</a>, <a href="../../javax/print/attribute/standard/PrinterStateReasons.html" title="class in javax.print.attribute.standard">PrinterStateReasons</a>
]

dl {} : [
<a href="../../java/io/Serializable.html" title="interface in java.io">Serializable</a>, <a href="../../java/lang/Cloneable.html" title="interface in java.lang">Cloneable</a>, <a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;K,V&gt;
]

dl {} : [
<code>V</code> - the type of mapped values
]

dd {} : [
V
]

dd {} : [
K
]

dt {} : [
Type Parameters:
]

span{
  class = (paramLabel:)
} : [

]

code {} : [

]

code {} : [

]

dd {} : [
Map
]

dt {} : [

]

a{
  href = (../../java/util/Map.html:)
  title = (interface:in:java.util:)
} : [

]

a{
  href = (../../java/lang/Cloneable.html:)
  title = (interface:in:java.lang:)
} : [

]

a{
  href = (../../java/io/Serializable.html:)
  title = (interface:in:java.io:)
} : [

]

dd {} : [
PrinterStateReasons
]

dt {} : [

]

a{
  href = (../../javax/print/attribute/standard/PrinterStateReasons.html:)
  title = (class:in:javax.print.attribute.standard:)
} : [

]

a{
  href = (../../java/util/LinkedHashMap.html:)
  title = (class:in:java.util:)
} : [

]

a{
  href = (../../java/io/Serializable.html:)
  title = (interface:in:java.io:)
} : [

]

a{
  href = (../../java/lang/Cloneable.html:)
  title = (interface:in:java.lang:)
} : [

]

a{
  href = (../../java/util/Map.html:)
  title = (interface:in:java.util:)
} : [

]

a{
  href = (../../java/util/AbstractMap.html:)
  title = (class:in:java.util:)
} : [

]

span{
  class = (typeNameLabel:)
} : [

]

p {} : [
 Java Collections Framework
]

p {} : [
the fail-fast behavior of iterators should be used only to detect bugs.
]

p {} : [
<code>ConcurrentModificationException</code>
]

pre {} : [

]

p {} : [
<code>Collections.synchronizedMap</code>
]

p {} : [
<code>Comparable</code>
]

p {} : [
put
]

p {} : [
rehashed
]

p {} : [
HashMap
]

tt {} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

i {} : [

]

i {} : [

]

i {} : [

]

i {} : [

]

i {} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

a{
  href = (../../java/lang/Comparable.html:)
  title = (interface:in:java.lang:)
} : [
Comparable
]

code {} : [

]

tt {} : [

]

code {} : [

]

a{
  href = (../../java/util/Collections.html#synchronizedMap-java.util.Map-:)
} : [
Collections.synchronizedMap
]

i {} : [

]

strong {} : [

]

code {} : [

]

a{
  href = (../../java/util/ConcurrentModificationException.html:)
  title = (class:in:java.util:)
} : [
ConcurrentModificationException
]

tt {} : [

]

i {} : [

]

code {} : [

]

i {} : [

]

tt {} : [

]

a{
  href = (../../../technotes/guides/collections/index.html:)
} : [

]

dd {} : [
Serialized Form
]

dt {} : [
See Also:
]

dd {} : [

]

dt {} : [
Since:
]

span{
  class = (simpleTagLabel:)
} : [

]

span{
  class = (seeLabel:)
} : [

]

a{
  href = (../../serialized-form.html#java.util.HashMap:)
} : [

]

a{
  href = (../../java/util/Hashtable.html:)
  title = (class:in:java.util:)
} : [
Hashtable
]

a{
  href = (../../java/util/TreeMap.html:)
  title = (class:in:java.util:)
} : [
TreeMap
]

a{
  href = (../../java/util/Map.html:)
  title = (interface:in:java.util:)
} : [
Map
]

a{
  href = (../../java/util/Collection.html:)
  title = (interface:in:java.util:)
} : [
Collection
]

a{
  href = (../../java/lang/Object.html#hashCode--:)
} : [
Object.hashCode()
]

code {} : [

]

code {} : [

]

code {} : [

]

code {} : [

]

code {} : [

]

ul{
  class = (blockList:)
} : [
 <!-- ======== NESTED CLASS SUMMARY ======== --> <ul class="blockList"> <li class="blockList"><a name="nested.class.summary"> <!-- --> </a> <h3>Nested Class Summary</h3> <ul class="blockList"> <li class="blockList"><a name="nested.classes.inherited.from.class.java.util.AbstractMap"> <!-- --> </a> <h3>Nested classes/interfaces inherited from class&nbsp;java.util.<a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a></h3> <code><a href="../../java/util/AbstractMap.SimpleEntry.html" title="class in java.util">AbstractMap.SimpleEntry</a>&lt;<a href="../../java/util/AbstractMap.SimpleEntry.html" title="type parameter in AbstractMap.SimpleEntry">K</a>,<a href="../../java/util/AbstractMap.SimpleEntry.html" title="type parameter in AbstractMap.SimpleEntry">V</a>&gt;, <a href="../../java/util/AbstractMap.SimpleImmutableEntry.html" title="class in java.util">AbstractMap.SimpleImmutableEntry</a>&lt;<a href="../../java/util/AbstractMap.SimpleImmutableEntry.html" title="type parameter in AbstractMap.SimpleImmutableEntry">K</a>,<a href="../../java/util/AbstractMap.SimpleImmutableEntry.html" title="type parameter in AbstractMap.SimpleImmutableEntry">V</a>&gt;</code> </li> </ul> <ul class="blockList"> <li class="blockList"><a name="nested.classes.inherited.from.class.java.util.Map"> <!-- --> </a> <h3>Nested classes/interfaces inherited from interface&nbsp;java.util.<a href="../../java/util/Map.html" title="interface in java.util">Map</a></h3> <code><a href="../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../java/util/Map.Entry.html" title="type parameter in Map.Entry">K</a>,<a href="../../java/util/Map.Entry.html" title="type parameter in Map.Entry">V</a>&gt;</code> </li> </ul> </li> </ul> <!-- ======== CONSTRUCTOR SUMMARY ======== --> <ul class="blockList"> <li class="blockList"><a name="constructor.summary"> <!-- --> </a> <h3>Constructor Summary</h3> <table class="memberSummary" summary="Constructor Summary table, listing constructors, and an explanation" cellspacing="0" cellpadding="3" border="0"> <caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption> <tbody> <tr> <th class="colOne" scope="col">Constructor and Description</th> </tr> <tr class="altColor"> <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap--">HashMap</a></span>()</code> <div class="block">Constructs an empty <tt>HashMap</tt> with the default initial capacity (16) and the default load factor (0.75).</div> </td> </tr> <tr class="rowColor"> <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap-int-">HashMap</a></span>(int&nbsp;initialCapacity)</code> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and the default load factor (0.75).</div> </td> </tr> <tr class="altColor"> <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap-int-float-">HashMap</a></span>(int&nbsp;initialCapacity, float&nbsp;loadFactor)</code> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and load factor.</div> </td> </tr> <tr class="rowColor"> <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap-java.util.Map-">HashMap</a></span>(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</code> <div class="block">Constructs a new <tt>HashMap</tt> with the same mappings as the specified <tt>Map</tt>.</div> </td> </tr> </tbody> </table> </li> </ul> <!-- ========== METHOD SUMMARY =========== --> <ul class="blockList"> <li class="blockList"><a name="method.summary"> <!-- --> </a> <h3>Method Summary</h3> <table class="memberSummary" summary="Method Summary table, listing methods, and an explanation" cellspacing="0" cellpadding="3" border="0"> <caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption> <tbody> <tr> <th class="colFirst" scope="col">Modifier and Type</th> <th class="colLast" scope="col">Method and Description</th> </tr> <tr id="i0" class="altColor"> <td class="colFirst"><code>void</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#clear--">clear</a></span>()</code> <div class="block">Removes all of the mappings from this map.</div> </td> </tr> <tr id="i1" class="rowColor"> <td class="colFirst"><code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#clone--">clone</a></span>()</code> <div class="block">Returns a shallow copy of this <tt>HashMap</tt> instance: the keys and values themselves are not cloned.</div> </td> </tr> <tr id="i2" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#compute-K-java.util.function.BiFunction-">compute</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</code> <div class="block">Attempts to compute a mapping for the specified key and its current mapped value (or <code>null</code> if there is no current mapping). </div> </td> </tr> <tr id="i3" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#computeIfAbsent-K-java.util.function.Function-">computeIfAbsent</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/Function.html" title="interface in java.util.function">Function</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;mappingFunction)</code> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>), attempts to compute its value using the given mapping function and enters it into this map unless <code>null</code>.</div> </td> </tr> <tr id="i4" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#computeIfPresent-K-java.util.function.BiFunction-">computeIfPresent</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</code> <div class="block">If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.</div> </td> </tr> <tr id="i5" class="rowColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#containsKey-java.lang.Object-">containsKey</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</code> <div class="block">Returns <tt>true</tt> if this map contains a mapping for the specified key.</div> </td> </tr> <tr id="i6" class="altColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#containsValue-java.lang.Object-">containsValue</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</code> <div class="block">Returns <tt>true</tt> if this map maps one or more keys to the specified value.</div> </td> </tr> <tr id="i7" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&gt;</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#entrySet--">entrySet</a></span>()</code> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the mappings contained in this map.</div> </td> </tr> <tr id="i8" class="altColor"> <td class="colFirst"><code>void</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#forEach-java.util.function.BiConsumer-">forEach</a></span>(<a href="../../java/util/function/BiConsumer.html" title="interface in java.util.function">BiConsumer</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;action)</code> <div class="block">Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.</div> </td> </tr> <tr id="i9" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#get-java.lang.Object-">get</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</code> <div class="block">Returns the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key.</div> </td> </tr> <tr id="i10" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#getOrDefault-java.lang.Object-V-">getOrDefault</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;defaultValue)</code> <div class="block">Returns the value to which the specified key is mapped, or <code>defaultValue</code> if this map contains no mapping for the key. </div> </td> </tr> <tr id="i11" class="rowColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#isEmpty--">isEmpty</a></span>()</code> <div class="block">Returns <tt>true</tt> if this map contains no key-value mappings.</div> </td> </tr> <tr id="i12" class="altColor"> <td class="colFirst"><code><a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&gt;</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#keySet--">keySet</a></span>()</code> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the keys contained in this map.</div> </td> </tr> <tr id="i13" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#merge-K-V-java.util.function.BiFunction-">merge</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</code> <div class="block">If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.</div> </td> </tr> <tr id="i14" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#put-K-V-">put</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</code> <div class="block">Associates the specified value with the specified key in this map.</div> </td> </tr> <tr id="i15" class="rowColor"> <td class="colFirst"><code>void</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#putAll-java.util.Map-">putAll</a></span>(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</code> <div class="block">Copies all of the mappings from the specified map to this map.</div> </td> </tr> <tr id="i16" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#putIfAbsent-K-V-">putIfAbsent</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</code> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>) associates it with the given value and returns <code>null</code>, else returns the current value.</div> </td> </tr> <tr id="i17" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#remove-java.lang.Object-">remove</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</code> <div class="block">Removes the mapping for the specified key from this map if present.</div> </td> </tr> <tr id="i18" class="altColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#remove-java.lang.Object-java.lang.Object-">remove</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</code> <div class="block">Removes the entry for the specified key only if it is currently mapped to the specified value.</div> </td> </tr> <tr id="i19" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#replace-K-V-">replace</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</code> <div class="block">Replaces the entry for the specified key only if it is currently mapped to some value.</div> </td> </tr> <tr id="i20" class="altColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#replace-K-V-V-">replace</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;oldValue, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;newValue)</code> <div class="block">Replaces the entry for the specified key only if currently mapped to the specified value.</div> </td> </tr> <tr id="i21" class="rowColor"> <td class="colFirst"><code>void</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#replaceAll-java.util.function.BiFunction-">replaceAll</a></span>(<a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;function)</code> <div class="block">Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.</div> </td> </tr> <tr id="i22" class="altColor"> <td class="colFirst"><code>int</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#size--">size</a></span>()</code> <div class="block">Returns the number of key-value mappings in this map. </div> </td> </tr> <tr id="i23" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#values--">values</a></span>()</code> <div class="block">Returns a <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a> view of the values contained in this map.</div> </td> </tr> </tbody> </table> <ul class="blockList"> <li class="blockList"><a name="methods.inherited.from.class.java.util.AbstractMap"> <!-- --> </a> <h3>Methods inherited from class&nbsp;java.util.<a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a></h3> <code><a href="../../java/util/AbstractMap.html#equals-java.lang.Object-">equals</a>, <a href="../../java/util/AbstractMap.html#hashCode--">hashCode</a>, <a href="../../java/util/AbstractMap.html#toString--">toString</a></code> </li> </ul> <ul class="blockList"> <li class="blockList"><a name="methods.inherited.from.class.java.lang.Object"> <!-- --> </a> <h3>Methods inherited from class&nbsp;java.lang.<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> </h3> <code><a href="../../java/lang/Object.html#finalize--">finalize</a>, <a href="../../java/lang/Object.html#getClass--">getClass</a>, <a href="../../java/lang/Object.html#notify--">notify</a>, <a href="../../java/lang/Object.html#notifyAll--">notifyAll</a>, <a href="../../java/lang/Object.html#wait--">wait</a>, <a href="../../java/lang/Object.html#wait-long-">wait</a>, <a href="../../java/lang/Object.html#wait-long-int-">wait</a></code> </li> </ul> <ul class="blockList"> <li class="blockList"><a name="methods.inherited.from.class.java.util.Map"> <!-- --> </a> <h3>Methods inherited from interface&nbsp;java.util.<a href="../../java/util/Map.html" title="interface in java.util">Map</a></h3> <code><a href="../../java/util/Map.html#equals-java.lang.Object-">equals</a>, <a href="../../java/util/Map.html#hashCode--">hashCode</a></code> </li> </ul> </li> </ul> 
]

li{
  class = (blockList:)
} : [
 <li class="blockList"><a name="method.summary"> <!-- --> </a> <h3>Method Summary</h3> <table class="memberSummary" summary="Method Summary table, listing methods, and an explanation" cellspacing="0" cellpadding="3" border="0"> <caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption> <tbody> <tr> <th class="colFirst" scope="col">Modifier and Type</th> <th class="colLast" scope="col">Method and Description</th> </tr> <tr id="i0" class="altColor"> <td class="colFirst"><code>void</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#clear--">clear</a></span>()</code> <div class="block">Removes all of the mappings from this map.</div> </td> </tr> <tr id="i1" class="rowColor"> <td class="colFirst"><code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#clone--">clone</a></span>()</code> <div class="block">Returns a shallow copy of this <tt>HashMap</tt> instance: the keys and values themselves are not cloned.</div> </td> </tr> <tr id="i2" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#compute-K-java.util.function.BiFunction-">compute</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</code> <div class="block">Attempts to compute a mapping for the specified key and its current mapped value (or <code>null</code> if there is no current mapping). </div> </td> </tr> <tr id="i3" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#computeIfAbsent-K-java.util.function.Function-">computeIfAbsent</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/Function.html" title="interface in java.util.function">Function</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;mappingFunction)</code> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>), attempts to compute its value using the given mapping function and enters it into this map unless <code>null</code>.</div> </td> </tr> <tr id="i4" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#computeIfPresent-K-java.util.function.BiFunction-">computeIfPresent</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</code> <div class="block">If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.</div> </td> </tr> <tr id="i5" class="rowColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#containsKey-java.lang.Object-">containsKey</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</code> <div class="block">Returns <tt>true</tt> if this map contains a mapping for the specified key.</div> </td> </tr> <tr id="i6" class="altColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#containsValue-java.lang.Object-">containsValue</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</code> <div class="block">Returns <tt>true</tt> if this map maps one or more keys to the specified value.</div> </td> </tr> <tr id="i7" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&gt;</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#entrySet--">entrySet</a></span>()</code> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the mappings contained in this map.</div> </td> </tr> <tr id="i8" class="altColor"> <td class="colFirst"><code>void</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#forEach-java.util.function.BiConsumer-">forEach</a></span>(<a href="../../java/util/function/BiConsumer.html" title="interface in java.util.function">BiConsumer</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;action)</code> <div class="block">Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.</div> </td> </tr> <tr id="i9" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#get-java.lang.Object-">get</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</code> <div class="block">Returns the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key.</div> </td> </tr> <tr id="i10" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#getOrDefault-java.lang.Object-V-">getOrDefault</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;defaultValue)</code> <div class="block">Returns the value to which the specified key is mapped, or <code>defaultValue</code> if this map contains no mapping for the key. </div> </td> </tr> <tr id="i11" class="rowColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#isEmpty--">isEmpty</a></span>()</code> <div class="block">Returns <tt>true</tt> if this map contains no key-value mappings.</div> </td> </tr> <tr id="i12" class="altColor"> <td class="colFirst"><code><a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&gt;</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#keySet--">keySet</a></span>()</code> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the keys contained in this map.</div> </td> </tr> <tr id="i13" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#merge-K-V-java.util.function.BiFunction-">merge</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</code> <div class="block">If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.</div> </td> </tr> <tr id="i14" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#put-K-V-">put</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</code> <div class="block">Associates the specified value with the specified key in this map.</div> </td> </tr> <tr id="i15" class="rowColor"> <td class="colFirst"><code>void</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#putAll-java.util.Map-">putAll</a></span>(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</code> <div class="block">Copies all of the mappings from the specified map to this map.</div> </td> </tr> <tr id="i16" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#putIfAbsent-K-V-">putIfAbsent</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</code> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>) associates it with the given value and returns <code>null</code>, else returns the current value.</div> </td> </tr> <tr id="i17" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#remove-java.lang.Object-">remove</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</code> <div class="block">Removes the mapping for the specified key from this map if present.</div> </td> </tr> <tr id="i18" class="altColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#remove-java.lang.Object-java.lang.Object-">remove</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</code> <div class="block">Removes the entry for the specified key only if it is currently mapped to the specified value.</div> </td> </tr> <tr id="i19" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#replace-K-V-">replace</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</code> <div class="block">Replaces the entry for the specified key only if it is currently mapped to some value.</div> </td> </tr> <tr id="i20" class="altColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#replace-K-V-V-">replace</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;oldValue, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;newValue)</code> <div class="block">Replaces the entry for the specified key only if currently mapped to the specified value.</div> </td> </tr> <tr id="i21" class="rowColor"> <td class="colFirst"><code>void</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#replaceAll-java.util.function.BiFunction-">replaceAll</a></span>(<a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;function)</code> <div class="block">Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.</div> </td> </tr> <tr id="i22" class="altColor"> <td class="colFirst"><code>int</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#size--">size</a></span>()</code> <div class="block">Returns the number of key-value mappings in this map. </div> </td> </tr> <tr id="i23" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#values--">values</a></span>()</code> <div class="block">Returns a <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a> view of the values contained in this map.</div> </td> </tr> </tbody> </table> <ul class="blockList"> <li class="blockList"><a name="methods.inherited.from.class.java.util.AbstractMap"> <!-- --> </a> <h3>Methods inherited from class&nbsp;java.util.<a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a></h3> <code><a href="../../java/util/AbstractMap.html#equals-java.lang.Object-">equals</a>, <a href="../../java/util/AbstractMap.html#hashCode--">hashCode</a>, <a href="../../java/util/AbstractMap.html#toString--">toString</a></code> </li> </ul> <ul class="blockList"> <li class="blockList"><a name="methods.inherited.from.class.java.lang.Object"> <!-- --> </a> <h3>Methods inherited from class&nbsp;java.lang.<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> </h3> <code><a href="../../java/lang/Object.html#finalize--">finalize</a>, <a href="../../java/lang/Object.html#getClass--">getClass</a>, <a href="../../java/lang/Object.html#notify--">notify</a>, <a href="../../java/lang/Object.html#notifyAll--">notifyAll</a>, <a href="../../java/lang/Object.html#wait--">wait</a>, <a href="../../java/lang/Object.html#wait-long-">wait</a>, <a href="../../java/lang/Object.html#wait-long-int-">wait</a></code> </li> </ul> <ul class="blockList"> <li class="blockList"><a name="methods.inherited.from.class.java.util.Map"> <!-- --> </a> <h3>Methods inherited from interface&nbsp;java.util.<a href="../../java/util/Map.html" title="interface in java.util">Map</a></h3> <code><a href="../../java/util/Map.html#equals-java.lang.Object-">equals</a>, <a href="../../java/util/Map.html#hashCode--">hashCode</a></code> </li> </ul> </li> 
]

ul{
  class = (blockList:)
} : [
<a name="method.summary"> <!-- --> </a> <h3>Method Summary</h3> <table class="memberSummary" summary="Method Summary table, listing methods, and an explanation" cellspacing="0" cellpadding="3" border="0"> <caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption> <tbody> <tr> <th class="colFirst" scope="col">Modifier and Type</th> <th class="colLast" scope="col">Method and Description</th> </tr> <tr id="i0" class="altColor"> <td class="colFirst"><code>void</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#clear--">clear</a></span>()</code> <div class="block">Removes all of the mappings from this map.</div> </td> </tr> <tr id="i1" class="rowColor"> <td class="colFirst"><code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#clone--">clone</a></span>()</code> <div class="block">Returns a shallow copy of this <tt>HashMap</tt> instance: the keys and values themselves are not cloned.</div> </td> </tr> <tr id="i2" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#compute-K-java.util.function.BiFunction-">compute</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</code> <div class="block">Attempts to compute a mapping for the specified key and its current mapped value (or <code>null</code> if there is no current mapping). </div> </td> </tr> <tr id="i3" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#computeIfAbsent-K-java.util.function.Function-">computeIfAbsent</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/Function.html" title="interface in java.util.function">Function</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;mappingFunction)</code> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>), attempts to compute its value using the given mapping function and enters it into this map unless <code>null</code>.</div> </td> </tr> <tr id="i4" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#computeIfPresent-K-java.util.function.BiFunction-">computeIfPresent</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</code> <div class="block">If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.</div> </td> </tr> <tr id="i5" class="rowColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#containsKey-java.lang.Object-">containsKey</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</code> <div class="block">Returns <tt>true</tt> if this map contains a mapping for the specified key.</div> </td> </tr> <tr id="i6" class="altColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#containsValue-java.lang.Object-">containsValue</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</code> <div class="block">Returns <tt>true</tt> if this map maps one or more keys to the specified value.</div> </td> </tr> <tr id="i7" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&gt;</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#entrySet--">entrySet</a></span>()</code> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the mappings contained in this map.</div> </td> </tr> <tr id="i8" class="altColor"> <td class="colFirst"><code>void</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#forEach-java.util.function.BiConsumer-">forEach</a></span>(<a href="../../java/util/function/BiConsumer.html" title="interface in java.util.function">BiConsumer</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;action)</code> <div class="block">Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.</div> </td> </tr> <tr id="i9" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#get-java.lang.Object-">get</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</code> <div class="block">Returns the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key.</div> </td> </tr> <tr id="i10" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#getOrDefault-java.lang.Object-V-">getOrDefault</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;defaultValue)</code> <div class="block">Returns the value to which the specified key is mapped, or <code>defaultValue</code> if this map contains no mapping for the key. </div> </td> </tr> <tr id="i11" class="rowColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#isEmpty--">isEmpty</a></span>()</code> <div class="block">Returns <tt>true</tt> if this map contains no key-value mappings.</div> </td> </tr> <tr id="i12" class="altColor"> <td class="colFirst"><code><a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&gt;</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#keySet--">keySet</a></span>()</code> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the keys contained in this map.</div> </td> </tr> <tr id="i13" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#merge-K-V-java.util.function.BiFunction-">merge</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</code> <div class="block">If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.</div> </td> </tr> <tr id="i14" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#put-K-V-">put</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</code> <div class="block">Associates the specified value with the specified key in this map.</div> </td> </tr> <tr id="i15" class="rowColor"> <td class="colFirst"><code>void</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#putAll-java.util.Map-">putAll</a></span>(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</code> <div class="block">Copies all of the mappings from the specified map to this map.</div> </td> </tr> <tr id="i16" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#putIfAbsent-K-V-">putIfAbsent</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</code> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>) associates it with the given value and returns <code>null</code>, else returns the current value.</div> </td> </tr> <tr id="i17" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#remove-java.lang.Object-">remove</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</code> <div class="block">Removes the mapping for the specified key from this map if present.</div> </td> </tr> <tr id="i18" class="altColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#remove-java.lang.Object-java.lang.Object-">remove</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</code> <div class="block">Removes the entry for the specified key only if it is currently mapped to the specified value.</div> </td> </tr> <tr id="i19" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#replace-K-V-">replace</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</code> <div class="block">Replaces the entry for the specified key only if it is currently mapped to some value.</div> </td> </tr> <tr id="i20" class="altColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#replace-K-V-V-">replace</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;oldValue, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;newValue)</code> <div class="block">Replaces the entry for the specified key only if currently mapped to the specified value.</div> </td> </tr> <tr id="i21" class="rowColor"> <td class="colFirst"><code>void</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#replaceAll-java.util.function.BiFunction-">replaceAll</a></span>(<a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;function)</code> <div class="block">Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.</div> </td> </tr> <tr id="i22" class="altColor"> <td class="colFirst"><code>int</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#size--">size</a></span>()</code> <div class="block">Returns the number of key-value mappings in this map. </div> </td> </tr> <tr id="i23" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#values--">values</a></span>()</code> <div class="block">Returns a <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a> view of the values contained in this map.</div> </td> </tr> </tbody> </table> <ul class="blockList"> <li class="blockList"><a name="methods.inherited.from.class.java.util.AbstractMap"> <!-- --> </a> <h3>Methods inherited from class&nbsp;java.util.<a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a></h3> <code><a href="../../java/util/AbstractMap.html#equals-java.lang.Object-">equals</a>, <a href="../../java/util/AbstractMap.html#hashCode--">hashCode</a>, <a href="../../java/util/AbstractMap.html#toString--">toString</a></code> </li> </ul> <ul class="blockList"> <li class="blockList"><a name="methods.inherited.from.class.java.lang.Object"> <!-- --> </a> <h3>Methods inherited from class&nbsp;java.lang.<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> </h3> <code><a href="../../java/lang/Object.html#finalize--">finalize</a>, <a href="../../java/lang/Object.html#getClass--">getClass</a>, <a href="../../java/lang/Object.html#notify--">notify</a>, <a href="../../java/lang/Object.html#notifyAll--">notifyAll</a>, <a href="../../java/lang/Object.html#wait--">wait</a>, <a href="../../java/lang/Object.html#wait-long-">wait</a>, <a href="../../java/lang/Object.html#wait-long-int-">wait</a></code> </li> </ul> <ul class="blockList"> <li class="blockList"><a name="methods.inherited.from.class.java.util.Map"> <!-- --> </a> <h3>Methods inherited from interface&nbsp;java.util.<a href="../../java/util/Map.html" title="interface in java.util">Map</a></h3> <code><a href="../../java/util/Map.html#equals-java.lang.Object-">equals</a>, <a href="../../java/util/Map.html#hashCode--">hashCode</a></code> </li> </ul> 
]

ul{
  class = (blockList:)
} : [
<a name="constructor.summary"> <!-- --> </a> <h3>Constructor Summary</h3> <table class="memberSummary" summary="Constructor Summary table, listing constructors, and an explanation" cellspacing="0" cellpadding="3" border="0"> <caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption> <tbody> <tr> <th class="colOne" scope="col">Constructor and Description</th> </tr> <tr class="altColor"> <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap--">HashMap</a></span>()</code> <div class="block">Constructs an empty <tt>HashMap</tt> with the default initial capacity (16) and the default load factor (0.75).</div> </td> </tr> <tr class="rowColor"> <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap-int-">HashMap</a></span>(int&nbsp;initialCapacity)</code> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and the default load factor (0.75).</div> </td> </tr> <tr class="altColor"> <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap-int-float-">HashMap</a></span>(int&nbsp;initialCapacity, float&nbsp;loadFactor)</code> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and load factor.</div> </td> </tr> <tr class="rowColor"> <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap-java.util.Map-">HashMap</a></span>(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</code> <div class="block">Constructs a new <tt>HashMap</tt> with the same mappings as the specified <tt>Map</tt>.</div> </td> </tr> </tbody> </table> 
]

ul{
  class = (blockList:)
} : [
<a name="nested.class.summary"> <!-- --> </a> <h3>Nested Class Summary</h3> <ul class="blockList"> <li class="blockList"><a name="nested.classes.inherited.from.class.java.util.AbstractMap"> <!-- --> </a> <h3>Nested classes/interfaces inherited from class&nbsp;java.util.<a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a></h3> <code><a href="../../java/util/AbstractMap.SimpleEntry.html" title="class in java.util">AbstractMap.SimpleEntry</a>&lt;<a href="../../java/util/AbstractMap.SimpleEntry.html" title="type parameter in AbstractMap.SimpleEntry">K</a>,<a href="../../java/util/AbstractMap.SimpleEntry.html" title="type parameter in AbstractMap.SimpleEntry">V</a>&gt;, <a href="../../java/util/AbstractMap.SimpleImmutableEntry.html" title="class in java.util">AbstractMap.SimpleImmutableEntry</a>&lt;<a href="../../java/util/AbstractMap.SimpleImmutableEntry.html" title="type parameter in AbstractMap.SimpleImmutableEntry">K</a>,<a href="../../java/util/AbstractMap.SimpleImmutableEntry.html" title="type parameter in AbstractMap.SimpleImmutableEntry">V</a>&gt;</code> </li> </ul> <ul class="blockList"> <li class="blockList"><a name="nested.classes.inherited.from.class.java.util.Map"> <!-- --> </a> <h3>Nested classes/interfaces inherited from interface&nbsp;java.util.<a href="../../java/util/Map.html" title="interface in java.util">Map</a></h3> <code><a href="../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../java/util/Map.Entry.html" title="type parameter in Map.Entry">K</a>,<a href="../../java/util/Map.Entry.html" title="type parameter in Map.Entry">V</a>&gt;</code> </li> </ul> 
]

li{
  class = (blockList:)
} : [
 <li class="blockList"><a name="nested.classes.inherited.from.class.java.util.Map"> <!-- --> </a> <h3>Nested classes/interfaces inherited from interface&nbsp;java.util.<a href="../../java/util/Map.html" title="interface in java.util">Map</a></h3> <code><a href="../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../java/util/Map.Entry.html" title="type parameter in Map.Entry">K</a>,<a href="../../java/util/Map.Entry.html" title="type parameter in Map.Entry">V</a>&gt;</code> </li> 
]

ul{
  class = (blockList:)
} : [
<a name="nested.classes.inherited.from.class.java.util.Map"> <!-- --> </a> <h3>Nested classes/interfaces inherited from interface&nbsp;java.util.<a href="../../java/util/Map.html" title="interface in java.util">Map</a></h3> <code><a href="../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../java/util/Map.Entry.html" title="type parameter in Map.Entry">K</a>,<a href="../../java/util/Map.Entry.html" title="type parameter in Map.Entry">V</a>&gt;</code> 
]

ul{
  class = (blockList:)
} : [
<a name="nested.classes.inherited.from.class.java.util.AbstractMap"> <!-- --> </a> <h3>Nested classes/interfaces inherited from class&nbsp;java.util.<a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a></h3> <code><a href="../../java/util/AbstractMap.SimpleEntry.html" title="class in java.util">AbstractMap.SimpleEntry</a>&lt;<a href="../../java/util/AbstractMap.SimpleEntry.html" title="type parameter in AbstractMap.SimpleEntry">K</a>,<a href="../../java/util/AbstractMap.SimpleEntry.html" title="type parameter in AbstractMap.SimpleEntry">V</a>&gt;, <a href="../../java/util/AbstractMap.SimpleImmutableEntry.html" title="class in java.util">AbstractMap.SimpleImmutableEntry</a>&lt;<a href="../../java/util/AbstractMap.SimpleImmutableEntry.html" title="type parameter in AbstractMap.SimpleImmutableEntry">K</a>,<a href="../../java/util/AbstractMap.SimpleImmutableEntry.html" title="type parameter in AbstractMap.SimpleImmutableEntry">V</a>&gt;</code> 
]

h3 {} : [

]

a{
  name = (nested.class.summary:)
} : [

]

li{
  class = (blockList:)
} : [
<a href="../../java/util/AbstractMap.SimpleEntry.html" title="class in java.util">AbstractMap.SimpleEntry</a>&lt;<a href="../../java/util/AbstractMap.SimpleEntry.html" title="type parameter in AbstractMap.SimpleEntry">K</a>,<a href="../../java/util/AbstractMap.SimpleEntry.html" title="type parameter in AbstractMap.SimpleEntry">V</a>&gt;, <a href="../../java/util/AbstractMap.SimpleImmutableEntry.html" title="class in java.util">AbstractMap.SimpleImmutableEntry</a>&lt;<a href="../../java/util/AbstractMap.SimpleImmutableEntry.html" title="type parameter in AbstractMap.SimpleImmutableEntry">K</a>,<a href="../../java/util/AbstractMap.SimpleImmutableEntry.html" title="type parameter in AbstractMap.SimpleImmutableEntry">V</a>&gt;
]

code {} : [
V
]

h3 {} : [
AbstractMap
]

a{
  name = (nested.classes.inherited.from.class.java.util.AbstractMap:)
} : [

]

a{
  href = (../../java/util/AbstractMap.html:)
  title = (class:in:java.util:)
} : [

]

a{
  href = (../../java/util/AbstractMap.SimpleImmutableEntry.html:)
  title = (type:parameter:in:AbstractMap.SimpleImmutableEntry:)
} : [

]

a{
  href = (../../java/util/AbstractMap.SimpleImmutableEntry.html:)
  title = (type:parameter:in:AbstractMap.SimpleImmutableEntry:)
} : [

]

a{
  href = (../../java/util/AbstractMap.SimpleImmutableEntry.html:)
  title = (class:in:java.util:)
} : [

]

a{
  href = (../../java/util/AbstractMap.SimpleEntry.html:)
  title = (type:parameter:in:AbstractMap.SimpleEntry:)
} : [

]

a{
  href = (../../java/util/AbstractMap.SimpleEntry.html:)
  title = (type:parameter:in:AbstractMap.SimpleEntry:)
} : [

]

a{
  href = (../../java/util/AbstractMap.SimpleEntry.html:)
  title = (class:in:java.util:)
} : [

]

li{
  class = (blockList:)
} : [
<a href="../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../java/util/Map.Entry.html" title="type parameter in Map.Entry">K</a>,<a href="../../java/util/Map.Entry.html" title="type parameter in Map.Entry">V</a>&gt;
]

code {} : [
V
]

h3 {} : [
Map
]

a{
  name = (nested.classes.inherited.from.class.java.util.Map:)
} : [

]

a{
  href = (../../java/util/Map.html:)
  title = (interface:in:java.util:)
} : [

]

a{
  href = (../../java/util/Map.Entry.html:)
  title = (type:parameter:in:Map.Entry:)
} : [

]

a{
  href = (../../java/util/Map.Entry.html:)
  title = (type:parameter:in:Map.Entry:)
} : [

]

a{
  href = (../../java/util/Map.Entry.html:)
  title = (interface:in:java.util:)
} : [

]

li{
  class = (blockList:)
} : [
 <caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption> <tbody> <tr> <th class="colOne" scope="col">Constructor and Description</th> </tr> <tr class="altColor"> <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap--">HashMap</a></span>()</code> <div class="block">Constructs an empty <tt>HashMap</tt> with the default initial capacity (16) and the default load factor (0.75).</div> </td> </tr> <tr class="rowColor"> <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap-int-">HashMap</a></span>(int&nbsp;initialCapacity)</code> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and the default load factor (0.75).</div> </td> </tr> <tr class="altColor"> <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap-int-float-">HashMap</a></span>(int&nbsp;initialCapacity, float&nbsp;loadFactor)</code> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and load factor.</div> </td> </tr> <tr class="rowColor"> <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap-java.util.Map-">HashMap</a></span>(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</code> <div class="block">Constructs a new <tt>HashMap</tt> with the same mappings as the specified <tt>Map</tt>.</div> </td> </tr> </tbody> 
]

table{
  summary = (Constructor:Summary:table,:listing:constructors,:and:an:explanation:)
  border = (0:)
  cellpadding = (3:)
  cellspacing = (0:)
  class = (memberSummary:)
} : [
 <tr> <th class="colOne" scope="col">Constructor and Description</th> </tr> <tr class="altColor"> <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap--">HashMap</a></span>()</code> <div class="block">Constructs an empty <tt>HashMap</tt> with the default initial capacity (16) and the default load factor (0.75).</div> </td> </tr> <tr class="rowColor"> <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap-int-">HashMap</a></span>(int&nbsp;initialCapacity)</code> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and the default load factor (0.75).</div> </td> </tr> <tr class="altColor"> <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap-int-float-">HashMap</a></span>(int&nbsp;initialCapacity, float&nbsp;loadFactor)</code> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and load factor.</div> </td> </tr> <tr class="rowColor"> <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap-java.util.Map-">HashMap</a></span>(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</code> <div class="block">Constructs a new <tt>HashMap</tt> with the same mappings as the specified <tt>Map</tt>.</div> </td> </tr> 
]

h3 {} : [

]

a{
  name = (constructor.summary:)
} : [

]

tbody {} : [
 <td class="colOne"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap-java.util.Map-">HashMap</a></span>(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</code> <div class="block">Constructs a new <tt>HashMap</tt> with the same mappings as the specified <tt>Map</tt>.</div> </td> 
]

caption {} : [
&nbsp;
]

span{
  class = (tabEnd:)
} : [

]

span {} : [

]

tr{
  class = (rowColor:)
} : [
<code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap-java.util.Map-">HashMap</a></span>(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</code> <div class="block">Constructs a new <tt>HashMap</tt> with the same mappings as the specified <tt>Map</tt>.</div> 
]

tr{
  class = (altColor:)
} : [
<code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap-int-float-">HashMap</a></span>(int&nbsp;initialCapacity, float&nbsp;loadFactor)</code> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and load factor.</div> 
]

tr{
  class = (rowColor:)
} : [
<code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap-int-">HashMap</a></span>(int&nbsp;initialCapacity)</code> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and the default load factor (0.75).</div> 
]

tr{
  class = (altColor:)
} : [
<code><span class="memberNameLink"><a href="../../java/util/HashMap.html#HashMap--">HashMap</a></span>()</code> <div class="block">Constructs an empty <tt>HashMap</tt> with the default initial capacity (16) and the default load factor (0.75).</div> 
]

tr {} : [
Constructor and Description
]

th{
  scope = (col:)
  class = (colOne:)
} : [

]

td{
  class = (colOne:)
} : [
Constructs an empty <tt>HashMap</tt> with the default initial capacity (16) and the default load factor (0.75).
]

div{
  class = (block:)
} : [
HashMap
]

code {} : [
<a href="../../java/util/HashMap.html#HashMap--">HashMap</a>
]

span{
  class = (memberNameLink:)
} : [
HashMap
]

a{
  href = (../../java/util/HashMap.html#HashMap--:)
} : [

]

tt {} : [

]

td{
  class = (colOne:)
} : [
Constructs an empty <tt>HashMap</tt> with the specified initial capacity and the default load factor (0.75).
]

div{
  class = (block:)
} : [
HashMap
]

code {} : [
<a href="../../java/util/HashMap.html#HashMap-int-">HashMap</a>
]

span{
  class = (memberNameLink:)
} : [
HashMap
]

a{
  href = (../../java/util/HashMap.html#HashMap-int-:)
} : [

]

tt {} : [

]

td{
  class = (colOne:)
} : [
Constructs an empty <tt>HashMap</tt> with the specified initial capacity and load factor.
]

div{
  class = (block:)
} : [
HashMap
]

code {} : [
<a href="../../java/util/HashMap.html#HashMap-int-float-">HashMap</a>
]

span{
  class = (memberNameLink:)
} : [
HashMap
]

a{
  href = (../../java/util/HashMap.html#HashMap-int-float-:)
} : [

]

tt {} : [

]

td{
  class = (colOne:)
} : [
Constructs a new <tt>HashMap</tt> with the same mappings as the specified <tt>Map</tt>.
]

div{
  class = (block:)
} : [
Map
]

code {} : [
V
]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Map.html:)
  title = (interface:in:java.util:)
} : [

]

span{
  class = (memberNameLink:)
} : [
HashMap
]

a{
  href = (../../java/util/HashMap.html#HashMap-java.util.Map-:)
} : [

]

tt {} : [

]

tt {} : [

]

li{
  class = (blockList:)
} : [
 <li class="blockList"><a name="methods.inherited.from.class.java.util.Map"> <!-- --> </a> <h3>Methods inherited from interface&nbsp;java.util.<a href="../../java/util/Map.html" title="interface in java.util">Map</a></h3> <code><a href="../../java/util/Map.html#equals-java.lang.Object-">equals</a>, <a href="../../java/util/Map.html#hashCode--">hashCode</a></code> </li> 
]

ul{
  class = (blockList:)
} : [
<a name="methods.inherited.from.class.java.util.Map"> <!-- --> </a> <h3>Methods inherited from interface&nbsp;java.util.<a href="../../java/util/Map.html" title="interface in java.util">Map</a></h3> <code><a href="../../java/util/Map.html#equals-java.lang.Object-">equals</a>, <a href="../../java/util/Map.html#hashCode--">hashCode</a></code> 
]

ul{
  class = (blockList:)
} : [
<a name="methods.inherited.from.class.java.lang.Object"> <!-- --> </a> <h3>Methods inherited from class&nbsp;java.lang.<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> </h3> <code><a href="../../java/lang/Object.html#finalize--">finalize</a>, <a href="../../java/lang/Object.html#getClass--">getClass</a>, <a href="../../java/lang/Object.html#notify--">notify</a>, <a href="../../java/lang/Object.html#notifyAll--">notifyAll</a>, <a href="../../java/lang/Object.html#wait--">wait</a>, <a href="../../java/lang/Object.html#wait-long-">wait</a>, <a href="../../java/lang/Object.html#wait-long-int-">wait</a></code> 
]

ul{
  class = (blockList:)
} : [
<a name="methods.inherited.from.class.java.util.AbstractMap"> <!-- --> </a> <h3>Methods inherited from class&nbsp;java.util.<a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a></h3> <code><a href="../../java/util/AbstractMap.html#equals-java.lang.Object-">equals</a>, <a href="../../java/util/AbstractMap.html#hashCode--">hashCode</a>, <a href="../../java/util/AbstractMap.html#toString--">toString</a></code> 
]

table{
  summary = (Method:Summary:table,:listing:methods,:and:an:explanation:)
  border = (0:)
  cellpadding = (3:)
  cellspacing = (0:)
  class = (memberSummary:)
} : [
 <tr> <th class="colFirst" scope="col">Modifier and Type</th> <th class="colLast" scope="col">Method and Description</th> </tr> <tr id="i0" class="altColor"> <td class="colFirst"><code>void</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#clear--">clear</a></span>()</code> <div class="block">Removes all of the mappings from this map.</div> </td> </tr> <tr id="i1" class="rowColor"> <td class="colFirst"><code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#clone--">clone</a></span>()</code> <div class="block">Returns a shallow copy of this <tt>HashMap</tt> instance: the keys and values themselves are not cloned.</div> </td> </tr> <tr id="i2" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#compute-K-java.util.function.BiFunction-">compute</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</code> <div class="block">Attempts to compute a mapping for the specified key and its current mapped value (or <code>null</code> if there is no current mapping). </div> </td> </tr> <tr id="i3" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#computeIfAbsent-K-java.util.function.Function-">computeIfAbsent</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/Function.html" title="interface in java.util.function">Function</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;mappingFunction)</code> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>), attempts to compute its value using the given mapping function and enters it into this map unless <code>null</code>.</div> </td> </tr> <tr id="i4" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#computeIfPresent-K-java.util.function.BiFunction-">computeIfPresent</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</code> <div class="block">If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.</div> </td> </tr> <tr id="i5" class="rowColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#containsKey-java.lang.Object-">containsKey</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</code> <div class="block">Returns <tt>true</tt> if this map contains a mapping for the specified key.</div> </td> </tr> <tr id="i6" class="altColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#containsValue-java.lang.Object-">containsValue</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</code> <div class="block">Returns <tt>true</tt> if this map maps one or more keys to the specified value.</div> </td> </tr> <tr id="i7" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&gt;</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#entrySet--">entrySet</a></span>()</code> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the mappings contained in this map.</div> </td> </tr> <tr id="i8" class="altColor"> <td class="colFirst"><code>void</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#forEach-java.util.function.BiConsumer-">forEach</a></span>(<a href="../../java/util/function/BiConsumer.html" title="interface in java.util.function">BiConsumer</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;action)</code> <div class="block">Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.</div> </td> </tr> <tr id="i9" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#get-java.lang.Object-">get</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</code> <div class="block">Returns the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key.</div> </td> </tr> <tr id="i10" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#getOrDefault-java.lang.Object-V-">getOrDefault</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;defaultValue)</code> <div class="block">Returns the value to which the specified key is mapped, or <code>defaultValue</code> if this map contains no mapping for the key. </div> </td> </tr> <tr id="i11" class="rowColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#isEmpty--">isEmpty</a></span>()</code> <div class="block">Returns <tt>true</tt> if this map contains no key-value mappings.</div> </td> </tr> <tr id="i12" class="altColor"> <td class="colFirst"><code><a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&gt;</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#keySet--">keySet</a></span>()</code> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the keys contained in this map.</div> </td> </tr> <tr id="i13" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#merge-K-V-java.util.function.BiFunction-">merge</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</code> <div class="block">If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.</div> </td> </tr> <tr id="i14" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#put-K-V-">put</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</code> <div class="block">Associates the specified value with the specified key in this map.</div> </td> </tr> <tr id="i15" class="rowColor"> <td class="colFirst"><code>void</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#putAll-java.util.Map-">putAll</a></span>(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</code> <div class="block">Copies all of the mappings from the specified map to this map.</div> </td> </tr> <tr id="i16" class="altColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#putIfAbsent-K-V-">putIfAbsent</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</code> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>) associates it with the given value and returns <code>null</code>, else returns the current value.</div> </td> </tr> <tr id="i17" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#remove-java.lang.Object-">remove</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</code> <div class="block">Removes the mapping for the specified key from this map if present.</div> </td> </tr> <tr id="i18" class="altColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#remove-java.lang.Object-java.lang.Object-">remove</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</code> <div class="block">Removes the entry for the specified key only if it is currently mapped to the specified value.</div> </td> </tr> <tr id="i19" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a></code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#replace-K-V-">replace</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</code> <div class="block">Replaces the entry for the specified key only if it is currently mapped to some value.</div> </td> </tr> <tr id="i20" class="altColor"> <td class="colFirst"><code>boolean</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#replace-K-V-V-">replace</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;oldValue, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;newValue)</code> <div class="block">Replaces the entry for the specified key only if currently mapped to the specified value.</div> </td> </tr> <tr id="i21" class="rowColor"> <td class="colFirst"><code>void</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#replaceAll-java.util.function.BiFunction-">replaceAll</a></span>(<a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;function)</code> <div class="block">Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.</div> </td> </tr> <tr id="i22" class="altColor"> <td class="colFirst"><code>int</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#size--">size</a></span>()</code> <div class="block">Returns the number of key-value mappings in this map. </div> </td> </tr> <tr id="i23" class="rowColor"> <td class="colFirst"><code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#values--">values</a></span>()</code> <div class="block">Returns a <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a> view of the values contained in this map.</div> </td> </tr> 
]

h3 {} : [

]

a{
  name = (method.summary:)
} : [

]

tbody {} : [
 <td class="colFirst"><code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></td> <td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/HashMap.html#values--">values</a></span>()</code> <div class="block">Returns a <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a> view of the values contained in this map.</div> </td> 
]

caption {} : [
<span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span>
]

span{
  id = (t4:)
  class = (tableTab:)
} : [
&nbsp;
]

span{
  id = (t2:)
  class = (tableTab:)
} : [
&nbsp;
]

span{
  id = (t0:)
  class = (activeTableTab:)
} : [
&nbsp;
]

span{
  class = (tabEnd:)
} : [

]

span {} : [

]

span{
  class = (tabEnd:)
} : [

]

span {} : [
Instance Methods
]

a{
  href = (javascript:show(2);:)
} : [

]

span{
  class = (tabEnd:)
} : [

]

span {} : [
Concrete Methods
]

a{
  href = (javascript:show(8);:)
} : [

]

tr{
  id = (i23:)
  class = (rowColor:)
} : [
<code><span class="memberNameLink"><a href="../../java/util/HashMap.html#values--">values</a></span>()</code> <div class="block">Returns a <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a> view of the values contained in this map.</div> 
]

tr{
  id = (i22:)
  class = (altColor:)
} : [
<code><span class="memberNameLink"><a href="../../java/util/HashMap.html#size--">size</a></span>()</code> <div class="block">Returns the number of key-value mappings in this map. </div> 
]

tr{
  id = (i21:)
  class = (rowColor:)
} : [
<code><span class="memberNameLink"><a href="../../java/util/HashMap.html#replaceAll-java.util.function.BiFunction-">replaceAll</a></span>(<a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;function)</code> <div class="block">Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.</div> 
]

tr{
  id = (i20:)
  class = (altColor:)
} : [
<code><span class="memberNameLink"><a href="../../java/util/HashMap.html#replace-K-V-V-">replace</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;oldValue, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;newValue)</code> <div class="block">Replaces the entry for the specified key only if currently mapped to the specified value.</div> 
]

tr{
  id = (i19:)
  class = (rowColor:)
} : [
<code><span class="memberNameLink"><a href="../../java/util/HashMap.html#replace-K-V-">replace</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</code> <div class="block">Replaces the entry for the specified key only if it is currently mapped to some value.</div> 
]

tr{
  id = (i18:)
  class = (altColor:)
} : [
<code><span class="memberNameLink"><a href="../../java/util/HashMap.html#remove-java.lang.Object-java.lang.Object-">remove</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</code> <div class="block">Removes the entry for the specified key only if it is currently mapped to the specified value.</div> 
]

tr{
  id = (i17:)
  class = (rowColor:)
} : [
<code><span class="memberNameLink"><a href="../../java/util/HashMap.html#remove-java.lang.Object-">remove</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</code> <div class="block">Removes the mapping for the specified key from this map if present.</div> 
]

tr{
  id = (i16:)
  class = (altColor:)
} : [
<code><span class="memberNameLink"><a href="../../java/util/HashMap.html#putIfAbsent-K-V-">putIfAbsent</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</code> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>) associates it with the given value and returns <code>null</code>, else returns the current value.</div> 
]

tr{
  id = (i15:)
  class = (rowColor:)
} : [
<code><span class="memberNameLink"><a href="../../java/util/HashMap.html#putAll-java.util.Map-">putAll</a></span>(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</code> <div class="block">Copies all of the mappings from the specified map to this map.</div> 
]

tr{
  id = (i14:)
  class = (altColor:)
} : [
<code><span class="memberNameLink"><a href="../../java/util/HashMap.html#put-K-V-">put</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</code> <div class="block">Associates the specified value with the specified key in this map.</div> 
]

tr{
  id = (i13:)
  class = (rowColor:)
} : [
<code><span class="memberNameLink"><a href="../../java/util/HashMap.html#merge-K-V-java.util.function.BiFunction-">merge</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</code> <div class="block">If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.</div> 
]

tr{
  id = (i12:)
  class = (altColor:)
} : [
<code><span class="memberNameLink"><a href="../../java/util/HashMap.html#keySet--">keySet</a></span>()</code> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the keys contained in this map.</div> 
]

tr{
  id = (i11:)
  class = (rowColor:)
} : [
<code><span class="memberNameLink"><a href="../../java/util/HashMap.html#isEmpty--">isEmpty</a></span>()</code> <div class="block">Returns <tt>true</tt> if this map contains no key-value mappings.</div> 
]

tr{
  id = (i10:)
  class = (altColor:)
} : [
<code><span class="memberNameLink"><a href="../../java/util/HashMap.html#getOrDefault-java.lang.Object-V-">getOrDefault</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;defaultValue)</code> <div class="block">Returns the value to which the specified key is mapped, or <code>defaultValue</code> if this map contains no mapping for the key. </div> 
]

tr{
  id = (i9:)
  class = (rowColor:)
} : [
<code><span class="memberNameLink"><a href="../../java/util/HashMap.html#get-java.lang.Object-">get</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</code> <div class="block">Returns the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key.</div> 
]

tr{
  id = (i8:)
  class = (altColor:)
} : [
<code><span class="memberNameLink"><a href="../../java/util/HashMap.html#forEach-java.util.function.BiConsumer-">forEach</a></span>(<a href="../../java/util/function/BiConsumer.html" title="interface in java.util.function">BiConsumer</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;action)</code> <div class="block">Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.</div> 
]

tr{
  id = (i7:)
  class = (rowColor:)
} : [
<code><span class="memberNameLink"><a href="../../java/util/HashMap.html#entrySet--">entrySet</a></span>()</code> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the mappings contained in this map.</div> 
]

tr{
  id = (i6:)
  class = (altColor:)
} : [
<code><span class="memberNameLink"><a href="../../java/util/HashMap.html#containsValue-java.lang.Object-">containsValue</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</code> <div class="block">Returns <tt>true</tt> if this map maps one or more keys to the specified value.</div> 
]

tr{
  id = (i5:)
  class = (rowColor:)
} : [
<code><span class="memberNameLink"><a href="../../java/util/HashMap.html#containsKey-java.lang.Object-">containsKey</a></span>(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</code> <div class="block">Returns <tt>true</tt> if this map contains a mapping for the specified key.</div> 
]

tr{
  id = (i4:)
  class = (altColor:)
} : [
<code><span class="memberNameLink"><a href="../../java/util/HashMap.html#computeIfPresent-K-java.util.function.BiFunction-">computeIfPresent</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</code> <div class="block">If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.</div> 
]

tr{
  id = (i3:)
  class = (rowColor:)
} : [
<code><span class="memberNameLink"><a href="../../java/util/HashMap.html#computeIfAbsent-K-java.util.function.Function-">computeIfAbsent</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/Function.html" title="interface in java.util.function">Function</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;mappingFunction)</code> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>), attempts to compute its value using the given mapping function and enters it into this map unless <code>null</code>.</div> 
]

tr{
  id = (i2:)
  class = (altColor:)
} : [
<code><span class="memberNameLink"><a href="../../java/util/HashMap.html#compute-K-java.util.function.BiFunction-">compute</a></span>(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</code> <div class="block">Attempts to compute a mapping for the specified key and its current mapped value (or <code>null</code> if there is no current mapping). </div> 
]

tr{
  id = (i1:)
  class = (rowColor:)
} : [
<code><span class="memberNameLink"><a href="../../java/util/HashMap.html#clone--">clone</a></span>()</code> <div class="block">Returns a shallow copy of this <tt>HashMap</tt> instance: the keys and values themselves are not cloned.</div> 
]

tr{
  id = (i0:)
  class = (altColor:)
} : [
<code><span class="memberNameLink"><a href="../../java/util/HashMap.html#clear--">clear</a></span>()</code> <div class="block">Removes all of the mappings from this map.</div> 
]

tr {} : [
Method and Description
]

th{
  scope = (col:)
  class = (colLast:)
} : [

]

th{
  scope = (col:)
  class = (colFirst:)
} : [

]

td{
  class = (colLast:)
} : [
Removes all of the mappings from this map.
]

td{
  class = (colFirst:)
} : [
void
]

code {} : [

]

div{
  class = (block:)
} : [

]

code {} : [
<a href="../../java/util/HashMap.html#clear--">clear</a>
]

span{
  class = (memberNameLink:)
} : [
clear
]

a{
  href = (../../java/util/HashMap.html#clear--:)
} : [

]

td{
  class = (colLast:)
} : [
Returns a shallow copy of this <tt>HashMap</tt> instance: the keys and values themselves are not cloned.
]

td{
  class = (colFirst:)
} : [
<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>
]

code {} : [
Object
]

a{
  href = (../../java/lang/Object.html:)
  title = (class:in:java.lang:)
} : [

]

div{
  class = (block:)
} : [
HashMap
]

code {} : [
<a href="../../java/util/HashMap.html#clone--">clone</a>
]

span{
  class = (memberNameLink:)
} : [
clone
]

a{
  href = (../../java/util/HashMap.html#clone--:)
} : [

]

tt {} : [

]

td{
  class = (colLast:)
} : [
Attempts to compute a mapping for the specified key and its current mapped value (or <code>null</code> if there is no current mapping). 
]

td{
  class = (colFirst:)
} : [
<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>
]

code {} : [
V
]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

div{
  class = (block:)
} : [
null
]

code {} : [
V
]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/function/BiFunction.html:)
  title = (interface:in:java.util.function:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

span{
  class = (memberNameLink:)
} : [
compute
]

a{
  href = (../../java/util/HashMap.html#compute-K-java.util.function.BiFunction-:)
} : [

]

code {} : [

]

td{
  class = (colLast:)
} : [
If the specified key is not already associated with a value (or is mapped to <code>null</code>), attempts to compute its value using the given mapping function and enters it into this map unless <code>null</code>.
]

td{
  class = (colFirst:)
} : [
<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>
]

code {} : [
V
]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

div{
  class = (block:)
} : [
null
]

code {} : [
V
]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/function/Function.html:)
  title = (interface:in:java.util.function:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

span{
  class = (memberNameLink:)
} : [
computeIfAbsent
]

a{
  href = (../../java/util/HashMap.html#computeIfAbsent-K-java.util.function.Function-:)
} : [

]

code {} : [

]

code {} : [

]

td{
  class = (colLast:)
} : [
If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.
]

td{
  class = (colFirst:)
} : [
<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>
]

code {} : [
V
]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

div{
  class = (block:)
} : [

]

code {} : [
V
]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/function/BiFunction.html:)
  title = (interface:in:java.util.function:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

span{
  class = (memberNameLink:)
} : [
computeIfPresent
]

a{
  href = (../../java/util/HashMap.html#computeIfPresent-K-java.util.function.BiFunction-:)
} : [

]

td{
  class = (colLast:)
} : [
Returns <tt>true</tt> if this map contains a mapping for the specified key.
]

td{
  class = (colFirst:)
} : [
boolean
]

code {} : [

]

div{
  class = (block:)
} : [
true
]

code {} : [
Object
]

a{
  href = (../../java/lang/Object.html:)
  title = (class:in:java.lang:)
} : [

]

span{
  class = (memberNameLink:)
} : [
containsKey
]

a{
  href = (../../java/util/HashMap.html#containsKey-java.lang.Object-:)
} : [

]

tt {} : [

]

td{
  class = (colLast:)
} : [
Returns <tt>true</tt> if this map maps one or more keys to the specified value.
]

td{
  class = (colFirst:)
} : [
boolean
]

code {} : [

]

div{
  class = (block:)
} : [
true
]

code {} : [
Object
]

a{
  href = (../../java/lang/Object.html:)
  title = (class:in:java.lang:)
} : [

]

span{
  class = (memberNameLink:)
} : [
containsValue
]

a{
  href = (../../java/util/HashMap.html#containsValue-java.lang.Object-:)
} : [

]

tt {} : [

]

td{
  class = (colLast:)
} : [
Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the mappings contained in this map.
]

td{
  class = (colFirst:)
} : [
<a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&gt;
]

code {} : [
V
]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Map.Entry.html:)
  title = (interface:in:java.util:)
} : [

]

a{
  href = (../../java/util/Set.html:)
  title = (interface:in:java.util:)
} : [

]

div{
  class = (block:)
} : [
<code>Set</code>
]

code {} : [
<a href="../../java/util/HashMap.html#entrySet--">entrySet</a>
]

span{
  class = (memberNameLink:)
} : [
entrySet
]

a{
  href = (../../java/util/HashMap.html#entrySet--:)
} : [

]

a{
  href = (../../java/util/Set.html:)
  title = (interface:in:java.util:)
} : [
Set
]

code {} : [

]

td{
  class = (colLast:)
} : [
Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.
]

td{
  class = (colFirst:)
} : [
void
]

code {} : [

]

div{
  class = (block:)
} : [

]

code {} : [
V
]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/function/BiConsumer.html:)
  title = (interface:in:java.util.function:)
} : [

]

span{
  class = (memberNameLink:)
} : [
forEach
]

a{
  href = (../../java/util/HashMap.html#forEach-java.util.function.BiConsumer-:)
} : [

]

td{
  class = (colLast:)
} : [
Returns the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key.
]

td{
  class = (colFirst:)
} : [
<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>
]

code {} : [
V
]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

div{
  class = (block:)
} : [
null
]

code {} : [
Object
]

a{
  href = (../../java/lang/Object.html:)
  title = (class:in:java.lang:)
} : [

]

span{
  class = (memberNameLink:)
} : [
get
]

a{
  href = (../../java/util/HashMap.html#get-java.lang.Object-:)
} : [

]

code {} : [

]

td{
  class = (colLast:)
} : [
Returns the value to which the specified key is mapped, or <code>defaultValue</code> if this map contains no mapping for the key. 
]

td{
  class = (colFirst:)
} : [
<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>
]

code {} : [
V
]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

div{
  class = (block:)
} : [
defaultValue
]

code {} : [
V
]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/lang/Object.html:)
  title = (class:in:java.lang:)
} : [

]

span{
  class = (memberNameLink:)
} : [
getOrDefault
]

a{
  href = (../../java/util/HashMap.html#getOrDefault-java.lang.Object-V-:)
} : [

]

code {} : [

]

td{
  class = (colLast:)
} : [
Returns <tt>true</tt> if this map contains no key-value mappings.
]

td{
  class = (colFirst:)
} : [
boolean
]

code {} : [

]

div{
  class = (block:)
} : [
true
]

code {} : [
<a href="../../java/util/HashMap.html#isEmpty--">isEmpty</a>
]

span{
  class = (memberNameLink:)
} : [
isEmpty
]

a{
  href = (../../java/util/HashMap.html#isEmpty--:)
} : [

]

tt {} : [

]

td{
  class = (colLast:)
} : [
Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the keys contained in this map.
]

td{
  class = (colFirst:)
} : [
<a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&gt;
]

code {} : [
K
]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Set.html:)
  title = (interface:in:java.util:)
} : [

]

div{
  class = (block:)
} : [
<code>Set</code>
]

code {} : [
<a href="../../java/util/HashMap.html#keySet--">keySet</a>
]

span{
  class = (memberNameLink:)
} : [
keySet
]

a{
  href = (../../java/util/HashMap.html#keySet--:)
} : [

]

a{
  href = (../../java/util/Set.html:)
  title = (interface:in:java.util:)
} : [
Set
]

code {} : [

]

td{
  class = (colLast:)
} : [
If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.
]

td{
  class = (colFirst:)
} : [
<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>
]

code {} : [
V
]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

div{
  class = (block:)
} : [

]

code {} : [
V
]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/function/BiFunction.html:)
  title = (interface:in:java.util.function:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

span{
  class = (memberNameLink:)
} : [
merge
]

a{
  href = (../../java/util/HashMap.html#merge-K-V-java.util.function.BiFunction-:)
} : [

]

td{
  class = (colLast:)
} : [
Associates the specified value with the specified key in this map.
]

td{
  class = (colFirst:)
} : [
<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>
]

code {} : [
V
]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

div{
  class = (block:)
} : [

]

code {} : [
V
]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

span{
  class = (memberNameLink:)
} : [
put
]

a{
  href = (../../java/util/HashMap.html#put-K-V-:)
} : [

]

td{
  class = (colLast:)
} : [
Copies all of the mappings from the specified map to this map.
]

td{
  class = (colFirst:)
} : [
void
]

code {} : [

]

div{
  class = (block:)
} : [

]

code {} : [
V
]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Map.html:)
  title = (interface:in:java.util:)
} : [

]

span{
  class = (memberNameLink:)
} : [
putAll
]

a{
  href = (../../java/util/HashMap.html#putAll-java.util.Map-:)
} : [

]

td{
  class = (colLast:)
} : [
If the specified key is not already associated with a value (or is mapped to <code>null</code>) associates it with the given value and returns <code>null</code>, else returns the current value.
]

td{
  class = (colFirst:)
} : [
<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>
]

code {} : [
V
]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

div{
  class = (block:)
} : [
null
]

code {} : [
V
]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

span{
  class = (memberNameLink:)
} : [
putIfAbsent
]

a{
  href = (../../java/util/HashMap.html#putIfAbsent-K-V-:)
} : [

]

code {} : [

]

code {} : [

]

td{
  class = (colLast:)
} : [
Removes the mapping for the specified key from this map if present.
]

td{
  class = (colFirst:)
} : [
<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>
]

code {} : [
V
]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

div{
  class = (block:)
} : [

]

code {} : [
Object
]

a{
  href = (../../java/lang/Object.html:)
  title = (class:in:java.lang:)
} : [

]

span{
  class = (memberNameLink:)
} : [
remove
]

a{
  href = (../../java/util/HashMap.html#remove-java.lang.Object-:)
} : [

]

td{
  class = (colLast:)
} : [
Removes the entry for the specified key only if it is currently mapped to the specified value.
]

td{
  class = (colFirst:)
} : [
boolean
]

code {} : [

]

div{
  class = (block:)
} : [

]

code {} : [
Object
]

a{
  href = (../../java/lang/Object.html:)
  title = (class:in:java.lang:)
} : [

]

a{
  href = (../../java/lang/Object.html:)
  title = (class:in:java.lang:)
} : [

]

span{
  class = (memberNameLink:)
} : [
remove
]

a{
  href = (../../java/util/HashMap.html#remove-java.lang.Object-java.lang.Object-:)
} : [

]

td{
  class = (colLast:)
} : [
Replaces the entry for the specified key only if it is currently mapped to some value.
]

td{
  class = (colFirst:)
} : [
<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>
]

code {} : [
V
]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

div{
  class = (block:)
} : [

]

code {} : [
V
]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

span{
  class = (memberNameLink:)
} : [
replace
]

a{
  href = (../../java/util/HashMap.html#replace-K-V-:)
} : [

]

td{
  class = (colLast:)
} : [
Replaces the entry for the specified key only if currently mapped to the specified value.
]

td{
  class = (colFirst:)
} : [
boolean
]

code {} : [

]

div{
  class = (block:)
} : [

]

code {} : [
V
]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

span{
  class = (memberNameLink:)
} : [
replace
]

a{
  href = (../../java/util/HashMap.html#replace-K-V-V-:)
} : [

]

td{
  class = (colLast:)
} : [
Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.
]

td{
  class = (colFirst:)
} : [
void
]

code {} : [

]

div{
  class = (block:)
} : [

]

code {} : [
V
]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/function/BiFunction.html:)
  title = (interface:in:java.util.function:)
} : [

]

span{
  class = (memberNameLink:)
} : [
replaceAll
]

a{
  href = (../../java/util/HashMap.html#replaceAll-java.util.function.BiFunction-:)
} : [

]

td{
  class = (colLast:)
} : [
Returns the number of key-value mappings in this map. 
]

td{
  class = (colFirst:)
} : [
int
]

code {} : [

]

div{
  class = (block:)
} : [

]

code {} : [
<a href="../../java/util/HashMap.html#size--">size</a>
]

span{
  class = (memberNameLink:)
} : [
size
]

a{
  href = (../../java/util/HashMap.html#size--:)
} : [

]

td{
  class = (colLast:)
} : [
Returns a <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a> view of the values contained in this map.
]

td{
  class = (colFirst:)
} : [
<a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

code {} : [
V
]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Collection.html:)
  title = (interface:in:java.util:)
} : [

]

div{
  class = (block:)
} : [
<code>Collection</code>
]

code {} : [
<a href="../../java/util/HashMap.html#values--">values</a>
]

span{
  class = (memberNameLink:)
} : [
values
]

a{
  href = (../../java/util/HashMap.html#values--:)
} : [

]

a{
  href = (../../java/util/Collection.html:)
  title = (interface:in:java.util:)
} : [
Collection
]

code {} : [

]

li{
  class = (blockList:)
} : [
<a href="../../java/util/AbstractMap.html#equals-java.lang.Object-">equals</a>, <a href="../../java/util/AbstractMap.html#hashCode--">hashCode</a>, <a href="../../java/util/AbstractMap.html#toString--">toString</a>
]

code {} : [
toString
]

h3 {} : [
AbstractMap
]

a{
  name = (methods.inherited.from.class.java.util.AbstractMap:)
} : [

]

a{
  href = (../../java/util/AbstractMap.html:)
  title = (class:in:java.util:)
} : [

]

a{
  href = (../../java/util/AbstractMap.html#toString--:)
} : [

]

a{
  href = (../../java/util/AbstractMap.html#hashCode--:)
} : [

]

a{
  href = (../../java/util/AbstractMap.html#equals-java.lang.Object-:)
} : [

]

li{
  class = (blockList:)
} : [
<a href="../../java/lang/Object.html#finalize--">finalize</a>, <a href="../../java/lang/Object.html#getClass--">getClass</a>, <a href="../../java/lang/Object.html#notify--">notify</a>, <a href="../../java/lang/Object.html#notifyAll--">notifyAll</a>, <a href="../../java/lang/Object.html#wait--">wait</a>, <a href="../../java/lang/Object.html#wait-long-">wait</a>, <a href="../../java/lang/Object.html#wait-long-int-">wait</a>
]

code {} : [
wait
]

h3 {} : [
Object
]

a{
  name = (methods.inherited.from.class.java.lang.Object:)
} : [

]

a{
  href = (../../java/lang/Object.html:)
  title = (class:in:java.lang:)
} : [

]

a{
  href = (../../java/lang/Object.html#wait-long-int-:)
} : [

]

a{
  href = (../../java/lang/Object.html#wait-long-:)
} : [

]

a{
  href = (../../java/lang/Object.html#wait--:)
} : [

]

a{
  href = (../../java/lang/Object.html#notifyAll--:)
} : [

]

a{
  href = (../../java/lang/Object.html#notify--:)
} : [

]

a{
  href = (../../java/lang/Object.html#getClass--:)
} : [

]

a{
  href = (../../java/lang/Object.html#finalize--:)
} : [

]

li{
  class = (blockList:)
} : [
<a href="../../java/util/Map.html#equals-java.lang.Object-">equals</a>, <a href="../../java/util/Map.html#hashCode--">hashCode</a>
]

code {} : [
hashCode
]

h3 {} : [
Map
]

a{
  name = (methods.inherited.from.class.java.util.Map:)
} : [

]

a{
  href = (../../java/util/Map.html:)
  title = (interface:in:java.util:)
} : [

]

a{
  href = (../../java/util/Map.html#hashCode--:)
} : [

]

a{
  href = (../../java/util/Map.html#equals-java.lang.Object-:)
} : [

]

ul{
  class = (blockList:)
} : [
 <!-- ========= CONSTRUCTOR DETAIL ======== --> <ul class="blockList"> <li class="blockList"><a name="constructor.detail"> <!-- --> </a> <h3>Constructor Detail</h3> <a name="HashMap-int-float-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>HashMap</h4> <pre>public&nbsp;HashMap(int&nbsp;initialCapacity, float&nbsp;loadFactor)</pre> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and load factor.</div> <dl> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>initialCapacity</code> - the initial capacity</dd> <dd><code>loadFactor</code> - the load factor</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the initial capacity is negative or the load factor is nonpositive</dd> </dl> </li> </ul> <a name="HashMap-int-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>HashMap</h4> <pre>public&nbsp;HashMap(int&nbsp;initialCapacity)</pre> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and the default load factor (0.75).</div> <dl> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>initialCapacity</code> - the initial capacity.</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the initial capacity is negative.</dd> </dl> </li> </ul> <a name="HashMap--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>HashMap</h4> <pre>public&nbsp;HashMap()</pre> <div class="block">Constructs an empty <tt>HashMap</tt> with the default initial capacity (16) and the default load factor (0.75).</div> </li> </ul> <a name="HashMap-java.util.Map-"> <!-- --> </a> <ul class="blockListLast"> <li class="blockList"> <h4>HashMap</h4> <pre>public&nbsp;HashMap(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</pre> <div class="block">Constructs a new <tt>HashMap</tt> with the same mappings as the specified <tt>Map</tt>. The <tt>HashMap</tt> is created with default load factor (0.75) and an initial capacity sufficient to hold the mappings in the specified <tt>Map</tt>.</div> <dl> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>m</code> - the map whose mappings are to be placed in this map</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified map is null</dd> </dl> </li> </ul> </li> </ul> <!-- ============ METHOD DETAIL ========== --> <ul class="blockList"> <li class="blockList"><a name="method.detail"> <!-- --> </a> <h3>Method Detail</h3> <a name="size--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>size</h4> <pre>public&nbsp;int&nbsp;size()</pre> <div class="block">Returns the number of key-value mappings in this map.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#size--">size</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#size--">size</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the number of key-value mappings in this map</dd> </dl> </li> </ul> <a name="isEmpty--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>isEmpty</h4> <pre>public&nbsp;boolean&nbsp;isEmpty()</pre> <div class="block">Returns <tt>true</tt> if this map contains no key-value mappings. </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#isEmpty--">isEmpty</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#isEmpty--">isEmpty</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><tt>true</tt> if this map contains no key-value mappings</dd> </dl> </li> </ul> <a name="get-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>get</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;get(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</pre> <div class="block">Returns the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key. <p>More formally, if this map contains a mapping from a key <code>k</code> to a value <code>v</code> such that <code>(key==null ? k==null : key.equals(k))</code>, then this method returns <code>v</code>; otherwise it returns <code>null</code>. (There can be at most one such mapping.) </p> <p>A return value of <code>null</code> does not <i>necessarily</i> indicate that the map contains no mapping for the key; it's also possible that the map explicitly maps the key to <code>null</code>. The <a href="../../java/util/HashMap.html#containsKey-java.lang.Object-"><code>containsKey</code></a> operation may be used to distinguish these two cases.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#get-java.lang.Object-">get</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#get-java.lang.Object-">get</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - the key whose associated value is to be returned</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key</dd> <dt><span class="seeLabel">See Also:</span></dt> <dd><a href="../../java/util/HashMap.html#put-K-V-"><code>put(Object, Object)</code></a></dd> </dl> </li> </ul> <a name="containsKey-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>containsKey</h4> <pre>public&nbsp;boolean&nbsp;containsKey(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</pre> <div class="block">Returns <tt>true</tt> if this map contains a mapping for the specified key.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#containsKey-java.lang.Object-">containsKey</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#containsKey-java.lang.Object-">containsKey</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - The key whose presence in this map is to be tested</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><tt>true</tt> if this map contains a mapping for the specified key.</dd> </dl> </li> </ul> <a name="put-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="put-K-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>put</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;put(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</pre> <div class="block">Associates the specified value with the specified key in this map. If the map previously contained a mapping for the key, the old value is replaced.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#put-K-V-">put</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#put-K-V-">put</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>value</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with <tt>key</tt>, or <tt>null</tt> if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return can also indicate that the map previously associated <tt>null</tt> with <tt>key</tt>.)</dd> </dl> </li> </ul> <a name="putAll-java.util.Map-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>putAll</h4> <pre>public&nbsp;void&nbsp;putAll(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</pre> <div class="block">Copies all of the mappings from the specified map to this map. These mappings will replace any mappings that this map had for any of the keys currently in the specified map.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#putAll-java.util.Map-">putAll</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#putAll-java.util.Map-">putAll</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>m</code> - mappings to be stored in this map</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified map is null</dd> </dl> </li> </ul> <a name="remove-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>remove</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;remove(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</pre> <div class="block">Removes the mapping for the specified key from this map if present.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#remove-java.lang.Object-">remove</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#remove-java.lang.Object-">remove</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key whose mapping is to be removed from the map</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with <tt>key</tt>, or <tt>null</tt> if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return can also indicate that the map previously associated <tt>null</tt> with <tt>key</tt>.)</dd> </dl> </li> </ul> <a name="clear--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>clear</h4> <pre>public&nbsp;void&nbsp;clear()</pre> <div class="block">Removes all of the mappings from this map. The map will be empty after this call returns.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#clear--">clear</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#clear--">clear</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> </dl> </li> </ul> <a name="containsValue-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>containsValue</h4> <pre>public&nbsp;boolean&nbsp;containsValue(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</pre> <div class="block">Returns <tt>true</tt> if this map maps one or more keys to the specified value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#containsValue-java.lang.Object-">containsValue</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#containsValue-java.lang.Object-">containsValue</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>value</code> - value whose presence in this map is to be tested</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><tt>true</tt> if this map maps one or more keys to the specified value</dd> </dl> </li> </ul> <a name="keySet--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>keySet</h4> <pre>public&nbsp;<a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&gt;&nbsp;keySet()</pre> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own <tt>remove</tt> operation), the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#keySet--">keySet</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#keySet--">keySet</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a set view of the keys contained in this map</dd> </dl> </li> </ul> <a name="values--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>values</h4> <pre>public&nbsp;<a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;values()</pre> <div class="block">Returns a <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a> view of the values contained in this map. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. If the map is modified while an iteration over the collection is in progress (except through the iterator's own <tt>remove</tt> operation), the results of the iteration are undefined. The collection supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Collection.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#values--">values</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#values--">values</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a view of the values contained in this map</dd> </dl> </li> </ul> <a name="entrySet--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>entrySet</h4> <pre>public&nbsp;<a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&gt;&nbsp;entrySet()</pre> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the mappings contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own <tt>remove</tt> operation, or through the <tt>setValue</tt> operation on a map entry returned by the iterator) the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#entrySet--">entrySet</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#entrySet--">entrySet</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a set view of the mappings contained in this map</dd> </dl> </li> </ul> <a name="getOrDefault-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="getOrDefault-java.lang.Object-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>getOrDefault</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;getOrDefault(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;defaultValue)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#getOrDefault-java.lang.Object-V-">Map</a></code></span> </div> <div class="block">Returns the value to which the specified key is mapped, or <code>defaultValue</code> if this map contains no mapping for the key.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#getOrDefault-java.lang.Object-V-">getOrDefault</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - the key whose associated value is to be returned</dd> <dd><code>defaultValue</code> - the default mapping of the key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the value to which the specified key is mapped, or <code>defaultValue</code> if this map contains no mapping for the key</dd> </dl> </li> </ul> <a name="putIfAbsent-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="putIfAbsent-K-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>putIfAbsent</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;putIfAbsent(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#putIfAbsent-K-V-">Map</a></code></span> </div> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>) associates it with the given value and returns <code>null</code>, else returns the current value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#putIfAbsent-K-V-">putIfAbsent</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>value</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with the specified key, or <code>null</code> if there was no mapping for the key. (A <code>null</code> return can also indicate that the map previously associated <code>null</code> with the key, if the implementation supports null values.)</dd> </dl> </li> </ul> <a name="remove-java.lang.Object-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>remove</h4> <pre>public&nbsp;boolean&nbsp;remove(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#remove-java.lang.Object-java.lang.Object-">Map</a></code></span> </div> <div class="block">Removes the entry for the specified key only if it is currently mapped to the specified value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#remove-java.lang.Object-java.lang.Object-">remove</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is associated</dd> <dd><code>value</code> - value expected to be associated with the specified key </dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><code>true</code> if the value was removed</dd> </dl> </li> </ul> <a name="replace-java.lang.Object-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="replace-K-V-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>replace</h4> <pre>public&nbsp;boolean&nbsp;replace(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;oldValue, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;newValue)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#replace-K-V-V-">Map</a></code></span> </div> <div class="block">Replaces the entry for the specified key only if currently mapped to the specified value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#replace-K-V-V-">replace</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is associated</dd> <dd><code>oldValue</code> - value expected to be associated with the specified key</dd> <dd><code>newValue</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><code>true</code> if the value was replaced</dd> </dl> </li> </ul> <a name="replace-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="replace-K-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>replace</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;replace(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#replace-K-V-">Map</a></code></span> </div> <div class="block">Replaces the entry for the specified key only if it is currently mapped to some value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#replace-K-V-">replace</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is associated</dd> <dd><code>value</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with the specified key, or <code>null</code> if there was no mapping for the key. (A <code>null</code> return can also indicate that the map previously associated <code>null</code> with the key, if the implementation supports null values.)</dd> </dl> </li> </ul> <a name="computeIfAbsent-java.lang.Object-java.util.function.Function-"> <!-- --> </a><a name="computeIfAbsent-K-java.util.function.Function-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>computeIfAbsent</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;computeIfAbsent(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/Function.html" title="interface in java.util.function">Function</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;mappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#computeIfAbsent-K-java.util.function.Function-">Map</a></code></span> </div> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>), attempts to compute its value using the given mapping function and enters it into this map unless <code>null</code>. <p>If the function returns <code>null</code> no mapping is recorded. If the function itself throws an (unchecked) exception, the exception is rethrown, and no mapping is recorded. The most common usage is to construct a new object serving as an initial mapped value or memoized result, as in: </p> <pre> <code> map.computeIfAbsent(key, k -&gt; new Value(f(k))); </code></pre> <p>Or to implement a multi-value map, <code>Map&lt;K,Collection&lt;V&gt;&gt;</code>, supporting multiple values per key: </p> <pre> <code> map.computeIfAbsent(key, k -&gt; new HashSet&lt;V&gt;()).add(v); </code></pre> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#computeIfAbsent-K-java.util.function.Function-">computeIfAbsent</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>mappingFunction</code> - the function to compute a value</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the current (existing or computed) value associated with the specified key, or null if the computed value is null</dd> </dl> </li> </ul> <a name="computeIfPresent-java.lang.Object-java.util.function.BiFunction-"> <!-- --> </a><a name="computeIfPresent-K-java.util.function.BiFunction-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>computeIfPresent</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;computeIfPresent(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value. <p>If the function returns <code>null</code>, the mapping is removed. If the function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-">computeIfPresent</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>remappingFunction</code> - the function to compute a value</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the new value associated with the specified key, or null if none</dd> </dl> </li> </ul> <a name="compute-java.lang.Object-java.util.function.BiFunction-"> <!-- --> </a><a name="compute-K-java.util.function.BiFunction-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>compute</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;compute(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#compute-K-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">Attempts to compute a mapping for the specified key and its current mapped value (or <code>null</code> if there is no current mapping). For example, to either create or append a <code>String</code> msg to a value mapping: <pre> <code> map.compute(key, (k, v) -&gt; (v == null) ? msg : v.concat(msg))</code></pre> (Method <a href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-"><code>merge()</code></a> is often simpler to use for such purposes.) <p>If the function returns <code>null</code>, the mapping is removed (or remains absent if initially absent). If the function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#compute-K-java.util.function.BiFunction-">compute</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>remappingFunction</code> - the function to compute a value</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the new value associated with the specified key, or null if none</dd> </dl> </li> </ul> <a name="merge-java.lang.Object-java.lang.Object-java.util.function.BiFunction-"> <!-- --> </a><a name="merge-K-V-java.util.function.BiFunction-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>merge</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;merge(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value. Otherwise, replaces the associated value with the results of the given remapping function, or removes if the result is <code>null</code>. This method may be of use when combining multiple mapped values for a key. For example, to either create or append a <code>String msg</code> to a value mapping: <pre> <code> map.merge(key, msg, String::concat) </code></pre> <p>If the function returns <code>null</code> the mapping is removed. If the function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-">merge</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the resulting value is to be associated </dd> <dd><code>value</code> - the non-null value to be merged with the existing value associated with the key or, if no existing value or a null value is associated with the key, to be associated with the key</dd> <dd><code>remappingFunction</code> - the function to recompute a value if present</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the new value associated with the specified key, or null if no value is associated with the key</dd> </dl> </li> </ul> <a name="forEach-java.util.function.BiConsumer-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>forEach</h4> <pre>public&nbsp;void&nbsp;forEach(<a href="../../java/util/function/BiConsumer.html" title="interface in java.util.function">BiConsumer</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;action)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#forEach-java.util.function.BiConsumer-">Map</a></code></span> </div> <div class="block">Performs the given action for each entry in this map until all entries have been processed or the action throws an exception. Unless otherwise specified by the implementing class, actions are performed in the order of entry set iteration (if an iteration order is specified.) Exceptions thrown by the action are relayed to the caller.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#forEach-java.util.function.BiConsumer-">forEach</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>action</code> - The action to be performed for each entry</dd> </dl> </li> </ul> <a name="replaceAll-java.util.function.BiFunction-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>replaceAll</h4> <pre>public&nbsp;void&nbsp;replaceAll(<a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;function)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#replaceAll-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception. Exceptions thrown by the function are relayed to the caller.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#replaceAll-java.util.function.BiFunction-">replaceAll</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>function</code> - the function to apply to each entry</dd> </dl> </li> </ul> <a name="clone--"> <!-- --> </a> <ul class="blockListLast"> <li class="blockList"> <h4>clone</h4> <pre>public&nbsp;<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;clone()</pre> <div class="block">Returns a shallow copy of this <tt>HashMap</tt> instance: the keys and values themselves are not cloned.</div> <dl> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#clone--">clone</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a shallow copy of this map</dd> <dt><span class="seeLabel">See Also:</span></dt> <dd><a href="../../java/lang/Cloneable.html" title="interface in java.lang"><code>Cloneable</code></a></dd> </dl> </li> </ul> </li> </ul> 
]

li{
  class = (blockList:)
} : [
 <li class="blockList"><a name="method.detail"> <!-- --> </a> <h3>Method Detail</h3> <a name="size--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>size</h4> <pre>public&nbsp;int&nbsp;size()</pre> <div class="block">Returns the number of key-value mappings in this map.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#size--">size</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#size--">size</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the number of key-value mappings in this map</dd> </dl> </li> </ul> <a name="isEmpty--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>isEmpty</h4> <pre>public&nbsp;boolean&nbsp;isEmpty()</pre> <div class="block">Returns <tt>true</tt> if this map contains no key-value mappings. </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#isEmpty--">isEmpty</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#isEmpty--">isEmpty</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><tt>true</tt> if this map contains no key-value mappings</dd> </dl> </li> </ul> <a name="get-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>get</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;get(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</pre> <div class="block">Returns the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key. <p>More formally, if this map contains a mapping from a key <code>k</code> to a value <code>v</code> such that <code>(key==null ? k==null : key.equals(k))</code>, then this method returns <code>v</code>; otherwise it returns <code>null</code>. (There can be at most one such mapping.) </p> <p>A return value of <code>null</code> does not <i>necessarily</i> indicate that the map contains no mapping for the key; it's also possible that the map explicitly maps the key to <code>null</code>. The <a href="../../java/util/HashMap.html#containsKey-java.lang.Object-"><code>containsKey</code></a> operation may be used to distinguish these two cases.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#get-java.lang.Object-">get</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#get-java.lang.Object-">get</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - the key whose associated value is to be returned</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key</dd> <dt><span class="seeLabel">See Also:</span></dt> <dd><a href="../../java/util/HashMap.html#put-K-V-"><code>put(Object, Object)</code></a></dd> </dl> </li> </ul> <a name="containsKey-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>containsKey</h4> <pre>public&nbsp;boolean&nbsp;containsKey(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</pre> <div class="block">Returns <tt>true</tt> if this map contains a mapping for the specified key.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#containsKey-java.lang.Object-">containsKey</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#containsKey-java.lang.Object-">containsKey</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - The key whose presence in this map is to be tested</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><tt>true</tt> if this map contains a mapping for the specified key.</dd> </dl> </li> </ul> <a name="put-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="put-K-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>put</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;put(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</pre> <div class="block">Associates the specified value with the specified key in this map. If the map previously contained a mapping for the key, the old value is replaced.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#put-K-V-">put</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#put-K-V-">put</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>value</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with <tt>key</tt>, or <tt>null</tt> if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return can also indicate that the map previously associated <tt>null</tt> with <tt>key</tt>.)</dd> </dl> </li> </ul> <a name="putAll-java.util.Map-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>putAll</h4> <pre>public&nbsp;void&nbsp;putAll(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</pre> <div class="block">Copies all of the mappings from the specified map to this map. These mappings will replace any mappings that this map had for any of the keys currently in the specified map.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#putAll-java.util.Map-">putAll</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#putAll-java.util.Map-">putAll</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>m</code> - mappings to be stored in this map</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified map is null</dd> </dl> </li> </ul> <a name="remove-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>remove</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;remove(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</pre> <div class="block">Removes the mapping for the specified key from this map if present.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#remove-java.lang.Object-">remove</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#remove-java.lang.Object-">remove</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key whose mapping is to be removed from the map</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with <tt>key</tt>, or <tt>null</tt> if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return can also indicate that the map previously associated <tt>null</tt> with <tt>key</tt>.)</dd> </dl> </li> </ul> <a name="clear--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>clear</h4> <pre>public&nbsp;void&nbsp;clear()</pre> <div class="block">Removes all of the mappings from this map. The map will be empty after this call returns.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#clear--">clear</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#clear--">clear</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> </dl> </li> </ul> <a name="containsValue-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>containsValue</h4> <pre>public&nbsp;boolean&nbsp;containsValue(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</pre> <div class="block">Returns <tt>true</tt> if this map maps one or more keys to the specified value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#containsValue-java.lang.Object-">containsValue</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#containsValue-java.lang.Object-">containsValue</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>value</code> - value whose presence in this map is to be tested</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><tt>true</tt> if this map maps one or more keys to the specified value</dd> </dl> </li> </ul> <a name="keySet--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>keySet</h4> <pre>public&nbsp;<a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&gt;&nbsp;keySet()</pre> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own <tt>remove</tt> operation), the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#keySet--">keySet</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#keySet--">keySet</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a set view of the keys contained in this map</dd> </dl> </li> </ul> <a name="values--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>values</h4> <pre>public&nbsp;<a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;values()</pre> <div class="block">Returns a <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a> view of the values contained in this map. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. If the map is modified while an iteration over the collection is in progress (except through the iterator's own <tt>remove</tt> operation), the results of the iteration are undefined. The collection supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Collection.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#values--">values</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#values--">values</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a view of the values contained in this map</dd> </dl> </li> </ul> <a name="entrySet--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>entrySet</h4> <pre>public&nbsp;<a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&gt;&nbsp;entrySet()</pre> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the mappings contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own <tt>remove</tt> operation, or through the <tt>setValue</tt> operation on a map entry returned by the iterator) the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#entrySet--">entrySet</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#entrySet--">entrySet</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a set view of the mappings contained in this map</dd> </dl> </li> </ul> <a name="getOrDefault-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="getOrDefault-java.lang.Object-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>getOrDefault</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;getOrDefault(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;defaultValue)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#getOrDefault-java.lang.Object-V-">Map</a></code></span> </div> <div class="block">Returns the value to which the specified key is mapped, or <code>defaultValue</code> if this map contains no mapping for the key.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#getOrDefault-java.lang.Object-V-">getOrDefault</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - the key whose associated value is to be returned</dd> <dd><code>defaultValue</code> - the default mapping of the key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the value to which the specified key is mapped, or <code>defaultValue</code> if this map contains no mapping for the key</dd> </dl> </li> </ul> <a name="putIfAbsent-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="putIfAbsent-K-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>putIfAbsent</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;putIfAbsent(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#putIfAbsent-K-V-">Map</a></code></span> </div> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>) associates it with the given value and returns <code>null</code>, else returns the current value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#putIfAbsent-K-V-">putIfAbsent</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>value</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with the specified key, or <code>null</code> if there was no mapping for the key. (A <code>null</code> return can also indicate that the map previously associated <code>null</code> with the key, if the implementation supports null values.)</dd> </dl> </li> </ul> <a name="remove-java.lang.Object-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>remove</h4> <pre>public&nbsp;boolean&nbsp;remove(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#remove-java.lang.Object-java.lang.Object-">Map</a></code></span> </div> <div class="block">Removes the entry for the specified key only if it is currently mapped to the specified value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#remove-java.lang.Object-java.lang.Object-">remove</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is associated</dd> <dd><code>value</code> - value expected to be associated with the specified key </dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><code>true</code> if the value was removed</dd> </dl> </li> </ul> <a name="replace-java.lang.Object-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="replace-K-V-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>replace</h4> <pre>public&nbsp;boolean&nbsp;replace(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;oldValue, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;newValue)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#replace-K-V-V-">Map</a></code></span> </div> <div class="block">Replaces the entry for the specified key only if currently mapped to the specified value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#replace-K-V-V-">replace</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is associated</dd> <dd><code>oldValue</code> - value expected to be associated with the specified key</dd> <dd><code>newValue</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><code>true</code> if the value was replaced</dd> </dl> </li> </ul> <a name="replace-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="replace-K-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>replace</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;replace(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#replace-K-V-">Map</a></code></span> </div> <div class="block">Replaces the entry for the specified key only if it is currently mapped to some value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#replace-K-V-">replace</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is associated</dd> <dd><code>value</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with the specified key, or <code>null</code> if there was no mapping for the key. (A <code>null</code> return can also indicate that the map previously associated <code>null</code> with the key, if the implementation supports null values.)</dd> </dl> </li> </ul> <a name="computeIfAbsent-java.lang.Object-java.util.function.Function-"> <!-- --> </a><a name="computeIfAbsent-K-java.util.function.Function-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>computeIfAbsent</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;computeIfAbsent(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/Function.html" title="interface in java.util.function">Function</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;mappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#computeIfAbsent-K-java.util.function.Function-">Map</a></code></span> </div> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>), attempts to compute its value using the given mapping function and enters it into this map unless <code>null</code>. <p>If the function returns <code>null</code> no mapping is recorded. If the function itself throws an (unchecked) exception, the exception is rethrown, and no mapping is recorded. The most common usage is to construct a new object serving as an initial mapped value or memoized result, as in: </p> <pre> <code> map.computeIfAbsent(key, k -&gt; new Value(f(k))); </code></pre> <p>Or to implement a multi-value map, <code>Map&lt;K,Collection&lt;V&gt;&gt;</code>, supporting multiple values per key: </p> <pre> <code> map.computeIfAbsent(key, k -&gt; new HashSet&lt;V&gt;()).add(v); </code></pre> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#computeIfAbsent-K-java.util.function.Function-">computeIfAbsent</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>mappingFunction</code> - the function to compute a value</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the current (existing or computed) value associated with the specified key, or null if the computed value is null</dd> </dl> </li> </ul> <a name="computeIfPresent-java.lang.Object-java.util.function.BiFunction-"> <!-- --> </a><a name="computeIfPresent-K-java.util.function.BiFunction-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>computeIfPresent</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;computeIfPresent(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value. <p>If the function returns <code>null</code>, the mapping is removed. If the function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-">computeIfPresent</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>remappingFunction</code> - the function to compute a value</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the new value associated with the specified key, or null if none</dd> </dl> </li> </ul> <a name="compute-java.lang.Object-java.util.function.BiFunction-"> <!-- --> </a><a name="compute-K-java.util.function.BiFunction-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>compute</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;compute(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#compute-K-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">Attempts to compute a mapping for the specified key and its current mapped value (or <code>null</code> if there is no current mapping). For example, to either create or append a <code>String</code> msg to a value mapping: <pre> <code> map.compute(key, (k, v) -&gt; (v == null) ? msg : v.concat(msg))</code></pre> (Method <a href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-"><code>merge()</code></a> is often simpler to use for such purposes.) <p>If the function returns <code>null</code>, the mapping is removed (or remains absent if initially absent). If the function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#compute-K-java.util.function.BiFunction-">compute</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>remappingFunction</code> - the function to compute a value</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the new value associated with the specified key, or null if none</dd> </dl> </li> </ul> <a name="merge-java.lang.Object-java.lang.Object-java.util.function.BiFunction-"> <!-- --> </a><a name="merge-K-V-java.util.function.BiFunction-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>merge</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;merge(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value. Otherwise, replaces the associated value with the results of the given remapping function, or removes if the result is <code>null</code>. This method may be of use when combining multiple mapped values for a key. For example, to either create or append a <code>String msg</code> to a value mapping: <pre> <code> map.merge(key, msg, String::concat) </code></pre> <p>If the function returns <code>null</code> the mapping is removed. If the function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-">merge</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the resulting value is to be associated </dd> <dd><code>value</code> - the non-null value to be merged with the existing value associated with the key or, if no existing value or a null value is associated with the key, to be associated with the key</dd> <dd><code>remappingFunction</code> - the function to recompute a value if present</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the new value associated with the specified key, or null if no value is associated with the key</dd> </dl> </li> </ul> <a name="forEach-java.util.function.BiConsumer-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>forEach</h4> <pre>public&nbsp;void&nbsp;forEach(<a href="../../java/util/function/BiConsumer.html" title="interface in java.util.function">BiConsumer</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;action)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#forEach-java.util.function.BiConsumer-">Map</a></code></span> </div> <div class="block">Performs the given action for each entry in this map until all entries have been processed or the action throws an exception. Unless otherwise specified by the implementing class, actions are performed in the order of entry set iteration (if an iteration order is specified.) Exceptions thrown by the action are relayed to the caller.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#forEach-java.util.function.BiConsumer-">forEach</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>action</code> - The action to be performed for each entry</dd> </dl> </li> </ul> <a name="replaceAll-java.util.function.BiFunction-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>replaceAll</h4> <pre>public&nbsp;void&nbsp;replaceAll(<a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;function)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#replaceAll-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception. Exceptions thrown by the function are relayed to the caller.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#replaceAll-java.util.function.BiFunction-">replaceAll</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>function</code> - the function to apply to each entry</dd> </dl> </li> </ul> <a name="clone--"> <!-- --> </a> <ul class="blockListLast"> <li class="blockList"> <h4>clone</h4> <pre>public&nbsp;<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;clone()</pre> <div class="block">Returns a shallow copy of this <tt>HashMap</tt> instance: the keys and values themselves are not cloned.</div> <dl> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#clone--">clone</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a shallow copy of this map</dd> <dt><span class="seeLabel">See Also:</span></dt> <dd><a href="../../java/lang/Cloneable.html" title="interface in java.lang"><code>Cloneable</code></a></dd> </dl> </li> </ul> </li> 
]

ul{
  class = (blockList:)
} : [
<a name="method.detail"> <!-- --> </a> <h3>Method Detail</h3> <a name="size--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>size</h4> <pre>public&nbsp;int&nbsp;size()</pre> <div class="block">Returns the number of key-value mappings in this map.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#size--">size</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#size--">size</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the number of key-value mappings in this map</dd> </dl> </li> </ul> <a name="isEmpty--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>isEmpty</h4> <pre>public&nbsp;boolean&nbsp;isEmpty()</pre> <div class="block">Returns <tt>true</tt> if this map contains no key-value mappings. </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#isEmpty--">isEmpty</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#isEmpty--">isEmpty</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><tt>true</tt> if this map contains no key-value mappings</dd> </dl> </li> </ul> <a name="get-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>get</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;get(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</pre> <div class="block">Returns the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key. <p>More formally, if this map contains a mapping from a key <code>k</code> to a value <code>v</code> such that <code>(key==null ? k==null : key.equals(k))</code>, then this method returns <code>v</code>; otherwise it returns <code>null</code>. (There can be at most one such mapping.) </p> <p>A return value of <code>null</code> does not <i>necessarily</i> indicate that the map contains no mapping for the key; it's also possible that the map explicitly maps the key to <code>null</code>. The <a href="../../java/util/HashMap.html#containsKey-java.lang.Object-"><code>containsKey</code></a> operation may be used to distinguish these two cases.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#get-java.lang.Object-">get</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#get-java.lang.Object-">get</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - the key whose associated value is to be returned</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key</dd> <dt><span class="seeLabel">See Also:</span></dt> <dd><a href="../../java/util/HashMap.html#put-K-V-"><code>put(Object, Object)</code></a></dd> </dl> </li> </ul> <a name="containsKey-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>containsKey</h4> <pre>public&nbsp;boolean&nbsp;containsKey(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</pre> <div class="block">Returns <tt>true</tt> if this map contains a mapping for the specified key.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#containsKey-java.lang.Object-">containsKey</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#containsKey-java.lang.Object-">containsKey</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - The key whose presence in this map is to be tested</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><tt>true</tt> if this map contains a mapping for the specified key.</dd> </dl> </li> </ul> <a name="put-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="put-K-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>put</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;put(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</pre> <div class="block">Associates the specified value with the specified key in this map. If the map previously contained a mapping for the key, the old value is replaced.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#put-K-V-">put</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#put-K-V-">put</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>value</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with <tt>key</tt>, or <tt>null</tt> if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return can also indicate that the map previously associated <tt>null</tt> with <tt>key</tt>.)</dd> </dl> </li> </ul> <a name="putAll-java.util.Map-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>putAll</h4> <pre>public&nbsp;void&nbsp;putAll(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</pre> <div class="block">Copies all of the mappings from the specified map to this map. These mappings will replace any mappings that this map had for any of the keys currently in the specified map.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#putAll-java.util.Map-">putAll</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#putAll-java.util.Map-">putAll</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>m</code> - mappings to be stored in this map</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified map is null</dd> </dl> </li> </ul> <a name="remove-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>remove</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;remove(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</pre> <div class="block">Removes the mapping for the specified key from this map if present.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#remove-java.lang.Object-">remove</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#remove-java.lang.Object-">remove</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key whose mapping is to be removed from the map</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with <tt>key</tt>, or <tt>null</tt> if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return can also indicate that the map previously associated <tt>null</tt> with <tt>key</tt>.)</dd> </dl> </li> </ul> <a name="clear--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>clear</h4> <pre>public&nbsp;void&nbsp;clear()</pre> <div class="block">Removes all of the mappings from this map. The map will be empty after this call returns.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#clear--">clear</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#clear--">clear</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> </dl> </li> </ul> <a name="containsValue-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>containsValue</h4> <pre>public&nbsp;boolean&nbsp;containsValue(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</pre> <div class="block">Returns <tt>true</tt> if this map maps one or more keys to the specified value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#containsValue-java.lang.Object-">containsValue</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#containsValue-java.lang.Object-">containsValue</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>value</code> - value whose presence in this map is to be tested</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><tt>true</tt> if this map maps one or more keys to the specified value</dd> </dl> </li> </ul> <a name="keySet--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>keySet</h4> <pre>public&nbsp;<a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&gt;&nbsp;keySet()</pre> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own <tt>remove</tt> operation), the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#keySet--">keySet</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#keySet--">keySet</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a set view of the keys contained in this map</dd> </dl> </li> </ul> <a name="values--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>values</h4> <pre>public&nbsp;<a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;values()</pre> <div class="block">Returns a <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a> view of the values contained in this map. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. If the map is modified while an iteration over the collection is in progress (except through the iterator's own <tt>remove</tt> operation), the results of the iteration are undefined. The collection supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Collection.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#values--">values</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#values--">values</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a view of the values contained in this map</dd> </dl> </li> </ul> <a name="entrySet--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>entrySet</h4> <pre>public&nbsp;<a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&gt;&nbsp;entrySet()</pre> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the mappings contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own <tt>remove</tt> operation, or through the <tt>setValue</tt> operation on a map entry returned by the iterator) the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#entrySet--">entrySet</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#entrySet--">entrySet</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a set view of the mappings contained in this map</dd> </dl> </li> </ul> <a name="getOrDefault-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="getOrDefault-java.lang.Object-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>getOrDefault</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;getOrDefault(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;defaultValue)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#getOrDefault-java.lang.Object-V-">Map</a></code></span> </div> <div class="block">Returns the value to which the specified key is mapped, or <code>defaultValue</code> if this map contains no mapping for the key.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#getOrDefault-java.lang.Object-V-">getOrDefault</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - the key whose associated value is to be returned</dd> <dd><code>defaultValue</code> - the default mapping of the key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the value to which the specified key is mapped, or <code>defaultValue</code> if this map contains no mapping for the key</dd> </dl> </li> </ul> <a name="putIfAbsent-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="putIfAbsent-K-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>putIfAbsent</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;putIfAbsent(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#putIfAbsent-K-V-">Map</a></code></span> </div> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>) associates it with the given value and returns <code>null</code>, else returns the current value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#putIfAbsent-K-V-">putIfAbsent</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>value</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with the specified key, or <code>null</code> if there was no mapping for the key. (A <code>null</code> return can also indicate that the map previously associated <code>null</code> with the key, if the implementation supports null values.)</dd> </dl> </li> </ul> <a name="remove-java.lang.Object-java.lang.Object-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>remove</h4> <pre>public&nbsp;boolean&nbsp;remove(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#remove-java.lang.Object-java.lang.Object-">Map</a></code></span> </div> <div class="block">Removes the entry for the specified key only if it is currently mapped to the specified value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#remove-java.lang.Object-java.lang.Object-">remove</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is associated</dd> <dd><code>value</code> - value expected to be associated with the specified key </dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><code>true</code> if the value was removed</dd> </dl> </li> </ul> <a name="replace-java.lang.Object-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="replace-K-V-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>replace</h4> <pre>public&nbsp;boolean&nbsp;replace(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;oldValue, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;newValue)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#replace-K-V-V-">Map</a></code></span> </div> <div class="block">Replaces the entry for the specified key only if currently mapped to the specified value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#replace-K-V-V-">replace</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is associated</dd> <dd><code>oldValue</code> - value expected to be associated with the specified key</dd> <dd><code>newValue</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><code>true</code> if the value was replaced</dd> </dl> </li> </ul> <a name="replace-java.lang.Object-java.lang.Object-"> <!-- --> </a><a name="replace-K-V-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>replace</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;replace(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#replace-K-V-">Map</a></code></span> </div> <div class="block">Replaces the entry for the specified key only if it is currently mapped to some value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#replace-K-V-">replace</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is associated</dd> <dd><code>value</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with the specified key, or <code>null</code> if there was no mapping for the key. (A <code>null</code> return can also indicate that the map previously associated <code>null</code> with the key, if the implementation supports null values.)</dd> </dl> </li> </ul> <a name="computeIfAbsent-java.lang.Object-java.util.function.Function-"> <!-- --> </a><a name="computeIfAbsent-K-java.util.function.Function-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>computeIfAbsent</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;computeIfAbsent(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/Function.html" title="interface in java.util.function">Function</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;mappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#computeIfAbsent-K-java.util.function.Function-">Map</a></code></span> </div> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>), attempts to compute its value using the given mapping function and enters it into this map unless <code>null</code>. <p>If the function returns <code>null</code> no mapping is recorded. If the function itself throws an (unchecked) exception, the exception is rethrown, and no mapping is recorded. The most common usage is to construct a new object serving as an initial mapped value or memoized result, as in: </p> <pre> <code> map.computeIfAbsent(key, k -&gt; new Value(f(k))); </code></pre> <p>Or to implement a multi-value map, <code>Map&lt;K,Collection&lt;V&gt;&gt;</code>, supporting multiple values per key: </p> <pre> <code> map.computeIfAbsent(key, k -&gt; new HashSet&lt;V&gt;()).add(v); </code></pre> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#computeIfAbsent-K-java.util.function.Function-">computeIfAbsent</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>mappingFunction</code> - the function to compute a value</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the current (existing or computed) value associated with the specified key, or null if the computed value is null</dd> </dl> </li> </ul> <a name="computeIfPresent-java.lang.Object-java.util.function.BiFunction-"> <!-- --> </a><a name="computeIfPresent-K-java.util.function.BiFunction-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>computeIfPresent</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;computeIfPresent(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value. <p>If the function returns <code>null</code>, the mapping is removed. If the function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-">computeIfPresent</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>remappingFunction</code> - the function to compute a value</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the new value associated with the specified key, or null if none</dd> </dl> </li> </ul> <a name="compute-java.lang.Object-java.util.function.BiFunction-"> <!-- --> </a><a name="compute-K-java.util.function.BiFunction-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>compute</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;compute(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#compute-K-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">Attempts to compute a mapping for the specified key and its current mapped value (or <code>null</code> if there is no current mapping). For example, to either create or append a <code>String</code> msg to a value mapping: <pre> <code> map.compute(key, (k, v) -&gt; (v == null) ? msg : v.concat(msg))</code></pre> (Method <a href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-"><code>merge()</code></a> is often simpler to use for such purposes.) <p>If the function returns <code>null</code>, the mapping is removed (or remains absent if initially absent). If the function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#compute-K-java.util.function.BiFunction-">compute</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>remappingFunction</code> - the function to compute a value</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the new value associated with the specified key, or null if none</dd> </dl> </li> </ul> <a name="merge-java.lang.Object-java.lang.Object-java.util.function.BiFunction-"> <!-- --> </a><a name="merge-K-V-java.util.function.BiFunction-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>merge</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;merge(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value. Otherwise, replaces the associated value with the results of the given remapping function, or removes if the result is <code>null</code>. This method may be of use when combining multiple mapped values for a key. For example, to either create or append a <code>String msg</code> to a value mapping: <pre> <code> map.merge(key, msg, String::concat) </code></pre> <p>If the function returns <code>null</code> the mapping is removed. If the function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-">merge</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the resulting value is to be associated </dd> <dd><code>value</code> - the non-null value to be merged with the existing value associated with the key or, if no existing value or a null value is associated with the key, to be associated with the key</dd> <dd><code>remappingFunction</code> - the function to recompute a value if present</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the new value associated with the specified key, or null if no value is associated with the key</dd> </dl> </li> </ul> <a name="forEach-java.util.function.BiConsumer-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>forEach</h4> <pre>public&nbsp;void&nbsp;forEach(<a href="../../java/util/function/BiConsumer.html" title="interface in java.util.function">BiConsumer</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;action)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#forEach-java.util.function.BiConsumer-">Map</a></code></span> </div> <div class="block">Performs the given action for each entry in this map until all entries have been processed or the action throws an exception. Unless otherwise specified by the implementing class, actions are performed in the order of entry set iteration (if an iteration order is specified.) Exceptions thrown by the action are relayed to the caller.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#forEach-java.util.function.BiConsumer-">forEach</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>action</code> - The action to be performed for each entry</dd> </dl> </li> </ul> <a name="replaceAll-java.util.function.BiFunction-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>replaceAll</h4> <pre>public&nbsp;void&nbsp;replaceAll(<a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;function)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#replaceAll-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception. Exceptions thrown by the function are relayed to the caller.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#replaceAll-java.util.function.BiFunction-">replaceAll</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>function</code> - the function to apply to each entry</dd> </dl> </li> </ul> <a name="clone--"> <!-- --> </a> <ul class="blockListLast"> <li class="blockList"> <h4>clone</h4> <pre>public&nbsp;<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;clone()</pre> <div class="block">Returns a shallow copy of this <tt>HashMap</tt> instance: the keys and values themselves are not cloned.</div> <dl> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#clone--">clone</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a shallow copy of this map</dd> <dt><span class="seeLabel">See Also:</span></dt> <dd><a href="../../java/lang/Cloneable.html" title="interface in java.lang"><code>Cloneable</code></a></dd> </dl> </li> </ul> 
]

ul{
  class = (blockList:)
} : [
<a name="constructor.detail"> <!-- --> </a> <h3>Constructor Detail</h3> <a name="HashMap-int-float-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>HashMap</h4> <pre>public&nbsp;HashMap(int&nbsp;initialCapacity, float&nbsp;loadFactor)</pre> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and load factor.</div> <dl> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>initialCapacity</code> - the initial capacity</dd> <dd><code>loadFactor</code> - the load factor</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the initial capacity is negative or the load factor is nonpositive</dd> </dl> </li> </ul> <a name="HashMap-int-"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>HashMap</h4> <pre>public&nbsp;HashMap(int&nbsp;initialCapacity)</pre> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and the default load factor (0.75).</div> <dl> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>initialCapacity</code> - the initial capacity.</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the initial capacity is negative.</dd> </dl> </li> </ul> <a name="HashMap--"> <!-- --> </a> <ul class="blockList"> <li class="blockList"> <h4>HashMap</h4> <pre>public&nbsp;HashMap()</pre> <div class="block">Constructs an empty <tt>HashMap</tt> with the default initial capacity (16) and the default load factor (0.75).</div> </li> </ul> <a name="HashMap-java.util.Map-"> <!-- --> </a> <ul class="blockListLast"> <li class="blockList"> <h4>HashMap</h4> <pre>public&nbsp;HashMap(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</pre> <div class="block">Constructs a new <tt>HashMap</tt> with the same mappings as the specified <tt>Map</tt>. The <tt>HashMap</tt> is created with default load factor (0.75) and an initial capacity sufficient to hold the mappings in the specified <tt>Map</tt>.</div> <dl> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>m</code> - the map whose mappings are to be placed in this map</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified map is null</dd> </dl> </li> </ul> 
]

li{
  class = (blockList:)
} : [
 <li class="blockList"> <h4>HashMap</h4> <pre>public&nbsp;HashMap(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</pre> <div class="block">Constructs a new <tt>HashMap</tt> with the same mappings as the specified <tt>Map</tt>. The <tt>HashMap</tt> is created with default load factor (0.75) and an initial capacity sufficient to hold the mappings in the specified <tt>Map</tt>.</div> <dl> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>m</code> - the map whose mappings are to be placed in this map</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified map is null</dd> </dl> </li> 
]

ul{
  class = (blockListLast:)
} : [
 <h4>HashMap</h4> <pre>public&nbsp;HashMap(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</pre> <div class="block">Constructs a new <tt>HashMap</tt> with the same mappings as the specified <tt>Map</tt>. The <tt>HashMap</tt> is created with default load factor (0.75) and an initial capacity sufficient to hold the mappings in the specified <tt>Map</tt>.</div> <dl> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>m</code> - the map whose mappings are to be placed in this map</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified map is null</dd> </dl> 
]

a{
  name = (HashMap-java.util.Map-:)
} : [

]

ul{
  class = (blockList:)
} : [
 <h4>HashMap</h4> <pre>public&nbsp;HashMap()</pre> <div class="block">Constructs an empty <tt>HashMap</tt> with the default initial capacity (16) and the default load factor (0.75).</div> 
]

a{
  name = (HashMap--:)
} : [

]

ul{
  class = (blockList:)
} : [
 <h4>HashMap</h4> <pre>public&nbsp;HashMap(int&nbsp;initialCapacity)</pre> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and the default load factor (0.75).</div> <dl> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>initialCapacity</code> - the initial capacity.</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the initial capacity is negative.</dd> </dl> 
]

a{
  name = (HashMap-int-:)
} : [

]

ul{
  class = (blockList:)
} : [
 <h4>HashMap</h4> <pre>public&nbsp;HashMap(int&nbsp;initialCapacity, float&nbsp;loadFactor)</pre> <div class="block">Constructs an empty <tt>HashMap</tt> with the specified initial capacity and load factor.</div> <dl> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>initialCapacity</code> - the initial capacity</dd> <dd><code>loadFactor</code> - the load factor</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the initial capacity is negative or the load factor is nonpositive</dd> </dl> 
]

a{
  name = (HashMap-int-float-:)
} : [

]

h3 {} : [

]

a{
  name = (constructor.detail:)
} : [

]

li{
  class = (blockList:)
} : [
 <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>initialCapacity</code> - the initial capacity</dd> <dd><code>loadFactor</code> - the load factor</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the initial capacity is negative or the load factor is nonpositive</dd> 
]

dl {} : [
<code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the initial capacity is negative or the load factor is nonpositive
]

div{
  class = (block:)
} : [
HashMap
]

pre {} : [

]

h4 {} : [

]

tt {} : [

]

dd {} : [
<a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a>
]

dt {} : [
Throws:
]

dd {} : [
loadFactor
]

dd {} : [
initialCapacity
]

dt {} : [
Parameters:
]

span{
  class = (paramLabel:)
} : [

]

code {} : [

]

code {} : [

]

span{
  class = (throwsLabel:)
} : [

]

code {} : [
IllegalArgumentException
]

a{
  href = (../../java/lang/IllegalArgumentException.html:)
  title = (class:in:java.lang:)
} : [

]

li{
  class = (blockList:)
} : [
 <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>initialCapacity</code> - the initial capacity.</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the initial capacity is negative.</dd> 
]

dl {} : [
<code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the initial capacity is negative.
]

div{
  class = (block:)
} : [
HashMap
]

pre {} : [

]

h4 {} : [

]

tt {} : [

]

dd {} : [
<a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a>
]

dt {} : [
Throws:
]

dd {} : [
initialCapacity
]

dt {} : [
Parameters:
]

span{
  class = (paramLabel:)
} : [

]

code {} : [

]

span{
  class = (throwsLabel:)
} : [

]

code {} : [
IllegalArgumentException
]

a{
  href = (../../java/lang/IllegalArgumentException.html:)
  title = (class:in:java.lang:)
} : [

]

li{
  class = (blockList:)
} : [
Constructs an empty <tt>HashMap</tt> with the default initial capacity (16) and the default load factor (0.75).
]

div{
  class = (block:)
} : [
HashMap
]

pre {} : [

]

h4 {} : [

]

tt {} : [

]

li{
  class = (blockList:)
} : [
 <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>m</code> - the map whose mappings are to be placed in this map</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified map is null</dd> 
]

dl {} : [
<code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified map is null
]

div{
  class = (block:)
} : [
Map
]

pre {} : [
V
]

h4 {} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Map.html:)
  title = (interface:in:java.util:)
} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

dd {} : [
<a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a>
]

dt {} : [
Throws:
]

dd {} : [
m
]

dt {} : [
Parameters:
]

span{
  class = (paramLabel:)
} : [

]

code {} : [

]

span{
  class = (throwsLabel:)
} : [

]

code {} : [
NullPointerException
]

a{
  href = (../../java/lang/NullPointerException.html:)
  title = (class:in:java.lang:)
} : [

]

li{
  class = (blockList:)
} : [
 <li class="blockList"> <h4>clone</h4> <pre>public&nbsp;<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;clone()</pre> <div class="block">Returns a shallow copy of this <tt>HashMap</tt> instance: the keys and values themselves are not cloned.</div> <dl> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#clone--">clone</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a shallow copy of this map</dd> <dt><span class="seeLabel">See Also:</span></dt> <dd><a href="../../java/lang/Cloneable.html" title="interface in java.lang"><code>Cloneable</code></a></dd> </dl> </li> 
]

ul{
  class = (blockListLast:)
} : [
 <h4>clone</h4> <pre>public&nbsp;<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;clone()</pre> <div class="block">Returns a shallow copy of this <tt>HashMap</tt> instance: the keys and values themselves are not cloned.</div> <dl> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#clone--">clone</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a shallow copy of this map</dd> <dt><span class="seeLabel">See Also:</span></dt> <dd><a href="../../java/lang/Cloneable.html" title="interface in java.lang"><code>Cloneable</code></a></dd> </dl> 
]

a{
  name = (clone--:)
} : [

]

ul{
  class = (blockList:)
} : [
 <h4>replaceAll</h4> <pre>public&nbsp;void&nbsp;replaceAll(<a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;function)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#replaceAll-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception. Exceptions thrown by the function are relayed to the caller.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#replaceAll-java.util.function.BiFunction-">replaceAll</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>function</code> - the function to apply to each entry</dd> </dl> 
]

a{
  name = (replaceAll-java.util.function.BiFunction-:)
} : [

]

ul{
  class = (blockList:)
} : [
 <h4>forEach</h4> <pre>public&nbsp;void&nbsp;forEach(<a href="../../java/util/function/BiConsumer.html" title="interface in java.util.function">BiConsumer</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;action)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#forEach-java.util.function.BiConsumer-">Map</a></code></span> </div> <div class="block">Performs the given action for each entry in this map until all entries have been processed or the action throws an exception. Unless otherwise specified by the implementing class, actions are performed in the order of entry set iteration (if an iteration order is specified.) Exceptions thrown by the action are relayed to the caller.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#forEach-java.util.function.BiConsumer-">forEach</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>action</code> - The action to be performed for each entry</dd> </dl> 
]

a{
  name = (forEach-java.util.function.BiConsumer-:)
} : [

]

ul{
  class = (blockList:)
} : [
 <h4>merge</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;merge(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value. Otherwise, replaces the associated value with the results of the given remapping function, or removes if the result is <code>null</code>. This method may be of use when combining multiple mapped values for a key. For example, to either create or append a <code>String msg</code> to a value mapping: <pre> <code> map.merge(key, msg, String::concat) </code></pre> <p>If the function returns <code>null</code> the mapping is removed. If the function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-">merge</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the resulting value is to be associated </dd> <dd><code>value</code> - the non-null value to be merged with the existing value associated with the key or, if no existing value or a null value is associated with the key, to be associated with the key</dd> <dd><code>remappingFunction</code> - the function to recompute a value if present</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the new value associated with the specified key, or null if no value is associated with the key</dd> </dl> 
]

a{
  name = (merge-K-V-java.util.function.BiFunction-:)
} : [

]

a{
  name = (merge-java.lang.Object-java.lang.Object-java.util.function.BiFunction-:)
} : [

]

ul{
  class = (blockList:)
} : [
 <h4>compute</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;compute(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#compute-K-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">Attempts to compute a mapping for the specified key and its current mapped value (or <code>null</code> if there is no current mapping). For example, to either create or append a <code>String</code> msg to a value mapping: <pre> <code> map.compute(key, (k, v) -&gt; (v == null) ? msg : v.concat(msg))</code></pre> (Method <a href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-"><code>merge()</code></a> is often simpler to use for such purposes.) <p>If the function returns <code>null</code>, the mapping is removed (or remains absent if initially absent). If the function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#compute-K-java.util.function.BiFunction-">compute</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>remappingFunction</code> - the function to compute a value</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the new value associated with the specified key, or null if none</dd> </dl> 
]

a{
  name = (compute-K-java.util.function.BiFunction-:)
} : [

]

a{
  name = (compute-java.lang.Object-java.util.function.BiFunction-:)
} : [

]

ul{
  class = (blockList:)
} : [
 <h4>computeIfPresent</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;computeIfPresent(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;remappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-">Map</a></code></span> </div> <div class="block">If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value. <p>If the function returns <code>null</code>, the mapping is removed. If the function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-">computeIfPresent</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>remappingFunction</code> - the function to compute a value</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the new value associated with the specified key, or null if none</dd> </dl> 
]

a{
  name = (computeIfPresent-K-java.util.function.BiFunction-:)
} : [

]

a{
  name = (computeIfPresent-java.lang.Object-java.util.function.BiFunction-:)
} : [

]

ul{
  class = (blockList:)
} : [
 <h4>computeIfAbsent</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;computeIfAbsent(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/function/Function.html" title="interface in java.util.function">Function</a>&lt;? super <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;mappingFunction)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#computeIfAbsent-K-java.util.function.Function-">Map</a></code></span> </div> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>), attempts to compute its value using the given mapping function and enters it into this map unless <code>null</code>. <p>If the function returns <code>null</code> no mapping is recorded. If the function itself throws an (unchecked) exception, the exception is rethrown, and no mapping is recorded. The most common usage is to construct a new object serving as an initial mapped value or memoized result, as in: </p> <pre> <code> map.computeIfAbsent(key, k -&gt; new Value(f(k))); </code></pre> <p>Or to implement a multi-value map, <code>Map&lt;K,Collection&lt;V&gt;&gt;</code>, supporting multiple values per key: </p> <pre> <code> map.computeIfAbsent(key, k -&gt; new HashSet&lt;V&gt;()).add(v); </code></pre> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#computeIfAbsent-K-java.util.function.Function-">computeIfAbsent</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>mappingFunction</code> - the function to compute a value</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the current (existing or computed) value associated with the specified key, or null if the computed value is null</dd> </dl> 
]

a{
  name = (computeIfAbsent-K-java.util.function.Function-:)
} : [

]

a{
  name = (computeIfAbsent-java.lang.Object-java.util.function.Function-:)
} : [

]

ul{
  class = (blockList:)
} : [
 <h4>replace</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;replace(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#replace-K-V-">Map</a></code></span> </div> <div class="block">Replaces the entry for the specified key only if it is currently mapped to some value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#replace-K-V-">replace</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is associated</dd> <dd><code>value</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with the specified key, or <code>null</code> if there was no mapping for the key. (A <code>null</code> return can also indicate that the map previously associated <code>null</code> with the key, if the implementation supports null values.)</dd> </dl> 
]

a{
  name = (replace-K-V-:)
} : [

]

a{
  name = (replace-java.lang.Object-java.lang.Object-:)
} : [

]

ul{
  class = (blockList:)
} : [
 <h4>replace</h4> <pre>public&nbsp;boolean&nbsp;replace(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;oldValue, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;newValue)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#replace-K-V-V-">Map</a></code></span> </div> <div class="block">Replaces the entry for the specified key only if currently mapped to the specified value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#replace-K-V-V-">replace</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is associated</dd> <dd><code>oldValue</code> - value expected to be associated with the specified key</dd> <dd><code>newValue</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><code>true</code> if the value was replaced</dd> </dl> 
]

a{
  name = (replace-K-V-V-:)
} : [

]

a{
  name = (replace-java.lang.Object-java.lang.Object-java.lang.Object-:)
} : [

]

ul{
  class = (blockList:)
} : [
 <h4>remove</h4> <pre>public&nbsp;boolean&nbsp;remove(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#remove-java.lang.Object-java.lang.Object-">Map</a></code></span> </div> <div class="block">Removes the entry for the specified key only if it is currently mapped to the specified value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#remove-java.lang.Object-java.lang.Object-">remove</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is associated</dd> <dd><code>value</code> - value expected to be associated with the specified key </dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><code>true</code> if the value was removed</dd> </dl> 
]

a{
  name = (remove-java.lang.Object-java.lang.Object-:)
} : [

]

ul{
  class = (blockList:)
} : [
 <h4>putIfAbsent</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;putIfAbsent(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#putIfAbsent-K-V-">Map</a></code></span> </div> <div class="block">If the specified key is not already associated with a value (or is mapped to <code>null</code>) associates it with the given value and returns <code>null</code>, else returns the current value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#putIfAbsent-K-V-">putIfAbsent</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>value</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with the specified key, or <code>null</code> if there was no mapping for the key. (A <code>null</code> return can also indicate that the map previously associated <code>null</code> with the key, if the implementation supports null values.)</dd> </dl> 
]

a{
  name = (putIfAbsent-K-V-:)
} : [

]

a{
  name = (putIfAbsent-java.lang.Object-java.lang.Object-:)
} : [

]

ul{
  class = (blockList:)
} : [
 <h4>getOrDefault</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;getOrDefault(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;defaultValue)</pre> <div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#getOrDefault-java.lang.Object-V-">Map</a></code></span> </div> <div class="block">Returns the value to which the specified key is mapped, or <code>defaultValue</code> if this map contains no mapping for the key.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#getOrDefault-java.lang.Object-V-">getOrDefault</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - the key whose associated value is to be returned</dd> <dd><code>defaultValue</code> - the default mapping of the key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the value to which the specified key is mapped, or <code>defaultValue</code> if this map contains no mapping for the key</dd> </dl> 
]

a{
  name = (getOrDefault-java.lang.Object-V-:)
} : [

]

a{
  name = (getOrDefault-java.lang.Object-java.lang.Object-:)
} : [

]

ul{
  class = (blockList:)
} : [
 <h4>entrySet</h4> <pre>public&nbsp;<a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&gt;&nbsp;entrySet()</pre> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the mappings contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own <tt>remove</tt> operation, or through the <tt>setValue</tt> operation on a map entry returned by the iterator) the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#entrySet--">entrySet</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#entrySet--">entrySet</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a set view of the mappings contained in this map</dd> </dl> 
]

a{
  name = (entrySet--:)
} : [

]

ul{
  class = (blockList:)
} : [
 <h4>values</h4> <pre>public&nbsp;<a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;values()</pre> <div class="block">Returns a <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a> view of the values contained in this map. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. If the map is modified while an iteration over the collection is in progress (except through the iterator's own <tt>remove</tt> operation), the results of the iteration are undefined. The collection supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Collection.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#values--">values</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#values--">values</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a view of the values contained in this map</dd> </dl> 
]

a{
  name = (values--:)
} : [

]

ul{
  class = (blockList:)
} : [
 <h4>keySet</h4> <pre>public&nbsp;<a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&gt;&nbsp;keySet()</pre> <div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own <tt>remove</tt> operation), the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#keySet--">keySet</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#keySet--">keySet</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a set view of the keys contained in this map</dd> </dl> 
]

a{
  name = (keySet--:)
} : [

]

ul{
  class = (blockList:)
} : [
 <h4>containsValue</h4> <pre>public&nbsp;boolean&nbsp;containsValue(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;value)</pre> <div class="block">Returns <tt>true</tt> if this map maps one or more keys to the specified value.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#containsValue-java.lang.Object-">containsValue</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#containsValue-java.lang.Object-">containsValue</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>value</code> - value whose presence in this map is to be tested</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><tt>true</tt> if this map maps one or more keys to the specified value</dd> </dl> 
]

a{
  name = (containsValue-java.lang.Object-:)
} : [

]

ul{
  class = (blockList:)
} : [
 <h4>clear</h4> <pre>public&nbsp;void&nbsp;clear()</pre> <div class="block">Removes all of the mappings from this map. The map will be empty after this call returns.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#clear--">clear</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#clear--">clear</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> </dl> 
]

a{
  name = (clear--:)
} : [

]

ul{
  class = (blockList:)
} : [
 <h4>remove</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;remove(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</pre> <div class="block">Removes the mapping for the specified key from this map if present.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#remove-java.lang.Object-">remove</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#remove-java.lang.Object-">remove</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key whose mapping is to be removed from the map</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with <tt>key</tt>, or <tt>null</tt> if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return can also indicate that the map previously associated <tt>null</tt> with <tt>key</tt>.)</dd> </dl> 
]

a{
  name = (remove-java.lang.Object-:)
} : [

]

ul{
  class = (blockList:)
} : [
 <h4>putAll</h4> <pre>public&nbsp;void&nbsp;putAll(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,? extends <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;&nbsp;m)</pre> <div class="block">Copies all of the mappings from the specified map to this map. These mappings will replace any mappings that this map had for any of the keys currently in the specified map.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#putAll-java.util.Map-">putAll</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#putAll-java.util.Map-">putAll</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>m</code> - mappings to be stored in this map</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified map is null</dd> </dl> 
]

a{
  name = (putAll-java.util.Map-:)
} : [

]

ul{
  class = (blockList:)
} : [
 <h4>put</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;put(<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>&nbsp;key, <a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;value)</pre> <div class="block">Associates the specified value with the specified key in this map. If the map previously contained a mapping for the key, the old value is replaced.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#put-K-V-">put</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#put-K-V-">put</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>value</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with <tt>key</tt>, or <tt>null</tt> if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return can also indicate that the map previously associated <tt>null</tt> with <tt>key</tt>.)</dd> </dl> 
]

a{
  name = (put-K-V-:)
} : [

]

a{
  name = (put-java.lang.Object-java.lang.Object-:)
} : [

]

ul{
  class = (blockList:)
} : [
 <h4>containsKey</h4> <pre>public&nbsp;boolean&nbsp;containsKey(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</pre> <div class="block">Returns <tt>true</tt> if this map contains a mapping for the specified key.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#containsKey-java.lang.Object-">containsKey</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#containsKey-java.lang.Object-">containsKey</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - The key whose presence in this map is to be tested</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><tt>true</tt> if this map contains a mapping for the specified key.</dd> </dl> 
]

a{
  name = (containsKey-java.lang.Object-:)
} : [

]

ul{
  class = (blockList:)
} : [
 <h4>get</h4> <pre>public&nbsp;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&nbsp;get(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;key)</pre> <div class="block">Returns the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key. <p>More formally, if this map contains a mapping from a key <code>k</code> to a value <code>v</code> such that <code>(key==null ? k==null : key.equals(k))</code>, then this method returns <code>v</code>; otherwise it returns <code>null</code>. (There can be at most one such mapping.) </p> <p>A return value of <code>null</code> does not <i>necessarily</i> indicate that the map contains no mapping for the key; it's also possible that the map explicitly maps the key to <code>null</code>. The <a href="../../java/util/HashMap.html#containsKey-java.lang.Object-"><code>containsKey</code></a> operation may be used to distinguish these two cases.</p> </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#get-java.lang.Object-">get</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#get-java.lang.Object-">get</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - the key whose associated value is to be returned</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key</dd> <dt><span class="seeLabel">See Also:</span></dt> <dd><a href="../../java/util/HashMap.html#put-K-V-"><code>put(Object, Object)</code></a></dd> </dl> 
]

a{
  name = (get-java.lang.Object-:)
} : [

]

ul{
  class = (blockList:)
} : [
 <h4>isEmpty</h4> <pre>public&nbsp;boolean&nbsp;isEmpty()</pre> <div class="block">Returns <tt>true</tt> if this map contains no key-value mappings. </div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#isEmpty--">isEmpty</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#isEmpty--">isEmpty</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><tt>true</tt> if this map contains no key-value mappings</dd> </dl> 
]

a{
  name = (isEmpty--:)
} : [

]

ul{
  class = (blockList:)
} : [
 <h4>size</h4> <pre>public&nbsp;int&nbsp;size()</pre> <div class="block">Returns the number of key-value mappings in this map.</div> <dl> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#size--">size</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#size--">size</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the number of key-value mappings in this map</dd> </dl> 
]

a{
  name = (size--:)
} : [

]

h3 {} : [

]

a{
  name = (method.detail:)
} : [

]

li{
  class = (blockList:)
} : [
 <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#size--">size</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#size--">size</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the number of key-value mappings in this map</dd> 
]

dl {} : [
the number of key-value mappings in this map
]

div{
  class = (block:)
} : [

]

pre {} : [

]

h4 {} : [

]

dd {} : [

]

dt {} : [
Returns:
]

dd {} : [
<a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Overrides:
]

dd {} : [
<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Specified by:
]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
size
]

a{
  href = (../../java/util/Map.html#size--:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Map.html:)
  title = (interface:in:java.util:)
} : [

]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
size
]

a{
  href = (../../java/util/AbstractMap.html#size--:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/AbstractMap.html:)
  title = (class:in:java.util:)
} : [

]

span{
  class = (returnLabel:)
} : [

]

li{
  class = (blockList:)
} : [
 <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#isEmpty--">isEmpty</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#isEmpty--">isEmpty</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><tt>true</tt> if this map contains no key-value mappings</dd> 
]

dl {} : [
<tt>true</tt> if this map contains no key-value mappings
]

div{
  class = (block:)
} : [
true
]

pre {} : [

]

h4 {} : [

]

tt {} : [

]

dd {} : [
true
]

dt {} : [
Returns:
]

dd {} : [
<a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Overrides:
]

dd {} : [
<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Specified by:
]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
isEmpty
]

a{
  href = (../../java/util/Map.html#isEmpty--:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Map.html:)
  title = (interface:in:java.util:)
} : [

]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
isEmpty
]

a{
  href = (../../java/util/AbstractMap.html#isEmpty--:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/AbstractMap.html:)
  title = (class:in:java.util:)
} : [

]

span{
  class = (returnLabel:)
} : [

]

tt {} : [

]

li{
  class = (blockList:)
} : [
 <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#get-java.lang.Object-">get</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#get-java.lang.Object-">get</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - the key whose associated value is to be returned</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key</dd> <dt><span class="seeLabel">See Also:</span></dt> <dd><a href="../../java/util/HashMap.html#put-K-V-"><code>put(Object, Object)</code></a></dd> 
]

dl {} : [
<a href="../../java/util/HashMap.html#put-K-V-"><code>put(Object, Object)</code></a>
]

div{
  class = (block:)
} : [
A return value of <code>null</code> does not <i>necessarily</i> indicate that the map contains no mapping for the key; it's also possible that the map explicitly maps the key to <code>null</code>. The <a href="../../java/util/HashMap.html#containsKey-java.lang.Object-"><code>containsKey</code></a> operation may be used to distinguish these two cases.
]

pre {} : [
Object
]

h4 {} : [

]

a{
  href = (../../java/lang/Object.html:)
  title = (class:in:java.lang:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

p {} : [
<code>containsKey</code>
]

p {} : [
null
]

code {} : [

]

code {} : [

]

code {} : [

]

code {} : [

]

code {} : [

]

code {} : [

]

a{
  href = (../../java/util/HashMap.html#containsKey-java.lang.Object-:)
} : [
containsKey
]

code {} : [

]

i {} : [

]

code {} : [

]

code {} : [

]

dd {} : [
<code>put(Object, Object)</code>
]

dt {} : [
See Also:
]

dd {} : [
null
]

dt {} : [
Returns:
]

dd {} : [
key
]

dt {} : [
Parameters:
]

dd {} : [
<a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Overrides:
]

dd {} : [
<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Specified by:
]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
get
]

a{
  href = (../../java/util/Map.html#get-java.lang.Object-:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Map.html:)
  title = (interface:in:java.util:)
} : [

]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
get
]

a{
  href = (../../java/util/AbstractMap.html#get-java.lang.Object-:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/AbstractMap.html:)
  title = (class:in:java.util:)
} : [

]

span{
  class = (paramLabel:)
} : [

]

code {} : [

]

span{
  class = (returnLabel:)
} : [

]

code {} : [

]

span{
  class = (seeLabel:)
} : [

]

a{
  href = (../../java/util/HashMap.html#put-K-V-:)
} : [
put(Object, Object)
]

code {} : [

]

li{
  class = (blockList:)
} : [
 <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#containsKey-java.lang.Object-">containsKey</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#containsKey-java.lang.Object-">containsKey</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - The key whose presence in this map is to be tested</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><tt>true</tt> if this map contains a mapping for the specified key.</dd> 
]

dl {} : [
<tt>true</tt> if this map contains a mapping for the specified key.
]

div{
  class = (block:)
} : [
true
]

pre {} : [
Object
]

h4 {} : [

]

a{
  href = (../../java/lang/Object.html:)
  title = (class:in:java.lang:)
} : [

]

tt {} : [

]

dd {} : [
true
]

dt {} : [
Returns:
]

dd {} : [
key
]

dt {} : [
Parameters:
]

dd {} : [
<a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Overrides:
]

dd {} : [
<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Specified by:
]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
containsKey
]

a{
  href = (../../java/util/Map.html#containsKey-java.lang.Object-:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Map.html:)
  title = (interface:in:java.util:)
} : [

]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
containsKey
]

a{
  href = (../../java/util/AbstractMap.html#containsKey-java.lang.Object-:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/AbstractMap.html:)
  title = (class:in:java.util:)
} : [

]

span{
  class = (paramLabel:)
} : [

]

code {} : [

]

span{
  class = (returnLabel:)
} : [

]

tt {} : [

]

li{
  class = (blockList:)
} : [
 <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#put-K-V-">put</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#put-K-V-">put</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>value</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with <tt>key</tt>, or <tt>null</tt> if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return can also indicate that the map previously associated <tt>null</tt> with <tt>key</tt>.)</dd> 
]

dl {} : [
the previous value associated with <tt>key</tt>, or <tt>null</tt> if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return can also indicate that the map previously associated <tt>null</tt> with <tt>key</tt>.)
]

div{
  class = (block:)
} : [

]

pre {} : [
V
]

h4 {} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

dd {} : [
key
]

dt {} : [
Returns:
]

dd {} : [
value
]

dd {} : [
key
]

dt {} : [
Parameters:
]

dd {} : [
<a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Overrides:
]

dd {} : [
<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Specified by:
]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
put
]

a{
  href = (../../java/util/Map.html#put-K-V-:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Map.html:)
  title = (interface:in:java.util:)
} : [

]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
put
]

a{
  href = (../../java/util/AbstractMap.html#put-K-V-:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/AbstractMap.html:)
  title = (class:in:java.util:)
} : [

]

span{
  class = (paramLabel:)
} : [

]

code {} : [

]

code {} : [

]

span{
  class = (returnLabel:)
} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

li{
  class = (blockList:)
} : [
 <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#putAll-java.util.Map-">putAll</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#putAll-java.util.Map-">putAll</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>m</code> - mappings to be stored in this map</dd> <dt><span class="throwsLabel">Throws:</span></dt> <dd><code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified map is null</dd> 
]

dl {} : [
<code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified map is null
]

div{
  class = (block:)
} : [

]

pre {} : [
V
]

h4 {} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Map.html:)
  title = (interface:in:java.util:)
} : [

]

dd {} : [
<a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a>
]

dt {} : [
Throws:
]

dd {} : [
m
]

dt {} : [
Parameters:
]

dd {} : [
<a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Overrides:
]

dd {} : [
<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Specified by:
]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
putAll
]

a{
  href = (../../java/util/Map.html#putAll-java.util.Map-:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Map.html:)
  title = (interface:in:java.util:)
} : [

]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
putAll
]

a{
  href = (../../java/util/AbstractMap.html#putAll-java.util.Map-:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/AbstractMap.html:)
  title = (class:in:java.util:)
} : [

]

span{
  class = (paramLabel:)
} : [

]

code {} : [

]

span{
  class = (throwsLabel:)
} : [

]

code {} : [
NullPointerException
]

a{
  href = (../../java/lang/NullPointerException.html:)
  title = (class:in:java.lang:)
} : [

]

li{
  class = (blockList:)
} : [
 <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#remove-java.lang.Object-">remove</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#remove-java.lang.Object-">remove</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key whose mapping is to be removed from the map</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with <tt>key</tt>, or <tt>null</tt> if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return can also indicate that the map previously associated <tt>null</tt> with <tt>key</tt>.)</dd> 
]

dl {} : [
the previous value associated with <tt>key</tt>, or <tt>null</tt> if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return can also indicate that the map previously associated <tt>null</tt> with <tt>key</tt>.)
]

div{
  class = (block:)
} : [

]

pre {} : [
Object
]

h4 {} : [

]

a{
  href = (../../java/lang/Object.html:)
  title = (class:in:java.lang:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

dd {} : [
key
]

dt {} : [
Returns:
]

dd {} : [
key
]

dt {} : [
Parameters:
]

dd {} : [
<a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Overrides:
]

dd {} : [
<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Specified by:
]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
remove
]

a{
  href = (../../java/util/Map.html#remove-java.lang.Object-:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Map.html:)
  title = (interface:in:java.util:)
} : [

]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
remove
]

a{
  href = (../../java/util/AbstractMap.html#remove-java.lang.Object-:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/AbstractMap.html:)
  title = (class:in:java.util:)
} : [

]

span{
  class = (paramLabel:)
} : [

]

code {} : [

]

span{
  class = (returnLabel:)
} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

li{
  class = (blockList:)
} : [
 <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#clear--">clear</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#clear--">clear</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> 
]

dl {} : [
<code><a href="../../java/util/AbstractMap.html#clear--">clear</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code>
]

div{
  class = (block:)
} : [

]

pre {} : [

]

h4 {} : [

]

dd {} : [
<a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Overrides:
]

dd {} : [
<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Specified by:
]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
clear
]

a{
  href = (../../java/util/Map.html#clear--:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Map.html:)
  title = (interface:in:java.util:)
} : [

]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
clear
]

a{
  href = (../../java/util/AbstractMap.html#clear--:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/AbstractMap.html:)
  title = (class:in:java.util:)
} : [

]

li{
  class = (blockList:)
} : [
 <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#containsValue-java.lang.Object-">containsValue</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#containsValue-java.lang.Object-">containsValue</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>value</code> - value whose presence in this map is to be tested</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><tt>true</tt> if this map maps one or more keys to the specified value</dd> 
]

dl {} : [
<tt>true</tt> if this map maps one or more keys to the specified value
]

div{
  class = (block:)
} : [
true
]

pre {} : [
Object
]

h4 {} : [

]

a{
  href = (../../java/lang/Object.html:)
  title = (class:in:java.lang:)
} : [

]

tt {} : [

]

dd {} : [
true
]

dt {} : [
Returns:
]

dd {} : [
value
]

dt {} : [
Parameters:
]

dd {} : [
<a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Overrides:
]

dd {} : [
<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Specified by:
]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
containsValue
]

a{
  href = (../../java/util/Map.html#containsValue-java.lang.Object-:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Map.html:)
  title = (interface:in:java.util:)
} : [

]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
containsValue
]

a{
  href = (../../java/util/AbstractMap.html#containsValue-java.lang.Object-:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/AbstractMap.html:)
  title = (class:in:java.util:)
} : [

]

span{
  class = (paramLabel:)
} : [

]

code {} : [

]

span{
  class = (returnLabel:)
} : [

]

tt {} : [

]

li{
  class = (blockList:)
} : [
 <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#keySet--">keySet</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#keySet--">keySet</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a set view of the keys contained in this map</dd> 
]

dl {} : [
a set view of the keys contained in this map
]

div{
  class = (block:)
} : [
addAll
]

pre {} : [
K
]

h4 {} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Set.html:)
  title = (interface:in:java.util:)
} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

a{
  href = (../../java/util/Set.html:)
  title = (interface:in:java.util:)
} : [
Set
]

code {} : [

]

dd {} : [

]

dt {} : [
Returns:
]

dd {} : [
<a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Overrides:
]

dd {} : [
<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Specified by:
]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
keySet
]

a{
  href = (../../java/util/Map.html#keySet--:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Map.html:)
  title = (interface:in:java.util:)
} : [

]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
keySet
]

a{
  href = (../../java/util/AbstractMap.html#keySet--:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/AbstractMap.html:)
  title = (class:in:java.util:)
} : [

]

span{
  class = (returnLabel:)
} : [

]

li{
  class = (blockList:)
} : [
 <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#values--">values</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#values--">values</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a view of the values contained in this map</dd> 
]

dl {} : [
a view of the values contained in this map
]

div{
  class = (block:)
} : [
addAll
]

pre {} : [
V
]

h4 {} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Collection.html:)
  title = (interface:in:java.util:)
} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

a{
  href = (../../java/util/Collection.html:)
  title = (interface:in:java.util:)
} : [
Collection
]

code {} : [

]

dd {} : [

]

dt {} : [
Returns:
]

dd {} : [
<a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Overrides:
]

dd {} : [
<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Specified by:
]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
values
]

a{
  href = (../../java/util/Map.html#values--:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Map.html:)
  title = (interface:in:java.util:)
} : [

]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
values
]

a{
  href = (../../java/util/AbstractMap.html#values--:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/AbstractMap.html:)
  title = (class:in:java.util:)
} : [

]

span{
  class = (returnLabel:)
} : [

]

li{
  class = (blockList:)
} : [
 <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#entrySet--">entrySet</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#entrySet--">entrySet</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a set view of the mappings contained in this map</dd> 
]

dl {} : [
a set view of the mappings contained in this map
]

div{
  class = (block:)
} : [
addAll
]

pre {} : [
V
]

h4 {} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Map.Entry.html:)
  title = (interface:in:java.util:)
} : [

]

a{
  href = (../../java/util/Set.html:)
  title = (interface:in:java.util:)
} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

tt {} : [

]

a{
  href = (../../java/util/Set.html:)
  title = (interface:in:java.util:)
} : [
Set
]

code {} : [

]

dd {} : [

]

dt {} : [
Returns:
]

dd {} : [
<a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Specified by:
]

dd {} : [
<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Specified by:
]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
entrySet
]

a{
  href = (../../java/util/Map.html#entrySet--:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Map.html:)
  title = (interface:in:java.util:)
} : [

]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
entrySet
]

a{
  href = (../../java/util/AbstractMap.html#entrySet--:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/AbstractMap.html:)
  title = (class:in:java.util:)
} : [

]

span{
  class = (returnLabel:)
} : [

]

li{
  class = (blockList:)
} : [
 <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#getOrDefault-java.lang.Object-V-">getOrDefault</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - the key whose associated value is to be returned</dd> <dd><code>defaultValue</code> - the default mapping of the key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the value to which the specified key is mapped, or <code>defaultValue</code> if this map contains no mapping for the key</dd> 
]

dl {} : [
the value to which the specified key is mapped, or <code>defaultValue</code> if this map contains no mapping for the key
]

div{
  class = (block:)
} : [
defaultValue
]

div{
  class = (block:)
} : [
Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#getOrDefault-java.lang.Object-V-">Map</a></code>
]

pre {} : [
V
]

h4 {} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/lang/Object.html:)
  title = (class:in:java.lang:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

span{
  class = (descfrmTypeLabel:)
} : [
<a href="../../java/util/Map.html#getOrDefault-java.lang.Object-V-">Map</a>
]

code {} : [
Map
]

a{
  href = (../../java/util/Map.html#getOrDefault-java.lang.Object-V-:)
} : [

]

code {} : [

]

dd {} : [
defaultValue
]

dt {} : [
Returns:
]

dd {} : [
defaultValue
]

dd {} : [
key
]

dt {} : [
Parameters:
]

dd {} : [
<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Specified by:
]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
getOrDefault
]

a{
  href = (../../java/util/Map.html#getOrDefault-java.lang.Object-V-:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Map.html:)
  title = (interface:in:java.util:)
} : [

]

span{
  class = (paramLabel:)
} : [

]

code {} : [

]

code {} : [

]

span{
  class = (returnLabel:)
} : [

]

code {} : [

]

li{
  class = (blockList:)
} : [
 <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#putIfAbsent-K-V-">putIfAbsent</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>value</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with the specified key, or <code>null</code> if there was no mapping for the key. (A <code>null</code> return can also indicate that the map previously associated <code>null</code> with the key, if the implementation supports null values.)</dd> 
]

dl {} : [
the previous value associated with the specified key, or <code>null</code> if there was no mapping for the key. (A <code>null</code> return can also indicate that the map previously associated <code>null</code> with the key, if the implementation supports null values.)
]

div{
  class = (block:)
} : [
null
]

div{
  class = (block:)
} : [
Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#putIfAbsent-K-V-">Map</a></code>
]

pre {} : [
V
]

h4 {} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

span{
  class = (descfrmTypeLabel:)
} : [
<a href="../../java/util/Map.html#putIfAbsent-K-V-">Map</a>
]

code {} : [
Map
]

a{
  href = (../../java/util/Map.html#putIfAbsent-K-V-:)
} : [

]

code {} : [

]

code {} : [

]

dd {} : [
null
]

dt {} : [
Returns:
]

dd {} : [
value
]

dd {} : [
key
]

dt {} : [
Parameters:
]

dd {} : [
<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Specified by:
]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
putIfAbsent
]

a{
  href = (../../java/util/Map.html#putIfAbsent-K-V-:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Map.html:)
  title = (interface:in:java.util:)
} : [

]

span{
  class = (paramLabel:)
} : [

]

code {} : [

]

code {} : [

]

span{
  class = (returnLabel:)
} : [

]

code {} : [

]

code {} : [

]

code {} : [

]

li{
  class = (blockList:)
} : [
 <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#remove-java.lang.Object-java.lang.Object-">remove</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is associated</dd> <dd><code>value</code> - value expected to be associated with the specified key </dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><code>true</code> if the value was removed</dd> 
]

dl {} : [
<code>true</code> if the value was removed
]

div{
  class = (block:)
} : [

]

div{
  class = (block:)
} : [
Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#remove-java.lang.Object-java.lang.Object-">Map</a></code>
]

pre {} : [
Object
]

h4 {} : [

]

a{
  href = (../../java/lang/Object.html:)
  title = (class:in:java.lang:)
} : [

]

a{
  href = (../../java/lang/Object.html:)
  title = (class:in:java.lang:)
} : [

]

span{
  class = (descfrmTypeLabel:)
} : [
<a href="../../java/util/Map.html#remove-java.lang.Object-java.lang.Object-">Map</a>
]

code {} : [
Map
]

a{
  href = (../../java/util/Map.html#remove-java.lang.Object-java.lang.Object-:)
} : [

]

dd {} : [
true
]

dt {} : [
Returns:
]

dd {} : [
value
]

dd {} : [
key
]

dt {} : [
Parameters:
]

dd {} : [
<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Specified by:
]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
remove
]

a{
  href = (../../java/util/Map.html#remove-java.lang.Object-java.lang.Object-:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Map.html:)
  title = (interface:in:java.util:)
} : [

]

span{
  class = (paramLabel:)
} : [

]

code {} : [

]

code {} : [

]

span{
  class = (returnLabel:)
} : [

]

code {} : [

]

li{
  class = (blockList:)
} : [
 <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#replace-K-V-V-">replace</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is associated</dd> <dd><code>oldValue</code> - value expected to be associated with the specified key</dd> <dd><code>newValue</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd><code>true</code> if the value was replaced</dd> 
]

dl {} : [
<code>true</code> if the value was replaced
]

div{
  class = (block:)
} : [

]

div{
  class = (block:)
} : [
Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#replace-K-V-V-">Map</a></code>
]

pre {} : [
V
]

h4 {} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

span{
  class = (descfrmTypeLabel:)
} : [
<a href="../../java/util/Map.html#replace-K-V-V-">Map</a>
]

code {} : [
Map
]

a{
  href = (../../java/util/Map.html#replace-K-V-V-:)
} : [

]

dd {} : [
true
]

dt {} : [
Returns:
]

dd {} : [
newValue
]

dd {} : [
oldValue
]

dd {} : [
key
]

dt {} : [
Parameters:
]

dd {} : [
<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Specified by:
]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
replace
]

a{
  href = (../../java/util/Map.html#replace-K-V-V-:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Map.html:)
  title = (interface:in:java.util:)
} : [

]

span{
  class = (paramLabel:)
} : [

]

code {} : [

]

code {} : [

]

code {} : [

]

span{
  class = (returnLabel:)
} : [

]

code {} : [

]

li{
  class = (blockList:)
} : [
 <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#replace-K-V-">replace</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is associated</dd> <dd><code>value</code> - value to be associated with the specified key</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the previous value associated with the specified key, or <code>null</code> if there was no mapping for the key. (A <code>null</code> return can also indicate that the map previously associated <code>null</code> with the key, if the implementation supports null values.)</dd> 
]

dl {} : [
the previous value associated with the specified key, or <code>null</code> if there was no mapping for the key. (A <code>null</code> return can also indicate that the map previously associated <code>null</code> with the key, if the implementation supports null values.)
]

div{
  class = (block:)
} : [

]

div{
  class = (block:)
} : [
Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#replace-K-V-">Map</a></code>
]

pre {} : [
V
]

h4 {} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

span{
  class = (descfrmTypeLabel:)
} : [
<a href="../../java/util/Map.html#replace-K-V-">Map</a>
]

code {} : [
Map
]

a{
  href = (../../java/util/Map.html#replace-K-V-:)
} : [

]

dd {} : [
null
]

dt {} : [
Returns:
]

dd {} : [
value
]

dd {} : [
key
]

dt {} : [
Parameters:
]

dd {} : [
<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Specified by:
]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
replace
]

a{
  href = (../../java/util/Map.html#replace-K-V-:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Map.html:)
  title = (interface:in:java.util:)
} : [

]

span{
  class = (paramLabel:)
} : [

]

code {} : [

]

code {} : [

]

span{
  class = (returnLabel:)
} : [

]

code {} : [

]

code {} : [

]

code {} : [

]

li{
  class = (blockList:)
} : [
 <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#computeIfAbsent-K-java.util.function.Function-">computeIfAbsent</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>mappingFunction</code> - the function to compute a value</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the current (existing or computed) value associated with the specified key, or null if the computed value is null</dd> 
]

dl {} : [
the current (existing or computed) value associated with the specified key, or null if the computed value is null
]

div{
  class = (block:)
} : [
 <code> map.computeIfAbsent(key, k -&gt; new HashSet&lt;V&gt;()).add(v); </code>
]

div{
  class = (block:)
} : [
Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#computeIfAbsent-K-java.util.function.Function-">Map</a></code>
]

pre {} : [
V
]

h4 {} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/function/Function.html:)
  title = (interface:in:java.util.function:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

span{
  class = (descfrmTypeLabel:)
} : [
<a href="../../java/util/Map.html#computeIfAbsent-K-java.util.function.Function-">Map</a>
]

code {} : [
Map
]

a{
  href = (../../java/util/Map.html#computeIfAbsent-K-java.util.function.Function-:)
} : [

]

pre {} : [
 map.computeIfAbsent(key, k -&gt; new HashSet&lt;V&gt;()).add(v); 
]

p {} : [
Map&lt;K,Collection&lt;V&gt;&gt;
]

pre {} : [
 map.computeIfAbsent(key, k -&gt; new Value(f(k))); 
]

p {} : [
null
]

code {} : [

]

code {} : [

]

code {} : [

]

code {} : [

]

code {} : [

]

code {} : [

]

dd {} : [

]

dt {} : [
Returns:
]

dd {} : [
mappingFunction
]

dd {} : [
key
]

dt {} : [
Parameters:
]

dd {} : [
<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Specified by:
]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
computeIfAbsent
]

a{
  href = (../../java/util/Map.html#computeIfAbsent-K-java.util.function.Function-:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Map.html:)
  title = (interface:in:java.util:)
} : [

]

span{
  class = (paramLabel:)
} : [

]

code {} : [

]

code {} : [

]

span{
  class = (returnLabel:)
} : [

]

li{
  class = (blockList:)
} : [
 <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-">computeIfPresent</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>remappingFunction</code> - the function to compute a value</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the new value associated with the specified key, or null if none</dd> 
]

dl {} : [
the new value associated with the specified key, or null if none
]

div{
  class = (block:)
} : [
If the function returns <code>null</code>, the mapping is removed. If the function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged.
]

div{
  class = (block:)
} : [
Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-">Map</a></code>
]

pre {} : [
V
]

h4 {} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/function/BiFunction.html:)
  title = (interface:in:java.util.function:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

span{
  class = (descfrmTypeLabel:)
} : [
<a href="../../java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-">Map</a>
]

code {} : [
Map
]

a{
  href = (../../java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-:)
} : [

]

p {} : [
null
]

code {} : [

]

dd {} : [

]

dt {} : [
Returns:
]

dd {} : [
remappingFunction
]

dd {} : [
key
]

dt {} : [
Parameters:
]

dd {} : [
<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Specified by:
]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
computeIfPresent
]

a{
  href = (../../java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Map.html:)
  title = (interface:in:java.util:)
} : [

]

span{
  class = (paramLabel:)
} : [

]

code {} : [

]

code {} : [

]

span{
  class = (returnLabel:)
} : [

]

li{
  class = (blockList:)
} : [
 <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#compute-K-java.util.function.BiFunction-">compute</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the specified value is to be associated </dd> <dd><code>remappingFunction</code> - the function to compute a value</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the new value associated with the specified key, or null if none</dd> 
]

dl {} : [
the new value associated with the specified key, or null if none
]

div{
  class = (block:)
} : [
If the function returns <code>null</code>, the mapping is removed (or remains absent if initially absent). If the function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged.
]

div{
  class = (block:)
} : [
Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#compute-K-java.util.function.BiFunction-">Map</a></code>
]

pre {} : [
V
]

h4 {} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/function/BiFunction.html:)
  title = (interface:in:java.util.function:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

span{
  class = (descfrmTypeLabel:)
} : [
<a href="../../java/util/Map.html#compute-K-java.util.function.BiFunction-">Map</a>
]

code {} : [
Map
]

a{
  href = (../../java/util/Map.html#compute-K-java.util.function.BiFunction-:)
} : [

]

p {} : [
null
]

a{
  href = (../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-:)
} : [
merge()
]

pre {} : [
 map.compute(key, (k, v) -&gt; (v == null) ? msg : v.concat(msg))
]

code {} : [

]

code {} : [

]

code {} : [

]

code {} : [

]

code {} : [

]

dd {} : [

]

dt {} : [
Returns:
]

dd {} : [
remappingFunction
]

dd {} : [
key
]

dt {} : [
Parameters:
]

dd {} : [
<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Specified by:
]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
compute
]

a{
  href = (../../java/util/Map.html#compute-K-java.util.function.BiFunction-:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Map.html:)
  title = (interface:in:java.util:)
} : [

]

span{
  class = (paramLabel:)
} : [

]

code {} : [

]

code {} : [

]

span{
  class = (returnLabel:)
} : [

]

li{
  class = (blockList:)
} : [
 <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-">merge</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>key</code> - key with which the resulting value is to be associated </dd> <dd><code>value</code> - the non-null value to be merged with the existing value associated with the key or, if no existing value or a null value is associated with the key, to be associated with the key</dd> <dd><code>remappingFunction</code> - the function to recompute a value if present</dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>the new value associated with the specified key, or null if no value is associated with the key</dd> 
]

dl {} : [
the new value associated with the specified key, or null if no value is associated with the key
]

div{
  class = (block:)
} : [
If the function returns <code>null</code> the mapping is removed. If the function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged.
]

div{
  class = (block:)
} : [
Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-">Map</a></code>
]

pre {} : [
V
]

h4 {} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/function/BiFunction.html:)
  title = (interface:in:java.util.function:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

span{
  class = (descfrmTypeLabel:)
} : [
<a href="../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-">Map</a>
]

code {} : [
Map
]

a{
  href = (../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-:)
} : [

]

p {} : [
null
]

pre {} : [
 map.merge(key, msg, String::concat) 
]

code {} : [

]

code {} : [

]

code {} : [

]

code {} : [

]

dd {} : [

]

dt {} : [
Returns:
]

dd {} : [
remappingFunction
]

dd {} : [
value
]

dd {} : [
key
]

dt {} : [
Parameters:
]

dd {} : [
<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Specified by:
]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
merge
]

a{
  href = (../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Map.html:)
  title = (interface:in:java.util:)
} : [

]

span{
  class = (paramLabel:)
} : [

]

code {} : [

]

code {} : [

]

code {} : [

]

span{
  class = (returnLabel:)
} : [

]

li{
  class = (blockList:)
} : [
 <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#forEach-java.util.function.BiConsumer-">forEach</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>action</code> - The action to be performed for each entry</dd> 
]

dl {} : [
<code>action</code> - The action to be performed for each entry
]

div{
  class = (block:)
} : [

]

div{
  class = (block:)
} : [
Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#forEach-java.util.function.BiConsumer-">Map</a></code>
]

pre {} : [
V
]

h4 {} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/function/BiConsumer.html:)
  title = (interface:in:java.util.function:)
} : [

]

span{
  class = (descfrmTypeLabel:)
} : [
<a href="../../java/util/Map.html#forEach-java.util.function.BiConsumer-">Map</a>
]

code {} : [
Map
]

a{
  href = (../../java/util/Map.html#forEach-java.util.function.BiConsumer-:)
} : [

]

dd {} : [
action
]

dt {} : [
Parameters:
]

dd {} : [
<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Specified by:
]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
forEach
]

a{
  href = (../../java/util/Map.html#forEach-java.util.function.BiConsumer-:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Map.html:)
  title = (interface:in:java.util:)
} : [

]

span{
  class = (paramLabel:)
} : [

]

code {} : [

]

li{
  class = (blockList:)
} : [
 <dt><span class="overrideSpecifyLabel">Specified by:</span></dt> <dd><code><a href="../../java/util/Map.html#replaceAll-java.util.function.BiFunction-">replaceAll</a></code>&nbsp;in interface&nbsp;<code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="paramLabel">Parameters:</span></dt> <dd><code>function</code> - the function to apply to each entry</dd> 
]

dl {} : [
<code>function</code> - the function to apply to each entry
]

div{
  class = (block:)
} : [

]

div{
  class = (block:)
} : [
Description copied from interface:&nbsp;<code><a href="../../java/util/Map.html#replaceAll-java.util.function.BiFunction-">Map</a></code>
]

pre {} : [
V
]

h4 {} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/function/BiFunction.html:)
  title = (interface:in:java.util.function:)
} : [

]

span{
  class = (descfrmTypeLabel:)
} : [
<a href="../../java/util/Map.html#replaceAll-java.util.function.BiFunction-">Map</a>
]

code {} : [
Map
]

a{
  href = (../../java/util/Map.html#replaceAll-java.util.function.BiFunction-:)
} : [

]

dd {} : [
function
]

dt {} : [
Parameters:
]

dd {} : [
<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Specified by:
]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
replaceAll
]

a{
  href = (../../java/util/Map.html#replaceAll-java.util.function.BiFunction-:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/Map.html:)
  title = (interface:in:java.util:)
} : [

]

span{
  class = (paramLabel:)
} : [

]

code {} : [

]

li{
  class = (blockList:)
} : [
 <dt><span class="overrideSpecifyLabel">Overrides:</span></dt> <dd><code><a href="../../java/util/AbstractMap.html#clone--">clone</a></code>&nbsp;in class&nbsp;<code><a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;</code></dd> <dt><span class="returnLabel">Returns:</span></dt> <dd>a shallow copy of this map</dd> <dt><span class="seeLabel">See Also:</span></dt> <dd><a href="../../java/lang/Cloneable.html" title="interface in java.lang"><code>Cloneable</code></a></dd> 
]

dl {} : [
<a href="../../java/lang/Cloneable.html" title="interface in java.lang"><code>Cloneable</code></a>
]

div{
  class = (block:)
} : [
HashMap
]

pre {} : [
Object
]

h4 {} : [

]

a{
  href = (../../java/lang/Object.html:)
  title = (class:in:java.lang:)
} : [

]

tt {} : [

]

dd {} : [
<code>Cloneable</code>
]

dt {} : [
See Also:
]

dd {} : [

]

dt {} : [
Returns:
]

dd {} : [
<a href="../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../java/util/HashMap.html" title="type parameter in HashMap">K</a>,<a href="../../java/util/HashMap.html" title="type parameter in HashMap">V</a>&gt;
]

dt {} : [
Overrides:
]

span{
  class = (overrideSpecifyLabel:)
} : [

]

code {} : [
V
]

code {} : [
clone
]

a{
  href = (../../java/util/AbstractMap.html#clone--:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/HashMap.html:)
  title = (type:parameter:in:HashMap:)
} : [

]

a{
  href = (../../java/util/AbstractMap.html:)
  title = (class:in:java.util:)
} : [

]

span{
  class = (returnLabel:)
} : [

]

span{
  class = (seeLabel:)
} : [

]

a{
  href = (../../java/lang/Cloneable.html:)
  title = (interface:in:java.lang:)
} : [
Cloneable
]

code {} : [

]

div{
  class = (aboutLanguage:)
} : [
Javaâ„¢&nbsp;Platform<br>Standard&nbsp;Ed.&nbsp;8
]

ul{
  title = (Navigation:)
  class = (navList:)
} : [
<a href="../../help-doc.html">Help</a>
]

a{
  name = (navbar.bottom.firstrow:)
} : [

]

div{
  class = (skipNav:)
} : [
Skip navigation links
]

a{
  name = (navbar.bottom:)
} : [

]

a{
  href = (#skip.navbar.bottom:)
  title = (Skip:navigation:links:)
} : [

]

li {} : [
Help
]

li {} : [
Index
]

li {} : [
Deprecated
]

li {} : [
Tree
]

li {} : [
Use
]

li{
  class = (navBarCell1Rev:)
} : [

]

li {} : [
Package
]

li {} : [
Overview
]

a{
  href = (../../overview-summary.html:)
} : [

]

a{
  href = (package-summary.html:)
} : [

]

a{
  href = (class-use/HashMap.html:)
} : [

]

a{
  href = (package-tree.html:)
} : [

]

a{
  href = (../../deprecated-list.html:)
} : [

]

a{
  href = (../../index-files/index-1.html:)
} : [

]

a{
  href = (../../help-doc.html:)
} : [

]

strong {} : [

]

br {} : [

]

a{
  name = (skip.navbar.bottom:)
} : [

]

div {} : [
 <li>Detail:&nbsp;</li> <li>Field&nbsp;|&nbsp;</li> <li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li> <li><a href="#method.detail">Method</a></li> 
]

div {} : [
 <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if (window == top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } // --> 
]

ul{
  style = (display::block;:)
  id = (allclasses_navbar_bottom:)
  class = (navList:)
} : [
<a href="../../allclasses-noframe.html">All&nbsp;Classes</a>
]

ul{
  class = (navList:)
} : [
<a href="HashMap.html" target="_top">No&nbsp;Frames</a>
]

ul{
  class = (navList:)
} : [
<a href="../../java/util/HashSet.html" title="class in java.util"><span class="typeNameLink">Next&nbsp;Class</span></a>
]

li {} : [
<span class="typeNameLink">Next&nbsp;Class</span>
]

li {} : [
<span class="typeNameLink">Prev&nbsp;Class</span>
]

a{
  href = (../../java/util/GregorianCalendar.html:)
  title = (class:in:java.util:)
} : [
Prev&nbsp;Class
]

span{
  class = (typeNameLink:)
} : [

]

a{
  href = (../../java/util/HashSet.html:)
  title = (class:in:java.util:)
} : [
Next&nbsp;Class
]

span{
  class = (typeNameLink:)
} : [

]

li {} : [
No&nbsp;Frames
]

li {} : [
Frames
]

a{
  href = (../../index.html?java/util/HashMap.html:)
  target = (_top:)
} : [

]

a{
  href = (HashMap.html:)
  target = (_top:)
} : [

]

li {} : [
All&nbsp;Classes
]

a{
  href = (../../allclasses-noframe.html:)
} : [

]

script{
  type = (text/javascript:)
} : [

]

ul{
  class = (subNavList:)
} : [
<a href="#method.detail">Method</a>
]

ul{
  class = (subNavList:)
} : [
<a href="#method.summary">Method</a>
]

li {} : [
Method
]

li {} : [
Constr
]

li {} : [

]

li {} : [
Nested
]

li {} : [

]

a{
  href = (#nested.classes.inherited.from.class.java.util.AbstractMap:)
} : [

]

a{
  href = (#constructor.summary:)
} : [

]

a{
  href = (#method.summary:)
} : [

]

li {} : [
Method
]

li {} : [
Constr
]

li {} : [

]

li {} : [

]

a{
  href = (#constructor.detail:)
} : [

]

a{
  href = (#method.detail:)
} : [

]

small {} : [
 <a href="http://bugreport.sun.com/bugreport/">Submit a bug or feature</a> <br>For further API reference and developer documentation, see <a href="https://docs.oracle.com/javase/8/docs/index.html" target="_blank">Java SE Documentation</a>. That documentation contains more detailed, developer-targeted descriptions, with conceptual overviews, definitions of terms, workarounds, and working code examples.<br> <a href="../../../legal/cpyr.html">Copyright</a> Â© 1993, 2019, Oracle and/or its affiliates. All rights reserved. Use is subject to <a href="http://download.oracle.com/otndocs/jcp/java_se-8-mrel-spec/license.html">license terms</a>. Also see the <a target="_blank" href="http://www.oracle.com/technetwork/java/redist-137594.html">documentation redistribution policy</a>. 
]

font{
  size = (-1:)
} : [
documentation redistribution policy
]

a{
  href = (http://www.oracle.com/technetwork/java/redist-137594.html:)
  target = (_blank:)
} : [

]

a{
  href = (http://download.oracle.com/otndocs/jcp/java_se-8-mrel-spec/license.html:)
} : [

]

a{
  href = (../../../legal/cpyr.html:)
} : [

]

br {} : [

]

a{
  href = (https://docs.oracle.com/javase/8/docs/index.html:)
  target = (_blank:)
} : [

]

br {} : [

]

a{
  href = (http://bugreport.sun.com/bugreport/:)
} : [

]

p {} : [

]



ROOT html body head style link script meta title noscript p div ul a li strong br span h2 dl pre hr dd dt code tt i h3 table tbody caption tr th td h4 small font 
 ROOT
    html
       body
          noscript
             p
          script
          script
          script
          p
             small
                font
                   a
                   a
                   a
                   br
                   a
                   br
                   a
          div
             a
             div
                ul
                   li
                      a
                   li
                      a
                   li
                   li
                ul
                   li
                      a
                   li
                      a
                   li
                   li
                      a
                   li
             div
                script
             ul
                li
                   a
             ul
                li
                   a
                li
                   a
             ul
                li
                   a
                      span
                li
                   a
                      span
          div
             div
                strong
                   br
             ul
                li
                   a
                li
                   a
                li
                   a
                li
                   a
                li
                   a
                li
                li
                   a
                li
                   a
             a
             div
                a
             a
          div
             div
                ul
                   li
                      ul
                         li
                            ul
                               li
                                  dl
                                     dd
                                        a
                                           code
                                     dt
                                        span
                                     dd
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                  div
                                     tt
                                  pre
                                     a
                                  h4
                            a
                            ul
                               li
                                  dl
                                     dd
                                        code
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                  div
                                  div
                                     span
                                        code
                                           a
                                  pre
                                     a
                                     a
                                     a
                                     a
                                  h4
                            a
                            ul
                               li
                                  dl
                                     dd
                                        code
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                  div
                                  div
                                     span
                                        code
                                           a
                                  pre
                                     a
                                     a
                                     a
                                  h4
                            a
                            ul
                               li
                                  dl
                                     dd
                                     dt
                                        span
                                     dd
                                        code
                                     dd
                                        code
                                     dd
                                        code
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                  div
                                     p
                                        code
                                     pre
                                        code
                                     code
                                     code
                                  div
                                     span
                                        code
                                           a
                                  pre
                                     a
                                     a
                                     a
                                     a
                                     a
                                     a
                                     a
                                  h4
                            a
                            a
                            ul
                               li
                                  dl
                                     dd
                                     dt
                                        span
                                     dd
                                        code
                                     dd
                                        code
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                  div
                                     p
                                        code
                                     a
                                        code
                                     pre
                                        code
                                     code
                                     code
                                  div
                                     span
                                        code
                                           a
                                  pre
                                     a
                                     a
                                     a
                                     a
                                     a
                                     a
                                  h4
                            a
                            a
                            ul
                               li
                                  dl
                                     dd
                                     dt
                                        span
                                     dd
                                        code
                                     dd
                                        code
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                  div
                                     p
                                        code
                                  div
                                     span
                                        code
                                           a
                                  pre
                                     a
                                     a
                                     a
                                     a
                                     a
                                     a
                                  h4
                            a
                            a
                            ul
                               li
                                  dl
                                     dd
                                     dt
                                        span
                                     dd
                                        code
                                     dd
                                        code
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                  div
                                     pre
                                        code
                                     p
                                        code
                                     pre
                                        code
                                     p
                                        code
                                     code
                                     code
                                  div
                                     span
                                        code
                                           a
                                  pre
                                     a
                                     a
                                     a
                                     a
                                     a
                                  h4
                            a
                            a
                            ul
                               li
                                  dl
                                     dd
                                        code
                                        code
                                        code
                                     dt
                                        span
                                     dd
                                        code
                                     dd
                                        code
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                  div
                                  div
                                     span
                                        code
                                           a
                                  pre
                                     a
                                     a
                                     a
                                  h4
                            a
                            a
                            ul
                               li
                                  dl
                                     dd
                                        code
                                     dt
                                        span
                                     dd
                                        code
                                     dd
                                        code
                                     dd
                                        code
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                  div
                                  div
                                     span
                                        code
                                           a
                                  pre
                                     a
                                     a
                                     a
                                  h4
                            a
                            a
                            ul
                               li
                                  dl
                                     dd
                                        code
                                     dt
                                        span
                                     dd
                                        code
                                     dd
                                        code
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                  div
                                  div
                                     span
                                        code
                                           a
                                  pre
                                     a
                                     a
                                  h4
                            a
                            ul
                               li
                                  dl
                                     dd
                                        code
                                        code
                                        code
                                     dt
                                        span
                                     dd
                                        code
                                     dd
                                        code
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                  div
                                     code
                                     code
                                  div
                                     span
                                        code
                                           a
                                  pre
                                     a
                                     a
                                     a
                                  h4
                            a
                            a
                            ul
                               li
                                  dl
                                     dd
                                        code
                                     dt
                                        span
                                     dd
                                        code
                                     dd
                                        code
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                  div
                                     code
                                  div
                                     span
                                        code
                                           a
                                  pre
                                     a
                                     a
                                     a
                                  h4
                            a
                            a
                            ul
                               li
                                  dl
                                     dd
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                  div
                                     tt
                                     tt
                                     tt
                                     tt
                                     tt
                                     tt
                                     tt
                                     tt
                                     tt
                                     a
                                        code
                                  pre
                                     a
                                     a
                                     a
                                     a
                                  h4
                            a
                            ul
                               li
                                  dl
                                     dd
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                  div
                                     tt
                                     tt
                                     tt
                                     tt
                                     tt
                                     tt
                                     tt
                                     tt
                                     a
                                        code
                                  pre
                                     a
                                     a
                                  h4
                            a
                            ul
                               li
                                  dl
                                     dd
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                  div
                                     tt
                                     tt
                                     tt
                                     tt
                                     tt
                                     tt
                                     tt
                                     tt
                                     a
                                        code
                                  pre
                                     a
                                     a
                                  h4
                            a
                            ul
                               li
                                  dl
                                     dd
                                        tt
                                     dt
                                        span
                                     dd
                                        code
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                  div
                                     tt
                                  pre
                                     a
                                  h4
                            a
                            ul
                               li
                                  dl
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                  div
                                  pre
                                  h4
                            a
                            ul
                               li
                                  dl
                                     dd
                                        tt
                                        tt
                                        tt
                                        tt
                                        tt
                                        tt
                                     dt
                                        span
                                     dd
                                        code
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                  div
                                  pre
                                     a
                                     a
                                  h4
                            a
                            ul
                               li
                                  dl
                                     dd
                                        code
                                           a
                                     dt
                                        span
                                     dd
                                        code
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                  div
                                  pre
                                     a
                                     a
                                     a
                                  h4
                            a
                            ul
                               li
                                  dl
                                     dd
                                        tt
                                        tt
                                        tt
                                        tt
                                        tt
                                        tt
                                     dt
                                        span
                                     dd
                                        code
                                     dd
                                        code
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                  div
                                  pre
                                     a
                                     a
                                     a
                                  h4
                            a
                            a
                            ul
                               li
                                  dl
                                     dd
                                        tt
                                     dt
                                        span
                                     dd
                                        code
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                  div
                                     tt
                                  pre
                                     a
                                  h4
                            a
                            ul
                               li
                                  dl
                                     dd
                                        a
                                           code
                                     dt
                                        span
                                     dd
                                        code
                                     dt
                                        span
                                     dd
                                        code
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                  div
                                     p
                                        a
                                           code
                                        code
                                        i
                                        code
                                     p
                                        code
                                        code
                                        code
                                        code
                                        code
                                     code
                                  pre
                                     a
                                     a
                                  h4
                            a
                            ul
                               li
                                  dl
                                     dd
                                        tt
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                  div
                                     tt
                                  pre
                                  h4
                            a
                            ul
                               li
                                  dl
                                     dd
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                     dd
                                        code
                                           a
                                           a
                                           a
                                        code
                                           a
                                     dt
                                        span
                                  div
                                  pre
                                  h4
                            a
                            h3
                            a
                      ul
                         li
                            ul
                               li
                                  dl
                                     dd
                                        code
                                           a
                                     dt
                                        span
                                     dd
                                        code
                                     dt
                                        span
                                  div
                                     tt
                                     tt
                                     tt
                                     tt
                                  pre
                                     a
                                     a
                                     a
                                  h4
                            a
                            ul
                               li
                                  div
                                     tt
                                  pre
                                  h4
                            a
                            ul
                               li
                                  dl
                                     dd
                                        code
                                           a
                                     dt
                                        span
                                     dd
                                        code
                                     dt
                                        span
                                  div
                                     tt
                                  pre
                                  h4
                            a
                            ul
                               li
                                  dl
                                     dd
                                        code
                                           a
                                     dt
                                        span
                                     dd
                                        code
                                     dd
                                        code
                                     dt
                                        span
                                  div
                                     tt
                                  pre
                                  h4
                            a
                            h3
                            a
             div
                ul
                   li
                      ul
                         li
                            ul
                               li
                                  code
                                     a
                                     a
                                  h3
                                     a
                                  a
                            ul
                               li
                                  code
                                     a
                                     a
                                     a
                                     a
                                     a
                                     a
                                     a
                                  h3
                                     a
                                  a
                            ul
                               li
                                  code
                                     a
                                     a
                                     a
                                  h3
                                     a
                                  a
                            table
                               tbody
                                  tr
                                     td
                                        div
                                           a
                                              code
                                        code
                                           span
                                              a
                                     td
                                        code
                                           a
                                           a
                                  tr
                                     td
                                        div
                                        code
                                           span
                                              a
                                     td
                                        code
                                  tr
                                     td
                                        div
                                        code
                                           a
                                           a
                                           a
                                           a
                                           span
                                              a
                                     td
                                        code
                                  tr
                                     td
                                        div
                                        code
                                           a
                                           a
                                           a
                                           span
                                              a
                                     td
                                        code
                                  tr
                                     td
                                        div
                                        code
                                           a
                                           a
                                           span
                                              a
                                     td
                                        code
                                           a
                                  tr
                                     td
                                        div
                                        code
                                           a
                                           a
                                           span
                                              a
                                     td
                                        code
                                  tr
                                     td
                                        div
                                        code
                                           a
                                           span
                                              a
                                     td
                                        code
                                           a
                                  tr
                                     td
                                        div
                                           code
                                           code
                                        code
                                           a
                                           a
                                           span
                                              a
                                     td
                                        code
                                           a
                                  tr
                                     td
                                        div
                                        code
                                           a
                                           a
                                           a
                                           span
                                              a
                                     td
                                        code
                                  tr
                                     td
                                        div
                                        code
                                           a
                                           a
                                           span
                                              a
                                     td
                                        code
                                           a
                                  tr
                                     td
                                        div
                                        code
                                           a
                                           a
                                           a
                                           a
                                           a
                                           a
                                           span
                                              a
                                     td
                                        code
                                           a
                                  tr
                                     td
                                        div
                                           a
                                              code
                                        code
                                           span
                                              a
                                     td
                                        code
                                           a
                                           a
                                  tr
                                     td
                                        div
                                           tt
                                        code
                                           span
                                              a
                                     td
                                        code
                                  tr
                                     td
                                        div
                                           code
                                        code
                                           a
                                           a
                                           span
                                              a
                                     td
                                        code
                                           a
                                  tr
                                     td
                                        div
                                           code
                                        code
                                           a
                                           span
                                              a
                                     td
                                        code
                                           a
                                  tr
                                     td
                                        div
                                        code
                                           a
                                           a
                                           a
                                           span
                                              a
                                     td
                                        code
                                  tr
                                     td
                                        div
                                           a
                                              code
                                        code
                                           span
                                              a
                                     td
                                        code
                                           a
                                           a
                                           a
                                           a
                                  tr
                                     td
                                        div
                                           tt
                                        code
                                           a
                                           span
                                              a
                                     td
                                        code
                                  tr
                                     td
                                        div
                                           tt
                                        code
                                           a
                                           span
                                              a
                                     td
                                        code
                                  tr
                                     td
                                        div
                                        code
                                           a
                                           a
                                           a
                                           a
                                           a
                                           span
                                              a
                                     td
                                        code
                                           a
                                  tr
                                     td
                                        div
                                           code
                                           code
                                        code
                                           a
                                           a
                                           a
                                           a
                                           span
                                              a
                                     td
                                        code
                                           a
                                  tr
                                     td
                                        div
                                           code
                                        code
                                           a
                                           a
                                           a
                                           a
                                           a
                                           span
                                              a
                                     td
                                        code
                                           a
                                  tr
                                     td
                                        div
                                           tt
                                        code
                                           span
                                              a
                                     td
                                        code
                                           a
                                  tr
                                     td
                                        div
                                        code
                                           span
                                              a
                                     td
                                        code
                                  tr
                                     th
                                     th
                               caption
                                  span
                                     span
                                     span
                                        a
                                  span
                                     span
                                     span
                                        a
                                  span
                                     span
                                     span
                            h3
                            a
                      ul
                         li
                            table
                               tbody
                                  tr
                                     td
                                        div
                                           tt
                                           tt
                                        code
                                           a
                                           a
                                           a
                                           span
                                              a
                                  tr
                                     td
                                        div
                                           tt
                                        code
                                           span
                                              a
                                  tr
                                     td
                                        div
                                           tt
                                        code
                                           span
                                              a
                                  tr
                                     td
                                        div
                                           tt
                                        code
                                           span
                                              a
                                  tr
                                     th
                               caption
                                  span
                                  span
                            h3
                            a
                      ul
                         li
                            ul
                               li
                                  code
                                     a
                                     a
                                     a
                                  h3
                                     a
                                  a
                            ul
                               li
                                  code
                                     a
                                     a
                                     a
                                     a
                                     a
                                     a
                                  h3
                                     a
                                  a
                            h3
                            a
             div
                ul
                   li
                      dl
                         dd
                            a
                            a
                               code
                            a
                               code
                            a
                               code
                            a
                               code
                            a
                               code
                         dt
                            span
                         dd
                         dt
                            span
                      div
                         p
                            a
                         p
                            i
                            tt
                         p
                            a
                               code
                            tt
                            i
                         pre
                         p
                            a
                               code
                            i
                            strong
                         p
                            a
                               code
                            code
                            tt
                         p
                            tt
                            tt
                            tt
                         p
                            i
                            i
                            i
                            i
                            i
                            tt
                         p
                            tt
                            tt
                            tt
                         tt
                         tt
                         tt
                         tt
                         tt
                      pre
                         a
                         a
                         a
                         a
                         span
                      br
                      hr
                      dl
                         dd
                            a
                            a
                         dt
                      dl
                         dd
                            a
                            a
                            a
                         dt
                      dl
                         dd
                            code
                         dd
                            code
                         dt
                            span
             ul
                li
                   ul
                      li
                         ul
                            li
                      li
                         a
                li
                   a
          div
             h2
             div
             div
          div
             a
             div
                ul
                   li
                      a
                   li
                      a
                   li
                   li
                ul
                   li
                      a
                   li
                      a
                   li
                   li
                      a
                   li
             div
                script
             ul
                li
                   a
             ul
                li
                   a
                li
                   a
             ul
                li
                   a
                      span
                li
                   a
                      span
          div
             div
                strong
                   br
             ul
                li
                   a
                li
                   a
                li
                   a
                li
                   a
                li
                   a
                li
                li
                   a
                li
                   a
             a
             div
                a
             a
          noscript
             div
          script
       head
          script
          script
          script
          link
          meta
          meta
          meta
          meta
          meta
          meta
          meta
          meta
          meta
          meta
          meta
          meta
          meta
          meta
          meta
          meta
          meta
          meta
          meta
          meta
          meta
          meta
          meta
          meta
          title
       style
       link
##########################################
##########################################
##########################################
##########################################
Running TreeList
-1 {} : [

]

0 {} : [

]

1 {} : [

]

4 {} : [

]

3 {} : [

]

2 {} : [

]


Nada
true, false


   -1
      0
         2
      1
         4
         3
